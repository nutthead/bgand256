colour-api:
  classes:
  - class-name: colour.adaptation.InductionFactors_CMCCAT2000
  - class-name: colour.adaptation.cmccat2000.InductionFactors_CMCCAT2000
  - class-name: colour.adaptation.fairchild2020.Coefficients_DegreeOfAdaptation_vK20
  - class-name: colour.algebra.sdiv_mode
  - class-name: colour.algebra.spow_enable
  - class-name: colour.algebra.KernelInterpolator
  - class-name: colour.algebra.NearestNeighbourInterpolator
  - class-name: colour.algebra.LinearInterpolator
  - class-name: colour.algebra.SpragueInterpolator
  - class-name: colour.algebra.CubicSplineInterpolator
  - class-name: colour.algebra.PchipInterpolator
    methods:
    - method-name: antiderivative
      signature: (self, nu=1)
    - method-name: construct_fast
      signature: (c, x, extrapolate=None, axis=0)
    - method-name: derivative
      signature: (self, nu=1)
    - method-name: extend
      signature: (self, c, x)
    - method-name: from_bernstein_basis
      signature: (bp, extrapolate=None)
    - method-name: from_spline
      signature: (tck, extrapolate=None)
    - method-name: integrate
      signature: (self, a, b, extrapolate=None)
    - method-name: roots
      signature: (self, discontinuity=True, extrapolate=None)
    - method-name: solve
      signature: (self, y=0.0, discontinuity=True, extrapolate=None)
  - class-name: colour.algebra.NullInterpolator
  - class-name: colour.algebra.Extrapolator
  - class-name: colour.algebra.common.sdiv_mode
  - class-name: colour.algebra.common.spow_enable
  - class-name: colour.algebra.extrapolation.Extrapolator
  - class-name: colour.algebra.interpolation.KernelInterpolator
  - class-name: colour.algebra.interpolation.NearestNeighbourInterpolator
  - class-name: colour.algebra.interpolation.LinearInterpolator
  - class-name: colour.algebra.interpolation.SpragueInterpolator
  - class-name: colour.algebra.interpolation.CubicSplineInterpolator
  - class-name: colour.algebra.interpolation.PchipInterpolator
    methods:
    - method-name: antiderivative
      signature: (self, nu=1)
    - method-name: construct_fast
      signature: (c, x, extrapolate=None, axis=0)
    - method-name: derivative
      signature: (self, nu=1)
    - method-name: extend
      signature: (self, c, x)
    - method-name: from_bernstein_basis
      signature: (bp, extrapolate=None)
    - method-name: from_spline
      signature: (tck, extrapolate=None)
    - method-name: integrate
      signature: (self, a, b, extrapolate=None)
    - method-name: roots
      signature: (self, discontinuity=True, extrapolate=None)
    - method-name: solve
      signature: (self, y=0.0, discontinuity=True, extrapolate=None)
  - class-name: colour.algebra.interpolation.NullInterpolator
  - class-name: colour.appearance.InductionFactors_Hunt
  - class-name: colour.appearance.CAM_Specification_Hunt
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.CAM_Specification_ATD95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_CIECAM02
  - class-name: colour.appearance.CAM_Specification_CIECAM02
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_CAM16
  - class-name: colour.appearance.CAM_Specification_CAM16
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_CIECAM16
  - class-name: colour.appearance.CAM_Specification_CIECAM16
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_Hellwig2022
  - class-name: colour.appearance.CAM_Specification_Hellwig2022
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_Kim2009
  - class-name: colour.appearance.MediaParameters_Kim2009
  - class-name: colour.appearance.CAM_Specification_Kim2009
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.InductionFactors_LLAB
  - class-name: colour.appearance.CAM_Specification_LLAB
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.CAM_Specification_Nayatani95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.CAM_Specification_RLAB
  - class-name: colour.appearance.InductionFactors_ZCAM
  - class-name: colour.appearance.CAM_Specification_ZCAM
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.atd95.CAM_ReferenceSpecification_ATD95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.atd95.CAM_Specification_ATD95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.cam16.InductionFactors_CAM16
  - class-name: colour.appearance.cam16.CAM_Specification_CAM16
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.ciecam02.InductionFactors_CIECAM02
  - class-name: colour.appearance.ciecam02.CAM_Specification_CIECAM02
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.ciecam16.InductionFactors_CIECAM16
  - class-name: colour.appearance.ciecam16.CAM_Specification_CIECAM16
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.hellwig2022.InductionFactors_Hellwig2022
  - class-name: colour.appearance.hellwig2022.CAM_Specification_Hellwig2022
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.hunt.InductionFactors_Hunt
  - class-name: colour.appearance.hunt.CAM_ReferenceSpecification_Hunt
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.hunt.CAM_Specification_Hunt
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.kim2009.InductionFactors_Kim2009
  - class-name: colour.appearance.kim2009.MediaParameters_Kim2009
  - class-name: colour.appearance.kim2009.CAM_Specification_Kim2009
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.llab.InductionFactors_LLAB
  - class-name: colour.appearance.llab.CAM_ReferenceSpecification_LLAB
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.llab.CAM_Specification_LLAB
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.nayatani95.CAM_ReferenceSpecification_Nayatani95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.nayatani95.CAM_Specification_Nayatani95
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.appearance.rlab.CAM_ReferenceSpecification_RLAB
  - class-name: colour.appearance.rlab.CAM_Specification_RLAB
  - class-name: colour.appearance.zcam.InductionFactors_ZCAM
  - class-name: colour.appearance.zcam.CAM_Specification_ZCAM
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.characterisation.RGB_CameraSensitivities
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.characterisation.RGB_DisplayPrimaries
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.characterisation.ColourChecker
  - class-name: colour.characterisation.cameras.RGB_CameraSensitivities
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.characterisation.datasets.ColourChecker
  - class-name: colour.characterisation.datasets.colour_checkers.ColourChecker
  - class-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.ColourChecker
  - class-name: colour.characterisation.displays.RGB_DisplayPrimaries
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.SpectralShape
    methods:
    - method-name: range
      signature: '(self, dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - class-name: colour.colorimetry.SpectralDistribution
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.MultiSpectralDistributions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.LMS_ConeFundamentals
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.RGB_ColourMatchingFunctions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.XYZ_ColourMatchingFunctions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.cmfs.LMS_ConeFundamentals
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.cmfs.RGB_ColourMatchingFunctions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.cmfs.XYZ_ColourMatchingFunctions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.datasets.illuminants.hunterlab.Illuminant_Specification_HunterLab
  - class-name: colour.colorimetry.spectrum.SpectralShape
    methods:
    - method-name: range
      signature: '(self, dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - class-name: colour.colorimetry.spectrum.SpectralDistribution
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.colorimetry.spectrum.MultiSpectralDistributions
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: to_sds
      signature: (self) -> 'List[SpectralDistribution]'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.constants.DTYPE_INT_DEFAULT
  - class-name: colour.constants.DTYPE_FLOAT_DEFAULT
  - class-name: colour.constants.common.DTYPE_INT_DEFAULT
  - class-name: colour.constants.common.DTYPE_FLOAT_DEFAULT
  - class-name: colour.continuous.AbstractContinuousFunction
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | Self'', operation: "Literal[''+'', ''-'',
        ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''Self'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.continuous.Signal
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.continuous.MultiSignals
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.continuous.abstract.AbstractContinuousFunction
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | Self'', operation: "Literal[''+'', ''-'',
        ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''Self'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.continuous.multi_signals.MultiSignals
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''MultiSignals'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''MultiSignals'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: multi_signals_unpack_data
      signature: '(data: ''ArrayLike | DataFrame | dict | MultiSignals | Sequence
        | Series | Signal | None'' = None, domain: ''ArrayLike | None'' = None, labels:
        ''Sequence | None'' = None, dtype: ''Type[DTypeFloat] | None'' = None, signal_type:
        ''Type[Signal]'' = <class ''colour.continuous.signal.Signal''>, **kwargs:
        ''Any'') -> ''Dict[str, Signal]'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: to_dataframe
      signature: (self) -> 'DataFrame'
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.continuous.signal.Signal
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.corresponding.CorrespondingColourDataset
  - class-name: colour.corresponding.CorrespondingChromaticitiesPrediction
  - class-name: colour.corresponding.datasets.breneman1987.BrenemanExperimentResult
  - class-name: colour.corresponding.datasets.breneman1987.PrimariesChromaticityCoordinates
  - class-name: colour.corresponding.prediction.CorrespondingColourDataset
  - class-name: colour.corresponding.prediction.CorrespondingChromaticitiesPrediction
  - class-name: colour.geometry.LineSegmentsIntersections_Specification
  - class-name: colour.geometry.intersection.LineSegmentsIntersections_Specification
  - class-name: colour.graph.conversion.Conversion_Specification
  - class-name: colour.hints.ModuleType
  - class-name: colour.hints.Any
  - class-name: colour.hints.Generator
    methods:
    - method-name: close
      signature: (self)
    - method-name: send
      signature: (self, value)
    - method-name: throw
      signature: (self, typ, val=None, tb=None)
  - class-name: colour.hints.Iterable
  - class-name: colour.hints.Iterator
  - class-name: colour.hints.Mapping
    methods:
    - method-name: get
      signature: (self, key, default=None)
    - method-name: items
      signature: (self)
    - method-name: keys
      signature: (self)
    - method-name: values
      signature: (self)
  - class-name: colour.hints.NewType
  - class-name: colour.hints.Protocol
  - class-name: colour.hints.Sequence
    methods:
    - method-name: count
      signature: (self, value)
    - method-name: index
      signature: (self, value, start=0, stop=None)
  - class-name: colour.hints.SupportsIndex
  - class-name: colour.hints.TextIO
    methods:
    - method-name: close
      signature: (self) -> None
    - method-name: fileno
      signature: (self) -> int
    - method-name: flush
      signature: (self) -> None
    - method-name: isatty
      signature: (self) -> bool
    - method-name: read
      signature: '(self, n: int = -1) -> ~AnyStr'
    - method-name: readable
      signature: (self) -> bool
    - method-name: readline
      signature: '(self, limit: int = -1) -> ~AnyStr'
    - method-name: readlines
      signature: '(self, hint: int = -1) -> List[~AnyStr]'
    - method-name: seek
      signature: '(self, offset: int, whence: int = 0) -> int'
    - method-name: seekable
      signature: (self) -> bool
    - method-name: tell
      signature: (self) -> int
    - method-name: truncate
      signature: '(self, size: int = None) -> int'
    - method-name: writable
      signature: (self) -> bool
    - method-name: write
      signature: '(self, s: ~AnyStr) -> int'
    - method-name: writelines
      signature: '(self, lines: List[~AnyStr]) -> None'
  - class-name: colour.hints.TypeVar
  - class-name: colour.hints.DTypeBoolean
  - class-name: colour.hints.Dataclass
  - class-name: colour.hints.ProtocolInterpolator
  - class-name: colour.hints.ProtocolExtrapolator
  - class-name: colour.hints.ProtocolLUTSequenceItem
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArray'''
  - class-name: colour.io.LUT1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.LUT3x1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3x1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.LUT3D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.AbstractLUTSequenceOperator
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.LUTOperatorMatrix
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.LUTSequence
    methods:
    - method-name: append
      signature: (self, value)
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'LUTSequence'
    - method-name: count
      signature: (self, value)
    - method-name: extend
      signature: (self, values)
    - method-name: index
      signature: (self, value, start=0, stop=None)
    - method-name: insert
      signature: '(self, index: ''int'', value: ''ProtocolLUTSequenceItem'')'
    - method-name: pop
      signature: (self, index=-1)
    - method-name: remove
      signature: (self, value)
    - method-name: reverse
      signature: (self)
  - class-name: colour.io.Image_Specification_Attribute
  - class-name: colour.io.Specification_Fichet2021
    methods:
    - method-name: from_spectral_image
      signature: '(path: ''str | Path'') -> ''Specification_Fichet2021'''
  - class-name: colour.io.SpectralDistribution_UPRTek
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_UPRTek'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.io.SpectralDistribution_Sekonic
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_Sekonic'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.io.Header_IESTM2714
  - class-name: colour.io.SpectralDistribution_IESTM2714
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_IESTM2714'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.io.fichet2021.Specification_Fichet2021
    methods:
    - method-name: from_spectral_image
      signature: '(path: ''str | Path'') -> ''Specification_Fichet2021'''
  - class-name: colour.io.image.Image_Specification_BitDepth
  - class-name: colour.io.image.Image_Specification_Attribute
  - class-name: colour.io.luts.LUT1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.LUT3x1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3x1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.LUT3D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.AbstractLUTSequenceOperator
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.luts.LUTOperatorMatrix
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.luts.LUTSequence
    methods:
    - method-name: append
      signature: (self, value)
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'LUTSequence'
    - method-name: count
      signature: (self, value)
    - method-name: extend
      signature: (self, values)
    - method-name: index
      signature: (self, value, start=0, stop=None)
    - method-name: insert
      signature: '(self, index: ''int'', value: ''ProtocolLUTSequenceItem'')'
    - method-name: pop
      signature: (self, index=-1)
    - method-name: remove
      signature: (self, value)
    - method-name: reverse
      signature: (self)
  - class-name: colour.io.luts.lut.AbstractLUT
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.lut.LUT1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.lut.LUT3x1D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3x1D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.lut.LUT3D
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractLUT'', operation: "Literal[''+'',
        ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False) -> ''AbstractLUT'''
    - method-name: convert
      signature: '(self, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' =
        False, **kwargs: ''Any'') -> ''AbstractLUT'''
    - method-name: copy
      signature: (self) -> 'AbstractLUT'
    - method-name: invert
      signature: '(self, **kwargs: ''Any'') -> ''LUT3D'''
    - method-name: is_domain_explicit
      signature: (self) -> 'bool'
    - method-name: linear_table
      signature: '(size: ''ArrayLike | None'' = None, domain: ''ArrayLike | None''
        = None) -> ''NDArrayFloat'''
  - class-name: colour.io.luts.operator.AbstractLUTSequenceOperator
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.luts.operator.LUTOperatorMatrix
    methods:
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') ->
        ''NDArrayFloat'''
  - class-name: colour.io.luts.sequence.LUTSequence
    methods:
    - method-name: append
      signature: (self, value)
    - method-name: apply
      signature: '(self, RGB: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'LUTSequence'
    - method-name: count
      signature: (self, value)
    - method-name: extend
      signature: (self, values)
    - method-name: index
      signature: (self, value, start=0, stop=None)
    - method-name: insert
      signature: '(self, index: ''int'', value: ''ProtocolLUTSequenceItem'')'
    - method-name: pop
      signature: (self, index=-1)
    - method-name: remove
      signature: (self, value)
    - method-name: reverse
      signature: (self)
  - class-name: colour.io.tm2714.Element_Specification_IESTM2714
  - class-name: colour.io.tm2714.Header_IESTM2714
  - class-name: colour.io.tm2714.SpectralDistribution_IESTM2714
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_IESTM2714'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.io.uprtek_sekonic.SpectralDistribution_UPRTek
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_UPRTek'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.io.uprtek_sekonic.SpectralDistribution_Sekonic
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: read
      signature: (self) -> 'SpectralDistribution_Sekonic'
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
    - method-name: write
      signature: (self) -> 'bool'
  - class-name: colour.models.RGB_Colourspace
    methods:
    - method-name: chromatically_adapt
      signature: '(self, whitepoint: ''ArrayLike'', whitepoint_name: ''str | None''
        = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
        | str'' = ''CAT02'') -> ''RGB_Colourspace'''
    - method-name: copy
      signature: (self) -> 'RGB_Colourspace'
    - method-name: use_derived_transformation_matrices
      signature: '(self, usage: ''bool'' = True)'
  - class-name: colour.models.cam02_ucs.Coefficients_UCS_Luo2006
  - class-name: colour.models.rgb.RGB_Colourspace
    methods:
    - method-name: chromatically_adapt
      signature: '(self, whitepoint: ''ArrayLike'', whitepoint_name: ''str | None''
        = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
        | str'' = ''CAT02'') -> ''RGB_Colourspace'''
    - method-name: copy
      signature: (self) -> 'RGB_Colourspace'
    - method-name: use_derived_transformation_matrices
      signature: '(self, usage: ''bool'' = True)'
  - class-name: colour.models.rgb.rgb_colourspace.RGB_Colourspace
    methods:
    - method-name: chromatically_adapt
      signature: '(self, whitepoint: ''ArrayLike'', whitepoint_name: ''str | None''
        = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
        | str'' = ''CAT02'') -> ''RGB_Colourspace'''
    - method-name: copy
      signature: (self) -> 'RGB_Colourspace'
    - method-name: use_derived_transformation_matrices
      signature: '(self, usage: ''bool'' = True)'
  - class-name: colour.plotting.ColourSwatch
  - class-name: colour.plotting.common.ColourSwatch
  - class-name: colour.plotting.common.KwargsArtist
  - class-name: colour.plotting.common.KwargsCamera
  - class-name: colour.plotting.common.KwargsRender
  - class-name: colour.quality.ColourRendering_Specification_CIE2017
  - class-name: colour.quality.ColourQuality_Specification_ANSIIESTM3018
  - class-name: colour.quality.ColourRendering_Specification_CRI
  - class-name: colour.quality.ColourRendering_Specification_CQS
  - class-name: colour.quality.cfi2017.DataColorimetry_TCS_CIE2017
  - class-name: colour.quality.cfi2017.ColourRendering_Specification_CIE2017
  - class-name: colour.quality.cqs.DataColorimetry_VS
  - class-name: colour.quality.cqs.DataColourQualityScale_VS
  - class-name: colour.quality.cqs.ColourRendering_Specification_CQS
  - class-name: colour.quality.cri.DataColorimetry_TCS
  - class-name: colour.quality.cri.DataColourQualityScale_TCS
  - class-name: colour.quality.cri.ColourRendering_Specification_CRI
  - class-name: colour.quality.tm3018.ColourQuality_Specification_ANSIIESTM3018
  - class-name: colour.quality.tm3018.ColourRendering_Specification_CIE2017
  - class-name: colour.quality.tm3018.DataColorimetry_TCS_CIE2017
  - class-name: colour.quality.tm3018.SpectralDistribution
    methods:
    - method-name: align
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None, extrapolator:
        ''Type[ProtocolExtrapolator] | None'' = None, extrapolator_kwargs: ''dict
        | None'' = None) -> ''Self'''
    - method-name: arithmetical_operation
      signature: '(self, a: ''ArrayLike | AbstractContinuousFunction'', operation:
        "Literal[''+'', ''-'', ''*'', ''/'', ''**'']", in_place: ''bool'' = False)
        -> ''AbstractContinuousFunction'''
    - method-name: copy
      signature: (self) -> 'Self'
    - method-name: domain_distance
      signature: '(self, a: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: extrapolate
      signature: '(self, shape: ''SpectralShape'', extrapolator: ''Type[ProtocolExtrapolator]
        | None'' = None, extrapolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: fill_nan
      signature: '(self, method: "Literal[''Constant'', ''Interpolation''] | str"
        = ''Interpolation'', default: ''Real'' = 0) -> ''Signal'''
    - method-name: interpolate
      signature: '(self, shape: ''SpectralShape'', interpolator: ''Type[ProtocolInterpolator]
        | None'' = None, interpolator_kwargs: ''dict | None'' = None) -> ''Self'''
    - method-name: is_uniform
      signature: (self) -> 'bool'
    - method-name: normalise
      signature: '(self, factor: ''Real'' = 1) -> ''Self'''
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: signal_unpack_data
      signature: '(data=typing.Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]],
        numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[typing.Any]]],
        complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
        | bytes | str], dict, pandas.core.series.Series, ForwardRef(''Signal''), NoneType],
        domain: ''ArrayLike | None'' = None, dtype: ''Type[DTypeFloat] | None'' =
        None) -> ''tuple'''
    - method-name: to_series
      signature: (self) -> 'Series'
    - method-name: trim
      signature: '(self, shape: ''SpectralShape'') -> ''Self'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.recovery.LUT3D_Jakob2019
    methods:
    - method-name: RGB_to_coefficients
      signature: '(self, RGB: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: RGB_to_sd
      signature: '(self, RGB: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
        780, 5)) -> ''SpectralDistribution'''
    - method-name: generate
      signature: '(self, colourspace: ''RGB_Colourspace'', cmfs: ''MultiSpectralDistributions
        | None'' = None, illuminant: ''SpectralDistribution | None'' = None, size:
        ''int'' = 64, print_callable: ''Callable'' = <built-in function print>)'
    - method-name: read
      signature: '(self, path: ''str | Path'') -> ''LUT3D_Jakob2019'''
    - method-name: write
      signature: '(self, path: ''str | Path'') -> ''bool'''
  - class-name: colour.recovery.Dataset_Otsu2018
    methods:
    - method-name: cluster
      signature: '(self, xy: ''ArrayLike'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
    - method-name: read
      signature: '(self, path: ''str | Path'') -> ''None'''
    - method-name: select
      signature: '(self, xy: ''ArrayLike'') -> ''int'''
    - method-name: write
      signature: '(self, path: ''str | Path'') -> ''None'''
  - class-name: colour.recovery.Tree_Otsu2018
    methods:
    - method-name: branch_reconstruction_error
      signature: (self) -> 'float'
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: leaf_reconstruction_error
      signature: (self) -> 'float'
    - method-name: minimise
      signature: '(self, minimum_cluster_size: ''int'') -> ''Tuple[Sequence[Node_Otsu2018],
        PartitionAxis, float]'''
    - method-name: optimise
      signature: '(self, iterations: ''int'' = 8, minimum_cluster_size: ''int | None''
        = None, print_callable: ''Callable'' = <built-in function print>)'
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: split
      signature: '(self, children: ''Sequence[Self]'', axis: ''PartitionAxis'')'
    - method-name: to_dataset
      signature: (self) -> 'Dataset_Otsu2018'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.recovery.jakob2019.StopMinimizationEarlyError
  - class-name: colour.recovery.jakob2019.LUT3D_Jakob2019
    methods:
    - method-name: RGB_to_coefficients
      signature: '(self, RGB: ''ArrayLike'') -> ''NDArrayFloat'''
    - method-name: RGB_to_sd
      signature: '(self, RGB: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
        780, 5)) -> ''SpectralDistribution'''
    - method-name: generate
      signature: '(self, colourspace: ''RGB_Colourspace'', cmfs: ''MultiSpectralDistributions
        | None'' = None, illuminant: ''SpectralDistribution | None'' = None, size:
        ''int'' = 64, print_callable: ''Callable'' = <built-in function print>)'
    - method-name: read
      signature: '(self, path: ''str | Path'') -> ''LUT3D_Jakob2019'''
    - method-name: write
      signature: '(self, path: ''str | Path'') -> ''bool'''
  - class-name: colour.recovery.otsu2018.Dataset_Otsu2018
    methods:
    - method-name: cluster
      signature: '(self, xy: ''ArrayLike'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
    - method-name: read
      signature: '(self, path: ''str | Path'') -> ''None'''
    - method-name: select
      signature: '(self, xy: ''ArrayLike'') -> ''int'''
    - method-name: write
      signature: '(self, path: ''str | Path'') -> ''None'''
  - class-name: colour.recovery.otsu2018.PartitionAxis
  - class-name: colour.recovery.otsu2018.Data_Otsu2018
    methods:
    - method-name: PCA
      signature: (self) -> 'None'
    - method-name: origin
      signature: '(self, i: ''int'', direction: ''int'') -> ''float'''
    - method-name: partition
      signature: '(self, axis: ''PartitionAxis'') -> ''Tuple[Data_Otsu2018, Data_Otsu2018]'''
    - method-name: reconstruct
      signature: '(self, XYZ: ''ArrayLike'') -> ''SpectralDistribution'''
    - method-name: reconstruction_error
      signature: (self) -> 'float'
  - class-name: colour.recovery.otsu2018.Node_Otsu2018
    methods:
    - method-name: branch_reconstruction_error
      signature: (self) -> 'float'
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: leaf_reconstruction_error
      signature: (self) -> 'float'
    - method-name: minimise
      signature: '(self, minimum_cluster_size: ''int'') -> ''Tuple[Sequence[Node_Otsu2018],
        PartitionAxis, float]'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: split
      signature: '(self, children: ''Sequence[Self]'', axis: ''PartitionAxis'')'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.recovery.otsu2018.Tree_Otsu2018
    methods:
    - method-name: branch_reconstruction_error
      signature: (self) -> 'float'
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: leaf_reconstruction_error
      signature: (self) -> 'float'
    - method-name: minimise
      signature: '(self, minimum_cluster_size: ''int'') -> ''Tuple[Sequence[Node_Otsu2018],
        PartitionAxis, float]'''
    - method-name: optimise
      signature: '(self, iterations: ''int'' = 8, minimum_cluster_size: ''int | None''
        = None, print_callable: ''Callable'' = <built-in function print>)'
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: split
      signature: '(self, children: ''Sequence[Self]'', axis: ''PartitionAxis'')'
    - method-name: to_dataset
      signature: (self) -> 'Dataset_Otsu2018'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.temperature.robertson1968.ISOTemperatureLine_Specification_Robertson1968
  - class-name: colour.utilities.MixinLogging
    methods:
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
  - class-name: colour.utilities.ColourWarning
  - class-name: colour.utilities.ColourUsageWarning
  - class-name: colour.utilities.ColourRuntimeWarning
  - class-name: colour.utilities.suppress_stdout
  - class-name: colour.utilities.Lookup
    methods:
    - method-name: first_key_from_value
      signature: '(self, value: ''Any'') -> ''Any'''
    - method-name: keys_from_value
      signature: '(self, value: ''Any'') -> ''list'''
  - class-name: colour.utilities.Structure
  - class-name: colour.utilities.CanonicalMapping
    methods:
    - method-name: canonical_items
      signature: (self) -> 'Generator'
    - method-name: canonical_keys
      signature: (self) -> 'Generator'
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'CanonicalMapping'
    - method-name: get
      signature: (self, key, default=None)
    - method-name: items
      signature: (self)
    - method-name: keys
      signature: (self)
    - method-name: lower_items
      signature: (self) -> 'Generator'
    - method-name: lower_keys
      signature: (self) -> 'Generator'
    - method-name: pop
      signature: (self, key, default=<object object at 0x7b936b1801a0>)
    - method-name: popitem
      signature: (self)
    - method-name: setdefault
      signature: (self, key, default=None)
    - method-name: slugified_items
      signature: (self) -> 'Generator'
    - method-name: slugified_keys
      signature: (self) -> 'Generator'
    - method-name: update
      signature: (self, other=(), /, **kwds)
    - method-name: values
      signature: (self)
  - class-name: colour.utilities.LazyCanonicalMapping
    methods:
    - method-name: canonical_items
      signature: (self) -> 'Generator'
    - method-name: canonical_keys
      signature: (self) -> 'Generator'
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'CanonicalMapping'
    - method-name: get
      signature: (self, key, default=None)
    - method-name: items
      signature: (self)
    - method-name: keys
      signature: (self)
    - method-name: lower_items
      signature: (self) -> 'Generator'
    - method-name: lower_keys
      signature: (self) -> 'Generator'
    - method-name: pop
      signature: (self, key, default=<object object at 0x7b936b1801a0>)
    - method-name: popitem
      signature: (self)
    - method-name: setdefault
      signature: (self, key, default=None)
    - method-name: slugified_items
      signature: (self) -> 'Generator'
    - method-name: slugified_keys
      signature: (self) -> 'Generator'
    - method-name: update
      signature: (self, other=(), /, **kwds)
    - method-name: values
      signature: (self)
  - class-name: colour.utilities.Callback
  - class-name: colour.utilities.MixinCallback
    methods:
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.utilities.caching_enable
  - class-name: colour.utilities.CacheRegistry
    methods:
    - method-name: clear_all_caches
      signature: (self)
    - method-name: clear_cache
      signature: '(self, name: ''str'')'
    - method-name: register_cache
      signature: '(self, name: ''str'') -> ''dict'''
    - method-name: unregister_cache
      signature: '(self, name: ''str'')'
  - class-name: colour.utilities.disable_multiprocessing
  - class-name: colour.utilities.MixinDataclassFields
  - class-name: colour.utilities.MixinDataclassIterable
  - class-name: colour.utilities.MixinDataclassArray
  - class-name: colour.utilities.MixinDataclassArithmetic
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.utilities.domain_range_scale
  - class-name: colour.utilities.ndarray_copy_enable
  - class-name: colour.utilities.TreeNode
    methods:
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.Port
    methods:
    - method-name: connect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: disconnect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: is_input_port
      signature: (self) -> 'bool'
    - method-name: is_output_port
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
  - class-name: colour.utilities.PortNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.PortGraph
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_node
      signature: '(self, node: ''PortNode'') -> ''None'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: '(self, **kwargs: ''Dict'') -> ''None'''
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_node
      signature: '(self, node: ''PortNode'') -> ''None'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'Dot'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
    - method-name: walk_ports
      signature: (self) -> 'Generator'
  - class-name: colour.utilities.ExecutionPort
    methods:
    - method-name: connect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: disconnect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: is_input_port
      signature: (self) -> 'bool'
    - method-name: is_output_port
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
  - class-name: colour.utilities.ExecutionNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.ControlFlowNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.For
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.ParallelForThread
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.ParallelForMultiprocess
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.array.MixinDataclassFields
  - class-name: colour.utilities.array.MixinDataclassIterable
  - class-name: colour.utilities.array.MixinDataclassArray
  - class-name: colour.utilities.array.MixinDataclassArithmetic
    methods:
    - method-name: arithmetical_operation
      signature: '(self, a: ''Any'', operation: ''str'', in_place: ''bool'' = False)
        -> ''Dataclass'''
  - class-name: colour.utilities.array.domain_range_scale
  - class-name: colour.utilities.array.ndarray_copy_enable
  - class-name: colour.utilities.callback.Callback
  - class-name: colour.utilities.callback.MixinCallback
    methods:
    - method-name: register_callback
      signature: '(self, attribute: ''str'', name: ''str'', function: ''Callable'')
        -> ''None'''
    - method-name: unregister_callback
      signature: '(self, attribute: ''str'', name: ''str'') -> ''None'''
  - class-name: colour.utilities.common.caching_enable
  - class-name: colour.utilities.common.CacheRegistry
    methods:
    - method-name: clear_all_caches
      signature: (self)
    - method-name: clear_cache
      signature: '(self, name: ''str'')'
    - method-name: register_cache
      signature: '(self, name: ''str'') -> ''dict'''
    - method-name: unregister_cache
      signature: '(self, name: ''str'')'
  - class-name: colour.utilities.common.disable_multiprocessing
  - class-name: colour.utilities.deprecation.ObjectRenamed
  - class-name: colour.utilities.deprecation.ObjectRemoved
  - class-name: colour.utilities.deprecation.ObjectFutureRename
  - class-name: colour.utilities.deprecation.ObjectFutureRemove
  - class-name: colour.utilities.deprecation.ObjectFutureAccessChange
  - class-name: colour.utilities.deprecation.ObjectFutureAccessRemove
  - class-name: colour.utilities.deprecation.ModuleAPI
  - class-name: colour.utilities.deprecation.ArgumentRenamed
  - class-name: colour.utilities.deprecation.ArgumentRemoved
  - class-name: colour.utilities.deprecation.ArgumentFutureRename
  - class-name: colour.utilities.deprecation.ArgumentFutureRemove
  - class-name: colour.utilities.documentation.DocstringDict
  - class-name: colour.utilities.documentation.DocstringFloat
  - class-name: colour.utilities.documentation.DocstringInt
  - class-name: colour.utilities.documentation.DocstringText
  - class-name: colour.utilities.documentation.DocstringTuple
  - class-name: colour.utilities.network.TreeNode
    methods:
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.Port
    methods:
    - method-name: connect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: disconnect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: is_input_port
      signature: (self) -> 'bool'
    - method-name: is_output_port
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
  - class-name: colour.utilities.network.PortNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.ControlFlowNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.PortGraph
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_node
      signature: '(self, node: ''PortNode'') -> ''None'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: '(self, **kwargs: ''Dict'') -> ''None'''
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_node
      signature: '(self, node: ''PortNode'') -> ''None'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'Dot'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
    - method-name: walk_ports
      signature: (self) -> 'Generator'
  - class-name: colour.utilities.network.ExecutionPort
    methods:
    - method-name: connect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: disconnect
      signature: '(self, port: ''Port'') -> ''None'''
    - method-name: is_input_port
      signature: (self) -> 'bool'
    - method-name: is_output_port
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
  - class-name: colour.utilities.network.ExecutionNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.ControlFlowNode
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.For
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.ParallelForThread
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.network.ParallelForMultiprocess
    methods:
    - method-name: add_input_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''Port'''
    - method-name: add_output_port
      signature: '(self, name: ''str'', value: ''Any'' = None, description: ''str
        | None'' = None, port_type: ''Type[Port]'' = <class ''colour.utilities.network.Port''>)
        -> ''None'''
    - method-name: connect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: disconnect
      signature: '(self, source_port: ''str'', target_node: ''PortNode'', target_port:
        ''str'') -> ''None'''
    - method-name: get_input
      signature: '(self, name: ''str'') -> ''Any'''
    - method-name: get_output
      signature: '(self, name: ''str'') -> ''None'''
    - method-name: is_inner
      signature: (self) -> 'bool'
    - method-name: is_leaf
      signature: (self) -> 'bool'
    - method-name: is_root
      signature: (self) -> 'bool'
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
    - method-name: process
      signature: (self) -> 'None'
    - method-name: remove_input_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: remove_output_port
      signature: '(self, name: ''str'') -> ''Port'''
    - method-name: render
      signature: '(self, tab_level: ''int'' = 0)'
    - method-name: set_input
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: set_output
      signature: '(self, name: ''str'', value: ''Any'') -> ''None'''
    - method-name: to_graphviz
      signature: (self) -> 'str'
    - method-name: walk_hierarchy
      signature: '(self, ascendants: ''bool'' = False) -> ''Generator'''
  - class-name: colour.utilities.structures.Structure
  - class-name: colour.utilities.structures.Lookup
    methods:
    - method-name: first_key_from_value
      signature: '(self, value: ''Any'') -> ''Any'''
    - method-name: keys_from_value
      signature: '(self, value: ''Any'') -> ''list'''
  - class-name: colour.utilities.structures.CanonicalMapping
    methods:
    - method-name: canonical_items
      signature: (self) -> 'Generator'
    - method-name: canonical_keys
      signature: (self) -> 'Generator'
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'CanonicalMapping'
    - method-name: get
      signature: (self, key, default=None)
    - method-name: items
      signature: (self)
    - method-name: keys
      signature: (self)
    - method-name: lower_items
      signature: (self) -> 'Generator'
    - method-name: lower_keys
      signature: (self) -> 'Generator'
    - method-name: pop
      signature: (self, key, default=<object object at 0x7b936b1801a0>)
    - method-name: popitem
      signature: (self)
    - method-name: setdefault
      signature: (self, key, default=None)
    - method-name: slugified_items
      signature: (self) -> 'Generator'
    - method-name: slugified_keys
      signature: (self) -> 'Generator'
    - method-name: update
      signature: (self, other=(), /, **kwds)
    - method-name: values
      signature: (self)
  - class-name: colour.utilities.structures.LazyCanonicalMapping
    methods:
    - method-name: canonical_items
      signature: (self) -> 'Generator'
    - method-name: canonical_keys
      signature: (self) -> 'Generator'
    - method-name: clear
      signature: (self)
    - method-name: copy
      signature: (self) -> 'CanonicalMapping'
    - method-name: get
      signature: (self, key, default=None)
    - method-name: items
      signature: (self)
    - method-name: keys
      signature: (self)
    - method-name: lower_items
      signature: (self) -> 'Generator'
    - method-name: lower_keys
      signature: (self) -> 'Generator'
    - method-name: pop
      signature: (self, key, default=<object object at 0x7b936b1801a0>)
    - method-name: popitem
      signature: (self)
    - method-name: setdefault
      signature: (self, key, default=None)
    - method-name: slugified_items
      signature: (self) -> 'Generator'
    - method-name: slugified_keys
      signature: (self) -> 'Generator'
    - method-name: update
      signature: (self, other=(), /, **kwds)
    - method-name: values
      signature: (self)
  - class-name: colour.utilities.verbose.MixinLogging
    methods:
    - method-name: log
      signature: '(self, message: ''str'', verbosity: "Literal[''critical'', ''error'',
        ''warning'', ''info'', ''debug'']" = ''info'') -> ''None'''
  - class-name: colour.utilities.verbose.ColourWarning
  - class-name: colour.utilities.verbose.ColourUsageWarning
  - class-name: colour.utilities.verbose.ColourRuntimeWarning
  - class-name: colour.utilities.verbose.suppress_stdout
  constants:
  - constant-name: colour.adaptation.CHROMATIC_ADAPTATION_TRANSFORMS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'XYZ Scaling': array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]]), 'Von Kries': array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
        ...
  - constant-name: colour.adaptation.CAT_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.8752,  0.2787, -0.1539],
             [-0.8904,  1.8709,  0.0195],
             [-0.0061,  0.0162,  0.9899]])
  - constant-name: colour.adaptation.CAT_BRADFORD
    type-name: ndarray
    value: |-
      array([[ 0.8951,  0.2664, -0.1614],
             [-0.7502,  1.7135,  0.0367],
             [ 0.0389, -0.0685,  1.0296]])
  - constant-name: colour.adaptation.CAT_CAT02
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.003 ,  0.0136,  0.9834]])
  - constant-name: colour.adaptation.CAT_CAT02_BRILL2008
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.    ,  0.    ,  1.    ]])
  - constant-name: colour.adaptation.CAT_CAT16
    type-name: ndarray
    value: |-
      array([[ 0.401288,  0.650173, -0.051461],
             [-0.250268,  1.204414,  0.045854],
             [-0.002079,  0.048952,  0.953127]])
  - constant-name: colour.adaptation.CAT_CMCCAT2000
    type-name: ndarray
    value: |-
      array([[  7.98200000e-01,   3.38900000e-01,  -1.37100000e-01],
             [ -5.91800000e-01,   1.55120000e+00,   4.06000000e-02],
             [  8.00000000e-04,   2.39000000e-02,   9.75300000e-01]])
  - constant-name: colour.adaptation.CAT_CMCCAT97
    type-name: ndarray
    value: |-
      array([[ 0.8951, -0.7502,  0.0389],
             [ 0.2664,  1.7135,  0.0685],
             [-0.1614,  0.0367,  1.0296]])
  - constant-name: colour.adaptation.CAT_FAIRCHILD
    type-name: ndarray
    value: |-
      array([[ 0.8562,  0.3372, -0.1934],
             [-0.836 ,  1.8327,  0.0033],
             [ 0.0357, -0.0469,  1.0112]])
  - constant-name: colour.adaptation.CAT_PC_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.6489,  0.3915, -0.0404],
             [-0.3775,  1.3055,  0.072 ],
             [-0.0271,  0.0888,  0.9383]])
  - constant-name: colour.adaptation.CAT_SHARP
    type-name: ndarray
    value: |-
      array([[ 1.2694, -0.0988, -0.1706],
             [-0.8364,  1.8006,  0.0357],
             [ 0.0297, -0.0315,  1.0018]])
  - constant-name: colour.adaptation.CAT_VON_KRIES
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.adaptation.CAT_XYZ_SCALING
    type-name: ndarray
    value: |-
      array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]])
  - constant-name: colour.adaptation.CONDITIONS_DEGREE_OF_ADAPTATION_VK20
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Fairchild'': Coefficients_DegreeOfAdaptation_vK20(D_n=0.7,
      D_r=0.3, D_p=0), ''Hands'': Coefficients_DegreeOfAdaptation_vK20(D_n=0.95, D_r=0.05,
      D_p=0), ''No Hands'': Coefficients_DegreeO...'
  - constant-name: colour.adaptation.VIEWING_CONDITIONS_CMCCAT2000
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CMCCAT2000(F=1), ''Dim'':
      InductionFactors_CMCCAT2000(F=0.8), ''Dark'': InductionFactors_CMCCAT2000(F=0.8)})'
  - constant-name: colour.adaptation.CHROMATIC_ADAPTATION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1994'': <function chromatic_adaptation_CIE1994
      at 0x7b934ba85c60>, ''CMCCAT2000'': <function chromatic_adaptation_CMCCAT2000
      at 0x7b934ba859e0>, ''Fairchild 1990'': <function chromat...'
  - constant-name: colour.adaptation.cie1994.MATRIX_XYZ_TO_RGB_CIE1994
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.adaptation.cie1994.MATRIX_RGB_TO_XYZ_CIE1994
    type-name: ndarray
    value: |-
      array([[  1.85993639e+00,  -1.12938162e+00,   2.19897410e-01],
             [  3.61191436e-01,   6.38812463e-01,  -6.37059684e-06],
             [  0.00000000e+00,   0.00000000e+00,   1.08906362e+00]])
  - constant-name: colour.adaptation.cmccat2000.CAT_INVERSE_CMCCAT2000
    type-name: ndarray
    value: |-
      array([[ 1.07645005, -0.23766239,  0.16121234],
             [ 0.41096433,  0.5543418 ,  0.03469387],
             [-0.01095377, -0.01338936,  1.02434312]])
  - constant-name: colour.adaptation.cmccat2000.VIEWING_CONDITIONS_CMCCAT2000
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CMCCAT2000(F=1), ''Dim'':
      InductionFactors_CMCCAT2000(F=0.8), ''Dark'': InductionFactors_CMCCAT2000(F=0.8)})'
  - constant-name: colour.adaptation.datasets.CHROMATIC_ADAPTATION_TRANSFORMS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'XYZ Scaling': array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]]), 'Von Kries': array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
        ...
  - constant-name: colour.adaptation.datasets.CAT_XYZ_SCALING
    type-name: ndarray
    value: |-
      array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]])
  - constant-name: colour.adaptation.datasets.CAT_VON_KRIES
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.adaptation.datasets.CAT_BRADFORD
    type-name: ndarray
    value: |-
      array([[ 0.8951,  0.2664, -0.1614],
             [-0.7502,  1.7135,  0.0367],
             [ 0.0389, -0.0685,  1.0296]])
  - constant-name: colour.adaptation.datasets.CAT_SHARP
    type-name: ndarray
    value: |-
      array([[ 1.2694, -0.0988, -0.1706],
             [-0.8364,  1.8006,  0.0357],
             [ 0.0297, -0.0315,  1.0018]])
  - constant-name: colour.adaptation.datasets.CAT_FAIRCHILD
    type-name: ndarray
    value: |-
      array([[ 0.8562,  0.3372, -0.1934],
             [-0.836 ,  1.8327,  0.0033],
             [ 0.0357, -0.0469,  1.0112]])
  - constant-name: colour.adaptation.datasets.CAT_CMCCAT97
    type-name: ndarray
    value: |-
      array([[ 0.8951, -0.7502,  0.0389],
             [ 0.2664,  1.7135,  0.0685],
             [-0.1614,  0.0367,  1.0296]])
  - constant-name: colour.adaptation.datasets.CAT_CMCCAT2000
    type-name: ndarray
    value: |-
      array([[  7.98200000e-01,   3.38900000e-01,  -1.37100000e-01],
             [ -5.91800000e-01,   1.55120000e+00,   4.06000000e-02],
             [  8.00000000e-04,   2.39000000e-02,   9.75300000e-01]])
  - constant-name: colour.adaptation.datasets.CAT_CAT02
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.003 ,  0.0136,  0.9834]])
  - constant-name: colour.adaptation.datasets.CAT_CAT02_BRILL2008
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.    ,  0.    ,  1.    ]])
  - constant-name: colour.adaptation.datasets.CAT_CAT16
    type-name: ndarray
    value: |-
      array([[ 0.401288,  0.650173, -0.051461],
             [-0.250268,  1.204414,  0.045854],
             [-0.002079,  0.048952,  0.953127]])
  - constant-name: colour.adaptation.datasets.CAT_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.8752,  0.2787, -0.1539],
             [-0.8904,  1.8709,  0.0195],
             [-0.0061,  0.0162,  0.9899]])
  - constant-name: colour.adaptation.datasets.CAT_PC_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.6489,  0.3915, -0.0404],
             [-0.3775,  1.3055,  0.072 ],
             [-0.0271,  0.0888,  0.9383]])
  - constant-name: colour.adaptation.datasets.cat.CAT_XYZ_SCALING
    type-name: ndarray
    value: |-
      array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]])
  - constant-name: colour.adaptation.datasets.cat.CAT_VON_KRIES
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.adaptation.datasets.cat.CAT_BRADFORD
    type-name: ndarray
    value: |-
      array([[ 0.8951,  0.2664, -0.1614],
             [-0.7502,  1.7135,  0.0367],
             [ 0.0389, -0.0685,  1.0296]])
  - constant-name: colour.adaptation.datasets.cat.CAT_SHARP
    type-name: ndarray
    value: |-
      array([[ 1.2694, -0.0988, -0.1706],
             [-0.8364,  1.8006,  0.0357],
             [ 0.0297, -0.0315,  1.0018]])
  - constant-name: colour.adaptation.datasets.cat.CAT_FAIRCHILD
    type-name: ndarray
    value: |-
      array([[ 0.8562,  0.3372, -0.1934],
             [-0.836 ,  1.8327,  0.0033],
             [ 0.0357, -0.0469,  1.0112]])
  - constant-name: colour.adaptation.datasets.cat.CAT_CMCCAT97
    type-name: ndarray
    value: |-
      array([[ 0.8951, -0.7502,  0.0389],
             [ 0.2664,  1.7135,  0.0685],
             [-0.1614,  0.0367,  1.0296]])
  - constant-name: colour.adaptation.datasets.cat.CAT_CMCCAT2000
    type-name: ndarray
    value: |-
      array([[  7.98200000e-01,   3.38900000e-01,  -1.37100000e-01],
             [ -5.91800000e-01,   1.55120000e+00,   4.06000000e-02],
             [  8.00000000e-04,   2.39000000e-02,   9.75300000e-01]])
  - constant-name: colour.adaptation.datasets.cat.CAT_CAT02
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.003 ,  0.0136,  0.9834]])
  - constant-name: colour.adaptation.datasets.cat.CAT_CAT02_BRILL2008
    type-name: ndarray
    value: |-
      array([[ 0.7328,  0.4296, -0.1624],
             [-0.7036,  1.6975,  0.0061],
             [ 0.    ,  0.    ,  1.    ]])
  - constant-name: colour.adaptation.datasets.cat.CAT_CAT16
    type-name: ndarray
    value: |-
      array([[ 0.401288,  0.650173, -0.051461],
             [-0.250268,  1.204414,  0.045854],
             [-0.002079,  0.048952,  0.953127]])
  - constant-name: colour.adaptation.datasets.cat.CAT_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.8752,  0.2787, -0.1539],
             [-0.8904,  1.8709,  0.0195],
             [-0.0061,  0.0162,  0.9899]])
  - constant-name: colour.adaptation.datasets.cat.CAT_PC_BIANCO2010
    type-name: ndarray
    value: |-
      array([[ 0.6489,  0.3915, -0.0404],
             [-0.3775,  1.3055,  0.072 ],
             [-0.0271,  0.0888,  0.9383]])
  - constant-name: colour.adaptation.datasets.cat.CHROMATIC_ADAPTATION_TRANSFORMS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'XYZ Scaling': array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]]), 'Von Kries': array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
        ...
  - constant-name: colour.adaptation.fairchild1990.MATRIX_XYZ_TO_RGB_FAIRCHILD1990
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.adaptation.fairchild1990.MATRIX_RGB_TO_XYZ_FAIRCHILD1990
    type-name: ndarray
    value: |-
      array([[  1.85993639e+00,  -1.12938162e+00,   2.19897410e-01],
             [  3.61191436e-01,   6.38812463e-01,  -6.37059684e-06],
             [  0.00000000e+00,   0.00000000e+00,   1.08906362e+00]])
  - constant-name: colour.adaptation.fairchild2020.CONDITIONS_DEGREE_OF_ADAPTATION_VK20
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Fairchild'': Coefficients_DegreeOfAdaptation_vK20(D_n=0.7,
      D_r=0.3, D_p=0), ''Hands'': Coefficients_DegreeOfAdaptation_vK20(D_n=0.95, D_r=0.05,
      D_p=0), ''No Hands'': Coefficients_DegreeO...'
  - constant-name: colour.adaptation.fairchild2020.TVS_XYZ_R_VK20
    type-name: ndarray
    value: array([ 0.97941176,  1.        ,  1.73235294])
  - constant-name: colour.algebra.TABLE_INTERPOLATION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Trilinear'': <function table_interpolation_trilinear
      at 0x7b934ed4b2e0>, ''Tetrahedral'': <function table_interpolation_tetrahedral
      at 0x7b934ed4b380>})'
  - constant-name: colour.algebra.interpolation.TABLE_INTERPOLATION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Trilinear'': <function table_interpolation_trilinear
      at 0x7b934ed4b2e0>, ''Tetrahedral'': <function table_interpolation_tetrahedral
      at 0x7b934ed4b380>})'
  - constant-name: colour.algebra.prng.RANDOM_STATE
    type-name: RandomState
    value: RandomState(MT19937) at 0x7B93671D1840
  - constant-name: colour.appearance.VIEWING_CONDITIONS_HUNT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Small Areas, Uniform Background & Surrounds'': InductionFactors_Hunt(N_c=1,
      N_b=300, N_cb=None, N_bb=None), ''Normal Scenes'': InductionFactors_Hunt(N_c=1,
      N_b=75, N_cb=None, N_bb=None...'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_CIECAM02
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_CAM16
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_CIECAM16
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_HELLWIG2022
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.HKE_NAYATANI1997_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''VAC'': -0.134, ''VCC'': -0.866})'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_KIM2009
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.MEDIA_PARAMETERS_KIM2009
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''High-luminance LCD Display'': MediaParameters_Kim2009(E=1),
      ''Transparent Advertising Media'': MediaParameters_Kim2009(E=1.2175), ''CRT
      Displays'': MediaParameters_Kim2009(E=1.4572), ''Re...'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_LLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Reference Samples & Images, Average Surround, Subtending
      > 4'': InductionFactors_LLAB(D=1, F_S=3, F_L=0, F_C=1), ''Reference Samples
      & Images, Average Surround, Subtending < 4'': Induc...'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_RLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': 0.4347826086956522, ''Dim'': 0.3448275862068966,
      ''Dark'': 0.2857142857142857})'
  - constant-name: colour.appearance.D_FACTOR_RLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Hard Copy Images'': 1, ''Soft Copy Images'': 0, ''Projected
      Transparencies, Dark Room'': 0.5, ''hard_cp_img'': 1, ''soft_cp_img'': 0, ''projected_dark'':
      0.5})'
  - constant-name: colour.appearance.VIEWING_CONDITIONS_ZCAM
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_ZCAM(F_s=0.69, F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_ZCAM(F_s=0.59, F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_ZCAM(F_s=0.525, F=0.8, c=0.52...'
  - constant-name: colour.appearance.cam16.MATRIX_16
    type-name: ndarray
    value: |-
      array([[ 0.401288,  0.650173, -0.051461],
             [-0.250268,  1.204414,  0.045854],
             [-0.002079,  0.048952,  0.953127]])
  - constant-name: colour.appearance.cam16.MATRIX_INVERSE_16
    type-name: ndarray
    value: |-
      array([[ 1.86206786, -1.01125463,  0.14918678],
             [ 0.38752654,  0.62144744, -0.00897399],
             [-0.0158415 , -0.03412294,  1.04996444]])
  - constant-name: colour.appearance.cam16.VIEWING_CONDITIONS_CAM16
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.ciecam02.CAT_INVERSE_CAT02
    type-name: ndarray
    value: |-
      array([[ 1.09612382, -0.278869  ,  0.18274518],
             [ 0.45436904,  0.47353315,  0.0720978 ],
             [-0.00962761, -0.00569803,  1.01532564]])
  - constant-name: colour.appearance.ciecam02.VIEWING_CONDITIONS_CIECAM02
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.ciecam02.HUE_DATA_FOR_HUE_QUADRATURE
    type-name: dict
    value: '{''h_i'': array([  20.14,   90.  ,  164.25,  237.53,  380.14]), ''e_i'':
      array([ 0.8,  0.7,  1. ,  1.2,  0.8]), ''H_i'': array([   0.,  100.,  200.,  300.,  400.])}'
  - constant-name: colour.appearance.ciecam16.VIEWING_CONDITIONS_CIECAM16
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.hellwig2022.VIEWING_CONDITIONS_HELLWIG2022
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.hke.HKE_NAYATANI1997_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''VAC'': -0.134, ''VCC'': -0.866})'
  - constant-name: colour.appearance.hunt.VIEWING_CONDITIONS_HUNT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Small Areas, Uniform Background & Surrounds'': InductionFactors_Hunt(N_c=1,
      N_b=300, N_cb=None, N_bb=None), ''Normal Scenes'': InductionFactors_Hunt(N_c=1,
      N_b=75, N_cb=None, N_bb=None...'
  - constant-name: colour.appearance.hunt.HUE_DATA_FOR_HUE_QUADRATURE
    type-name: dict
    value: '{''h_s'': array([  20.14,   90.  ,  164.25,  237.53]), ''e_s'': array([
      0.8,  0.7,  1. ,  1.2])}'
  - constant-name: colour.appearance.hunt.MATRIX_XYZ_TO_HPE
    type-name: ndarray
    value: |-
      array([[ 0.38971,  0.68898, -0.07868],
             [-0.22981,  1.1834 ,  0.04641],
             [ 0.     ,  0.     ,  1.     ]])
  - constant-name: colour.appearance.hunt.MATRIX_HPE_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  1.91019683e+00,  -1.11212389e+00,   2.01907957e-01],
             [  3.70950088e-01,   6.29054257e-01,  -8.05514218e-06],
             [  0.00000000e+00,   0.00000000e+00,   1.00000000e+00]])
  - constant-name: colour.appearance.kim2009.VIEWING_CONDITIONS_KIM2009
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_CIECAM02(F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_CIECAM02(F=0.8, c=0.525, N_c=0.8)})'
  - constant-name: colour.appearance.kim2009.MEDIA_PARAMETERS_KIM2009
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''High-luminance LCD Display'': MediaParameters_Kim2009(E=1),
      ''Transparent Advertising Media'': MediaParameters_Kim2009(E=1.2175), ''CRT
      Displays'': MediaParameters_Kim2009(E=1.4572), ''Re...'
  - constant-name: colour.appearance.llab.VIEWING_CONDITIONS_LLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Reference Samples & Images, Average Surround, Subtending
      > 4'': InductionFactors_LLAB(D=1, F_S=3, F_L=0, F_C=1), ''Reference Samples
      & Images, Average Surround, Subtending < 4'': Induc...'
  - constant-name: colour.appearance.llab.MATRIX_XYZ_TO_RGB_LLAB
    type-name: ndarray
    value: |-
      array([[ 0.8951,  0.2664, -0.1614],
             [-0.7502,  1.7135,  0.0367],
             [ 0.0389, -0.0685,  1.0296]])
  - constant-name: colour.appearance.llab.MATRIX_RGB_TO_XYZ_LLAB
    type-name: ndarray
    value: |-
      array([[ 0.98699291, -0.14705426,  0.15996265],
             [ 0.43230527,  0.51836027,  0.04929123],
             [-0.00852866,  0.04004282,  0.9684867 ]])
  - constant-name: colour.appearance.nayatani95.MATRIX_XYZ_TO_RGB_NAYATANI95
    type-name: ndarray
    value: |-
      array([[ 0.40024,  0.7076 , -0.08081],
             [-0.2263 ,  1.16532,  0.0457 ],
             [ 0.     ,  0.     ,  0.91822]])
  - constant-name: colour.appearance.rlab.MATRIX_R
    type-name: ndarray
    value: |-
      array([[ 1.9569, -1.1882,  0.2313],
             [ 0.3612,  0.6388,  0.    ],
             [ 0.    ,  0.    ,  1.    ]])
  - constant-name: colour.appearance.rlab.VIEWING_CONDITIONS_RLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': 0.4347826086956522, ''Dim'': 0.3448275862068966,
      ''Dark'': 0.2857142857142857})'
  - constant-name: colour.appearance.rlab.D_FACTOR_RLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Hard Copy Images'': 1, ''Soft Copy Images'': 0, ''Projected
      Transparencies, Dark Room'': 0.5, ''hard_cp_img'': 1, ''soft_cp_img'': 0, ''projected_dark'':
      0.5})'
  - constant-name: colour.appearance.zcam.VIEWING_CONDITIONS_ZCAM
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Average'': InductionFactors_ZCAM(F_s=0.69, F=1, c=0.69,
      N_c=1), ''Dim'': InductionFactors_ZCAM(F_s=0.59, F=0.9, c=0.59, N_c=0.9), ''Dark'':
      InductionFactors_ZCAM(F_s=0.525, F=0.8, c=0.52...'
  - constant-name: colour.biochemistry.REACTION_RATE_MICHAELISMENTEN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Michaelis 1913'': <function reaction_rate_MichaelisMenten_Michaelis1913
      at 0x7b934bc40860>, ''Abebe 2017'': <function reaction_rate_MichaelisMenten_Abebe2017
      at 0x7b934bc40900>})'
  - constant-name: colour.biochemistry.SUBSTRATE_CONCENTRATION_MICHAELISMENTEN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Michaelis 1913'': <function substrate_concentration_MichaelisMenten_Michaelis1913
      at 0x7b934bc40a40>, ''Abebe 2017'': <function substrate_concentration_MichaelisMenten_Abebe2017
      at 0x7...'
  - constant-name: colour.biochemistry.michaelis_menten.REACTION_RATE_MICHAELISMENTEN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Michaelis 1913'': <function reaction_rate_MichaelisMenten_Michaelis1913
      at 0x7b934bc40860>, ''Abebe 2017'': <function reaction_rate_MichaelisMenten_Abebe2017
      at 0x7b934bc40900>})'
  - constant-name: colour.biochemistry.michaelis_menten.SUBSTRATE_CONCENTRATION_MICHAELISMENTEN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Michaelis 1913'': <function substrate_concentration_MichaelisMenten_Michaelis1913
      at 0x7b934bc40a40>, ''Abebe 2017'': <function substrate_concentration_MichaelisMenten_Abebe2017
      at 0x7...'
  - constant-name: colour.blindness.CVD_MATRICES_MACHADO2010
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'Protanomaly': {0.0: array([[ 1.,  0., -0.],
             [ 0.,  1.,  0.],
             [-0., -0.,  1.]]), 0.1: array([[ 0.856167,  0.182038, -0.038205],
             [ 0.029342,  0.955115,  0.015544]...
  - constant-name: colour.blindness.datasets.CVD_MATRICES_MACHADO2010
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'Protanomaly': {0.0: array([[ 1.,  0., -0.],
             [ 0.,  1.,  0.],
             [-0., -0.,  1.]]), 0.1: array([[ 0.856167,  0.182038, -0.038205],
             [ 0.029342,  0.955115,  0.015544]...
  - constant-name: colour.blindness.datasets.machado2010.CVD_MATRICES_MACHADO2010
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'Protanomaly': {0.0: array([[ 1.,  0., -0.],
             [ 0.,  1.,  0.],
             [-0., -0.,  1.]]), 0.1: array([[ 0.856167,  0.182038, -0.038205],
             [ 0.029342,  0.955115,  0.015544]...
  - constant-name: colour.blindness.machado2009.MATRIX_LMS_TO_WSYBRG
    type-name: ndarray
    value: |-
      array([[ 0.6  ,  0.4  ,  0.   ],
             [ 0.24 ,  0.105, -0.7  ],
             [ 1.2  , -1.6  ,  0.4  ]])
  - constant-name: colour.characterisation.MSDS_ACES_RICD
    type-name: RGB_CameraSensitivities
    value: |-
      RGB_CameraSensitivities([[  3.60000000e+02,   1.20000000e-06,   0.00000000e+00,
                                  5.70000000e-06],
                               [  3.61000000e+02,   1.40000000e-06,   0.00000000e...
  - constant-name: colour.characterisation.MSDS_CAMERA_SENSITIVITIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Nikon 5100 (NPL)': RGB_CameraSensitivities([[  3.80000000e+02,   1.56384299e-03,   1.15000000e-04,
                                  1.80956039e-03],
                               [  3.850...
  - constant-name: colour.characterisation.CCS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ColorChecker 1976'': ColourChecker(name=''ColorChecker
      1976'', data={''dark skin'': array([ 0.4002,  0.3504,  0.1005]), ''light skin'':
      array([ 0.3773,  0.3446,  0.3582]), ''blue sky'': arra...'
  - constant-name: colour.characterisation.SDS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'BabelColor Average': LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   5.50000000e-02],
                            [  3.90000000e+02,   5.80000000e-02],
           ...
  - constant-name: colour.characterisation.MSDS_DISPLAY_PRIMARIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Typical CRT Brainard 1997': RGB_DisplayPrimaries([[  3.80000000e+02,   2.50000000e-03,   1.80000000e-03,
                               2.19000000e-02],
                            [  3.850...
  - constant-name: colour.characterisation.SDS_FILTERS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Diffuser': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   0.00000000e+00],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.SDS_LENSES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO Standard Lens': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   7.00000000e-02],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.POLYNOMIAL_EXPANSION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function matrix_augmented_Cheung2004
      at 0x7b9349259300>, ''Finlayson 2015'': <function polynomial_expansion_Finlayson2015
      at 0x7b9349259620>, ''Vandermonde'': <function p...'
  - constant-name: colour.characterisation.MATRIX_COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function matrix_colour_correction_Cheung2004
      at 0x7b9349259800>, ''Finlayson 2015'': <function matrix_colour_correction_Finlayson2015
      at 0x7b93492598a0>, ''Vandermonde'':...'
  - constant-name: colour.characterisation.APPLY_MATRIX_COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function apply_matrix_colour_correction_Cheung2004
      at 0x7b9349259a80>, ''Finlayson 2015'': <function apply_matrix_colour_correction_Finlayson2015
      at 0x7b9349259b20>, ''V...'
  - constant-name: colour.characterisation.COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function colour_correction_Cheung2004
      at 0x7b9349259d00>, ''Finlayson 2015'': <function colour_correction_Finlayson2015
      at 0x7b9349259da0>, ''Vandermonde'': <function col...'
  - constant-name: colour.characterisation.aces_it.FLARE_PERCENTAGE
    type-name: float
    value: '0.005'
  - constant-name: colour.characterisation.aces_it.S_FLARE_FACTOR
    type-name: float
    value: '0.9729729729729729'
  - constant-name: colour.characterisation.aces_it.SPECTRAL_SHAPE_RAWTOACES
    type-name: SpectralShape
    value: SpectralShape(380, 780, 5)
  - constant-name: colour.characterisation.aces_it.ROOT_RESOURCES_RAWTOACES
    type-name: str
    value: '''/home/amadeus/.pyenv/versions/3.13.5/lib/python3.13/site-packages/colour/characterisation/datasets/rawtoaces'''
  - constant-name: colour.characterisation.correction.POLYNOMIAL_EXPANSION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function matrix_augmented_Cheung2004
      at 0x7b9349259300>, ''Finlayson 2015'': <function polynomial_expansion_Finlayson2015
      at 0x7b9349259620>, ''Vandermonde'': <function p...'
  - constant-name: colour.characterisation.correction.MATRIX_COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function matrix_colour_correction_Cheung2004
      at 0x7b9349259800>, ''Finlayson 2015'': <function matrix_colour_correction_Finlayson2015
      at 0x7b93492598a0>, ''Vandermonde'':...'
  - constant-name: colour.characterisation.correction.APPLY_MATRIX_COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function apply_matrix_colour_correction_Cheung2004
      at 0x7b9349259a80>, ''Finlayson 2015'': <function apply_matrix_colour_correction_Finlayson2015
      at 0x7b9349259b20>, ''V...'
  - constant-name: colour.characterisation.correction.COLOUR_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cheung 2004'': <function colour_correction_Cheung2004
      at 0x7b9349259d00>, ''Finlayson 2015'': <function colour_correction_Finlayson2015
      at 0x7b9349259da0>, ''Vandermonde'': <function col...'
  - constant-name: colour.characterisation.datasets.MSDS_ACES_RICD
    type-name: RGB_CameraSensitivities
    value: |-
      RGB_CameraSensitivities([[  3.60000000e+02,   1.20000000e-06,   0.00000000e+00,
                                  5.70000000e-06],
                               [  3.61000000e+02,   1.40000000e-06,   0.00000000e...
  - constant-name: colour.characterisation.datasets.MSDS_CAMERA_SENSITIVITIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Nikon 5100 (NPL)': RGB_CameraSensitivities([[  3.80000000e+02,   1.56384299e-03,   1.15000000e-04,
                                  1.80956039e-03],
                               [  3.850...
  - constant-name: colour.characterisation.datasets.CCS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ColorChecker 1976'': ColourChecker(name=''ColorChecker
      1976'', data={''dark skin'': array([ 0.4002,  0.3504,  0.1005]), ''light skin'':
      array([ 0.3773,  0.3446,  0.3582]), ''blue sky'': arra...'
  - constant-name: colour.characterisation.datasets.SDS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'BabelColor Average': LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   5.50000000e-02],
                            [  3.90000000e+02,   5.80000000e-02],
           ...
  - constant-name: colour.characterisation.datasets.MSDS_DISPLAY_PRIMARIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Typical CRT Brainard 1997': RGB_DisplayPrimaries([[  3.80000000e+02,   2.50000000e-03,   1.80000000e-03,
                               2.19000000e-02],
                            [  3.850...
  - constant-name: colour.characterisation.datasets.SDS_FILTERS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Diffuser': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   0.00000000e+00],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.SDS_LENSES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO Standard Lens': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   7.00000000e-02],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.aces_it.DATA_ACES_RICD
    type-name: dict
    value: '{360.0: (1.2e-06, 0.0, 5.7e-06), 361.0: (1.4e-06, 0.0, 6.4e-06), 362.0:
      (1.5e-06, 0.0, 7.2e-06), 363.0: (1.7e-06, 0.0, 8e-06), 364.0: (1.9e-06, 0.0,
      9e-06), 365.0: (2.2e-06, 0.0, 1.02e-05), 366.0: (2....'
  - constant-name: colour.characterisation.datasets.aces_it.MSDS_ACES_RICD
    type-name: RGB_CameraSensitivities
    value: |-
      RGB_CameraSensitivities([[  3.60000000e+02,   1.20000000e-06,   0.00000000e+00,
                                  5.70000000e-06],
                               [  3.61000000e+02,   1.40000000e-06,   0.00000000e...
  - constant-name: colour.characterisation.datasets.cameras.MSDS_CAMERA_SENSITIVITIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Nikon 5100 (NPL)': RGB_CameraSensitivities([[  3.80000000e+02,   1.56384299e-03,   1.15000000e-04,
                                  1.80956039e-03],
                               [  3.850...
  - constant-name: colour.characterisation.datasets.cameras.dslr.MSDS_CAMERA_SENSITIVITIES_DSLR
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Nikon 5100 (NPL)': RGB_CameraSensitivities([[  3.80000000e+02,   1.56384299e-03,   1.15000000e-04,
                                  1.80956039e-03],
                               [  3.850...
  - constant-name: colour.characterisation.datasets.cameras.dslr.sensitivities.DATA_CAMERA_SENSITIVITIES_DSLR
    type-name: dict
    value: '{''Nikon 5100 (NPL)'': {380.0: (0.00156384299336578, 0.000115, 0.00180956039402336),
      385.0: (0.00189691771384825, 0.00152114360178015, 0.000489828145441504), 390.0:
      (0.0, 0.000574304991835587, 0.0008794...'
  - constant-name: colour.characterisation.datasets.cameras.dslr.sensitivities.MSDS_CAMERA_SENSITIVITIES_DSLR
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Nikon 5100 (NPL)': RGB_CameraSensitivities([[  3.80000000e+02,   1.56384299e-03,   1.15000000e-04,
                                  1.80956039e-03],
                               [  3.850...
  - constant-name: colour.characterisation.datasets.colour_checkers.CCS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ColorChecker 1976'': ColourChecker(name=''ColorChecker
      1976'', data={''dark skin'': array([ 0.4002,  0.3504,  0.1005]), ''light skin'':
      array([ 0.3773,  0.3446,  0.3582]), ''blue sky'': arra...'
  - constant-name: colour.characterisation.datasets.colour_checkers.SDS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'BabelColor Average': LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   5.50000000e-02],
                            [  3.90000000e+02,   5.80000000e-02],
           ...
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.SAMPLE_LABELS_COLORCHECKER_CLASSIC
    type-name: tuple
    value: ('dark skin', 'light skin', 'blue sky', 'foliage', 'blue flower', 'bluish
      green', 'orange', 'purplish blue', 'moderate red', 'purple', 'yellow green',
      'orange yellow', 'blue', 'green', 'red', 'yellow'...
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER1976
    type-name: dict
    value: '{''dark skin'': array([ 0.4002,  0.3504,  0.1005]), ''light skin'': array([
      0.3773,  0.3446,  0.3582]), ''blue sky'': array([ 0.247 ,  0.2514,  0.1933]),
      ''foliage'': array([ 0.3372,  0.422 ,  0.1329]), ''blue...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKER1976
    type-name: ndarray
    value: array([ 0.31006,  0.31616])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKER1976
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorChecker 1976'', data={''dark skin'': array([
      0.4002,  0.3504,  0.1005]), ''light skin'': array([ 0.3773,  0.3446,  0.3582]),
      ''blue sky'': array([ 0.247 ,  0.2514,  0.1933]), ''foliag...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER2005
    type-name: dict
    value: '{''dark skin'': array([ 0.4316,  0.3777,  0.1008]), ''light skin'': array([
      0.4197,  0.3744,  0.3495]), ''blue sky'': array([ 0.276 ,  0.3016,  0.1836]),
      ''foliage'': array([ 0.3703,  0.4499,  0.1325]), ''blue...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKER2005
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKER2005
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorChecker 2005'', data={''dark skin'': array([
      0.4316,  0.3777,  0.1008]), ''light skin'': array([ 0.4197,  0.3744,  0.3495]),
      ''blue sky'': array([ 0.276 ,  0.3016,  0.1836]), ''foliag...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_BABELCOLOR_AVERAGE
    type-name: dict
    value: '{''dark skin'': array([ 0.4325,  0.3788,  0.1034]), ''light skin'': array([
      0.4191,  0.3748,  0.3525]), ''blue sky'': array([ 0.2761,  0.3004,  0.1847]),
      ''foliage'': array([ 0.37  ,  0.4501,  0.1335]), ''blue...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_BABELCOLOR_AVERAGE
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_BABELCOLOR_AVERAGE
    type-name: ColourChecker
    value: 'ColourChecker(name=''BabelColor Average'', data={''dark skin'': array([
      0.4325,  0.3788,  0.1034]), ''light skin'': array([ 0.4191,  0.3748,  0.3525]),
      ''blue sky'': array([ 0.2761,  0.3004,  0.1847]), ''folia...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER24_BEFORE_NOV2014_CIE_LAB
    type-name: dict
    value: '{''dark skin'': array([ 37.986,  13.555,  14.059]), ''light skin'': array([
      65.711,  18.13 ,  17.81 ]), ''blue sky'': array([ 49.927,  -4.88 , -21.905]),
      ''foliage'': array([ 43.139, -13.095,  21.905]), ''blue...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER24_BEFORE_NOV2014
    type-name: dict
    value: '{''dark skin'': array([ 0.43162717,  0.37772445,  0.10080208]), ''light
      skin'': array([ 0.41968062,  0.37441533,  0.34951644]), ''blue sky'': array([
      0.27613203,  0.30166042,  0.18357603]), ''foliage'': array...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKER24_BEFORE_NOV2014
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKER24_BEFORE_NOV2014
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorChecker24 - Before November 2014'', data={''dark
      skin'': array([ 0.43162717,  0.37772445,  0.10080208]), ''light skin'': array([
      0.41968062,  0.37441533,  0.34951644]), ''blue sky'':...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER24_AFTER_NOV2014_CIE_LAB
    type-name: dict
    value: '{''dark skin'': array([ 37.54,  14.37,  14.92]), ''light skin'': array([
      64.66,  19.27,  17.5 ]), ''blue sky'': array([ 49.32,  -3.82, -22.54]), ''foliage'':
      array([ 43.46, -12.74,  22.72]), ''blue flower'': ar...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKER24_AFTER_NOV2014
    type-name: dict
    value: '{''dark skin'': array([ 0.4374836 ,  0.37852284,  0.09832436]), ''light
      skin'': array([ 0.42224944,  0.37249369,  0.3362023 ]), ''blue sky'': array([
      0.27614744,  0.29838157,  0.17855193]), ''foliage'': array...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKER24_AFTER_NOV2014
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKER24_AFTER_NOV2014
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorChecker24 - After November 2014'', data={''dark
      skin'': array([ 0.4374836 ,  0.37852284,  0.09832436]), ''light skin'': array([
      0.42224944,  0.37249369,  0.3362023 ]), ''blue sky'': ...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.SAMPLE_LABELS_COLORCHECKER_SG
    type-name: tuple
    value: ('A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'B1', 'B2',
      'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'C1', 'C2', 'C3', 'C4', 'C5',
      'C6', 'C7', 'C8', 'C9', 'C10', 'D1', 'D2', 'D3'...
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKERSG_BEFORE_NOV2014_CIE_LAB
    type-name: dict
    value: '{''A1'': array([ 96.55,  -0.91,   0.57]), ''A2'': array([ 6.43, -0.06,
      -0.41]), ''A3'': array([  4.97000000e+01,  -1.80000000e-01,   3.00000000e-02]),
      ''A4'': array([ 96.5 ,  -0.89,   0.59]), ''A5'': array([ 6....'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKERSG_BEFORE_NOV2014
    type-name: dict
    value: '{''A1'': array([ 0.34532908,  0.36017391,  0.9134032 ]), ''B1'': array([
      0.34530187,  0.35884423,  0.18185226]), ''C1'': array([ 0.3394562 ,  0.35243733,  0.00719587]),
      ''D1'': array([ 0.34536065,  0.36020666...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKERSG_BEFORE_NOV2014
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKERSG_BEFORE_NOV2014
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorCheckerSG - Before November 2014'', data={''A1'':
      array([ 0.34532908,  0.36017391,  0.9134032 ]), ''B1'': array([ 0.34530187,  0.35884423,  0.18185226]),
      ''C1'': array([ 0.3394562 , ...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKERSG_AFTER_NOV2014_CIE_LAB
    type-name: dict
    value: '{''A1'': array([ 96.71,  -0.62,   2.06]), ''A2'': array([ 8.05,  0.17,
      -0.69]), ''A3'': array([ 49.76,   0.11,   0.72]), ''A4'': array([ 96.72,  -0.63,   2.06]),
      ''A5'': array([ 8.17,  0.15, -0.65]), ''A6'': arra...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_COLORCHECKERSG_AFTER_NOV2014
    type-name: dict
    value: '{''A1'': array([ 0.34808052,  0.36239016,  0.9173042 ]), ''B1'': array([
      0.34783122,  0.36028772,  0.18168628]), ''C1'': array([ 0.34106024,  0.35219754,  0.00900115]),
      ''D1'': array([ 0.34791277,  0.36230405...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_COLORCHECKERSG_AFTER_NOV2014
    type-name: ndarray
    value: array([ 0.34570291,  0.3585386 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLORCHECKERSG_AFTER_NOV2014
    type-name: ColourChecker
    value: 'ColourChecker(name=''ColorCheckerSG - After November 2014'', data={''A1'':
      array([ 0.34808052,  0.36239016,  0.9173042 ]), ''B1'': array([ 0.34783122,  0.36028772,  0.18168628]),
      ''C1'': array([ 0.34106024,  ...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_TE226_V2_CIE_XYZ
    type-name: dict
    value: '{''dark skin'': array([ 0.1278,  0.1074,  0.0726]), ''light skin'': array([
      0.4945,  0.4484,  0.3586]), ''blue sky'': array([ 0.1459,  0.169 ,  0.2925]),
      ''foliage'': array([ 0.0714,  0.1243,  0.0254]), ''blue...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.DATA_TE226_V2
    type-name: dict
    value: '{''dark skin'': array([ 0.41520468,  0.34892788,  0.1074    ]), ''light
      skin'': array([ 0.37994622,  0.34452555,  0.4484    ]), ''blue sky'': array([
      0.24020415,  0.2782351 ,  0.169     ]), ''foliage'': array...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_ILLUMINANT_TE226_V2
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_TE226_V2
    type-name: ColourChecker
    value: 'ColourChecker(name=''TE226 V2'', data={''dark skin'': array([ 0.41520468,  0.34892788,  0.1074    ]),
      ''light skin'': array([ 0.37994622,  0.34452555,  0.4484    ]), ''blue sky'':
      array([ 0.24020415,  0.27823...'
  - constant-name: colour.characterisation.datasets.colour_checkers.chromaticity_coordinates.CCS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ColorChecker 1976'': ColourChecker(name=''ColorChecker
      1976'', data={''dark skin'': array([ 0.4002,  0.3504,  0.1005]), ''light skin'':
      array([ 0.3773,  0.3446,  0.3582]), ''blue sky'': arra...'
  - constant-name: colour.characterisation.datasets.colour_checkers.sds.DATA_BABELCOLOR_AVERAGE
    type-name: dict
    value: '{''dark skin'': {380: 0.055, 390: 0.058, 400: 0.061, 410: 0.062, 420:
      0.062, 430: 0.062, 440: 0.062, 450: 0.062, 460: 0.062, 470: 0.062, 480: 0.062,
      490: 0.063, 500: 0.065, 510: 0.07, 520: 0.076, 530: 0...'
  - constant-name: colour.characterisation.datasets.colour_checkers.sds.SDS_BABELCOLOR_AVERAGE
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   5.50000000e-02],
                            [  3.90000000e+02,   5.80000000e-02],
                            [  4.00000000e+02,   6....
  - constant-name: colour.characterisation.datasets.colour_checkers.sds.DATA_COLORCHECKER_N_OHTA
    type-name: dict
    value: '{''dark skin'': {380: 0.048, 385: 0.051, 390: 0.055, 395: 0.06, 400: 0.065,
      405: 0.068, 410: 0.068, 415: 0.067, 420: 0.064, 425: 0.062, 430: 0.059, 435:
      0.057, 440: 0.055, 445: 0.054, 450: 0.053, 455: 0...'
  - constant-name: colour.characterisation.datasets.colour_checkers.sds.SDS_COLORCHECKER_N_OHTA
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   4.80000000e-02],
                            [  3.85000000e+02,   5.10000000e-02],
                            [  3.90000000e+02,   5....
  - constant-name: colour.characterisation.datasets.colour_checkers.sds.SDS_COLOURCHECKERS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'BabelColor Average': LazyCanonicalMapping({'dark skin': SpectralDistribution([[  3.80000000e+02,   5.50000000e-02],
                            [  3.90000000e+02,   5.80000000e-02],
           ...
  - constant-name: colour.characterisation.datasets.displays.MSDS_DISPLAY_PRIMARIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Typical CRT Brainard 1997': RGB_DisplayPrimaries([[  3.80000000e+02,   2.50000000e-03,   1.80000000e-03,
                               2.19000000e-02],
                            [  3.850...
  - constant-name: colour.characterisation.datasets.displays.crt.MSDS_DISPLAY_PRIMARIES_CRT
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Typical CRT Brainard 1997': RGB_DisplayPrimaries([[  3.80000000e+02,   2.50000000e-03,   1.80000000e-03,
                               2.19000000e-02],
                            [  3.850...
  - constant-name: colour.characterisation.datasets.displays.crt.primaries.DATA_DISPLAY_PRIMARIES_CRT
    type-name: dict
    value: '{''Typical CRT Brainard 1997'': {380.0: (0.0025, 0.0018, 0.0219), 385.0:
      (0.0017, 0.0016, 0.0336), 390.0: (0.0017, 0.002, 0.0524), 395.0: (0.0011, 0.0021,
      0.0785), 400.0: (0.0017, 0.0025, 0.113), 405.0:...'
  - constant-name: colour.characterisation.datasets.displays.crt.primaries.MSDS_DISPLAY_PRIMARIES_CRT
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Typical CRT Brainard 1997': RGB_DisplayPrimaries([[  3.80000000e+02,   2.50000000e-03,   1.80000000e-03,
                               2.19000000e-02],
                            [  3.850...
  - constant-name: colour.characterisation.datasets.displays.lcd.MSDS_DISPLAY_PRIMARIES_LCD
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Apple Studio Display': RGB_DisplayPrimaries([[  3.80000000e+02,   0.00000000e+00,   0.00000000e+00,
                               0.00000000e+00],
                            [  3.85000000...
  - constant-name: colour.characterisation.datasets.displays.lcd.primaries.DATA_DISPLAY_PRIMARIES_LCD
    type-name: dict
    value: '{''Apple Studio Display'': {380: (0.0, 0.0, 0.0), 385: (0.0, 0.0, 0.0),
      390: (0.0, 0.0, 0.0), 395: (0.0, 0.0, 0.0), 400: (0.0, 0.0, 0.004), 405: (0.0,
      0.0, 0.004), 410: (0.0, 0.0, 0.0079), 415: (0.0, 0....'
  - constant-name: colour.characterisation.datasets.displays.lcd.primaries.MSDS_DISPLAY_PRIMARIES_LCD
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Apple Studio Display': RGB_DisplayPrimaries([[  3.80000000e+02,   0.00000000e+00,   0.00000000e+00,
                               0.00000000e+00],
                            [  3.85000000...
  - constant-name: colour.characterisation.datasets.filters.SDS_FILTERS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Diffuser': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   0.00000000e+00],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.filters.sds.DATA_FILTERS_ISO
    type-name: dict
    value: '{''ISO 7589 Diffuser'': {350: 0.0, 360: 0.0, 370: 0.0, 380: 0.1, 390:
      0.43, 400: 0.69, 410: 0.78, 420: 0.83, 430: 0.86, 440: 0.88, 450: 0.9, 460:
      0.91, 470: 0.93, 480: 0.94, 490: 0.95, 500: 0.96, 510: 0...'
  - constant-name: colour.characterisation.datasets.filters.sds.SDS_FILTERS_ISO
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Diffuser': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   0.00000000e+00],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.filters.sds.SDS_FILTERS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Diffuser': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   0.00000000e+00],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.lenses.SDS_LENSES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO Standard Lens': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   7.00000000e-02],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.lenses.sds.DATA_LENSES_ISO
    type-name: dict
    value: '{''ISO Standard Lens'': {350: 0.0, 360: 0.07, 370: 0.23, 380: 0.42, 390:
      0.6, 400: 0.74, 410: 0.83, 420: 0.88, 430: 0.91, 440: 0.94, 450: 0.95, 460:
      0.97, 470: 0.98, 480: 0.98, 490: 0.99, 500: 0.99, 510...'
  - constant-name: colour.characterisation.datasets.lenses.sds.SDS_LENSES_ISO
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO Standard Lens': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   7.00000000e-02],
                            [  3.70000000e+...
  - constant-name: colour.characterisation.datasets.lenses.sds.SDS_LENSES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO Standard Lens': SpectralDistribution([[  3.50000000e+02,   0.00000000e+00],
                            [  3.60000000e+02,   7.00000000e-02],
                            [  3.70000000e+...
  - constant-name: colour.colorimetry.SPECTRAL_SHAPE_DEFAULT
    type-name: SpectralShape
    value: SpectralShape(360, 780, 1)
  - constant-name: colour.colorimetry.CCS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 0.44758,  0.40745]), ''B'': array([ 0.34842,  0.35161]), ''C'': array([
      0.31006,  0.31616]), ''D50'': array([ 0.3457, ...'
  - constant-name: colour.colorimetry.MSDS_CMFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.MSDS_CMFS_LMS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.MSDS_CMFS_RGB
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Wright & Guild 1931 2 Degree RGB CMFs': RGB_ColourMatchingFunctions([[  3.80000000e+02,   3.00000000e-05,  -1.00000000e-05,
                                      1.17000000e-03],
          ...
  - constant-name: colour.colorimetry.MSDS_CMFS_STANDARD_OBSERVER
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1931 2 Degree Standard Observer': XYZ_ColourMatchingFunctions([[  3.60000000e+02,   1.29900000e-04,   3.91700000e-06,
                                      6.06100000e-04],
            ...
  - constant-name: colour.colorimetry.SDS_BASIS_FUNCTIONS_CIE_ILLUMINANT_D_SERIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'S0': SpectralDistribution([[  3.00000000e+02,   4.00000000e-02],
                            [  3.05000000e+02,   3.02000000e+00],
                            [  3.10000000e+02,   6.0000000...
  - constant-name: colour.colorimetry.SDS_ILLUMINANTS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'A': SpectralDistribution([[ 300.      ,    0.930483],
                            [ 305.      ,    1.12821 ],
                            [ 310.      ,    1.35769 ],
                            [...
  - constant-name: colour.colorimetry.SDS_LEFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.SDS_LEFS_PHOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.SDS_LEFS_SCOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1951 Scotopic Standard Observer': SpectralDistribution([[  3.80000000e+02,   5.89000000e-04],
                            [  3.81000000e+02,   6.65000000e-04],
                         ...
  - constant-name: colour.colorimetry.TVS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 109.85,  100.  ,   35.58]), ''C'': array([  98.07,  100.  ,  118.22]),
      ''D50'': array([  96.42,  100.  ,   82.51]), ...'
  - constant-name: colour.colorimetry.TVS_ILLUMINANTS_HUNTERLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      Illuminant_Specification_HunterLab(name=''A'', XYZ_n=array([ 109.83,  100.  ,   35.55]),
      K_ab=array([ 185.2,   38.4])), ''C...'
  - constant-name: colour.colorimetry.CCS_LIGHT_SOURCES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''Natural'':
      array([ 0.38158573,  0.35922414]), ''Philips TL-84'': array([ 0.3784136 ,  0.37929025]),
      ''SA'': array([ 0.44757303,  ...'
  - constant-name: colour.colorimetry.SDS_LIGHT_SOURCES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Natural': SpectralDistribution([[ 380.  ,    1.88],
                            [ 385.  ,    2.24],
                            [ 390.  ,    2.65],
                            [ 395.  ,    2.95],...
  - constant-name: colour.colorimetry.SD_GAUSSIAN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Normal'': <function sd_gaussian_normal at 0x7b934bd3e700>,
      ''FWHM'': <function sd_gaussian_fwhm at 0x7b934bd3e7a0>})'
  - constant-name: colour.colorimetry.SD_SINGLE_LED_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Ohno 2005'': <function sd_single_led_Ohno2005 at 0x7b934bd3e8e0>})'
  - constant-name: colour.colorimetry.SD_MULTI_LEDS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Ohno 2005'': <function sd_multi_leds_Ohno2005 at 0x7b934bd3ea20>})'
  - constant-name: colour.colorimetry.SD_TO_XYZ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM E308'': <function sd_to_XYZ_ASTME308 at 0x7b934bd3f380>,
      ''Integration'': <function sd_to_XYZ_integration at 0x7b934bd3f240>, ''astm2015'':
      <function sd_to_XYZ_ASTME308 at 0x7b934bd...'
  - constant-name: colour.colorimetry.MSDS_TO_XYZ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM E308'': <function msds_to_XYZ_ASTME308 at 0x7b934bd3f560>,
      ''Integration'': <function msds_to_XYZ_integration at 0x7b934bd3f4c0>, ''astm2015'':
      <function msds_to_XYZ_ASTME308 at 0x7...'
  - constant-name: colour.colorimetry.SPECTRAL_SHAPE_ASTME308
    type-name: SpectralShape
    value: SpectralShape(360, 780, 1)
  - constant-name: colour.colorimetry.BANDPASS_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Stearns 1988'': <function bandpass_correction_Stearns1988
      at 0x7b934bd3f9c0>})'
  - constant-name: colour.colorimetry.LIGHTNESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Glasser 1958'': <function lightness_Glasser1958 at
      0x7b934bc40360>, ''Wyszecki 1963'': <function lightness_Wyszecki1963 at 0x7b934bc404a0>,
      ''CIE 1976'': <function lightness_CIE1976 at 0...'
  - constant-name: colour.colorimetry.LUMINANCE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Newhall 1943'': <function luminance_Newhall1943 at
      0x7b934bc411c0>, ''ASTM D1535'': <function luminance_ASTMD1535 at 0x7b934bc41260>,
      ''CIE 1976'': <function luminance_CIE1976 at 0x7b934...'
  - constant-name: colour.colorimetry.WHITENESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Berger 1959'': <function whiteness_Berger1959 at 0x7b934bb57060>,
      ''Taube 1960'': <function whiteness_Taube1960 at 0x7b934bb57100>, ''Stensby
      1968'': <function whiteness_Stensby1968 at 0...'
  - constant-name: colour.colorimetry.YELLOWNESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM D1925'': <function yellowness_ASTMD1925 at 0x7b934bb57600>,
      ''ASTM E313 Alternative'': <function yellowness_ASTME313_alternative at 0x7b934bb576a0>,
      ''ASTM E313'': <function yellown...'
  - constant-name: colour.colorimetry.YELLOWNESS_COEFFICIENTS_ASTME313
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''C'':
      array([ 1.2769,  1.0592]), ''D65'': array([ 1.2985,  1.1335])}), ''CIE 1964
      10 Degree Standard Observer'': CanonicalMapping(...'
  - constant-name: colour.colorimetry.blackbody.CONSTANT_C1
    type-name: float
    value: '3.741771e-16'
  - constant-name: colour.colorimetry.blackbody.CONSTANT_C2
    type-name: float
    value: '0.014388'
  - constant-name: colour.colorimetry.blackbody.CONSTANT_N
    type-name: int
    value: '1'
  - constant-name: colour.colorimetry.correction.BANDPASS_CORRECTION_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Stearns 1988'': <function bandpass_correction_Stearns1988
      at 0x7b934bd3f9c0>})'
  - constant-name: colour.colorimetry.datasets.MSDS_CMFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.datasets.MSDS_CMFS_LMS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.datasets.MSDS_CMFS_RGB
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Wright & Guild 1931 2 Degree RGB CMFs': RGB_ColourMatchingFunctions([[  3.80000000e+02,   3.00000000e-05,  -1.00000000e-05,
                                      1.17000000e-03],
          ...
  - constant-name: colour.colorimetry.datasets.MSDS_CMFS_STANDARD_OBSERVER
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1931 2 Degree Standard Observer': XYZ_ColourMatchingFunctions([[  3.60000000e+02,   1.29900000e-04,   3.91700000e-06,
                                      6.06100000e-04],
            ...
  - constant-name: colour.colorimetry.datasets.CCS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 0.44758,  0.40745]), ''B'': array([ 0.34842,  0.35161]), ''C'': array([
      0.31006,  0.31616]), ''D50'': array([ 0.3457, ...'
  - constant-name: colour.colorimetry.datasets.SDS_BASIS_FUNCTIONS_CIE_ILLUMINANT_D_SERIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'S0': SpectralDistribution([[  3.00000000e+02,   4.00000000e-02],
                            [  3.05000000e+02,   3.02000000e+00],
                            [  3.10000000e+02,   6.0000000...
  - constant-name: colour.colorimetry.datasets.TVS_ILLUMINANTS_HUNTERLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      Illuminant_Specification_HunterLab(name=''A'', XYZ_n=array([ 109.83,  100.  ,   35.55]),
      K_ab=array([ 185.2,   38.4])), ''C...'
  - constant-name: colour.colorimetry.datasets.SDS_ILLUMINANTS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'A': SpectralDistribution([[ 300.      ,    0.930483],
                            [ 305.      ,    1.12821 ],
                            [ 310.      ,    1.35769 ],
                            [...
  - constant-name: colour.colorimetry.datasets.TVS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 109.85,  100.  ,   35.58]), ''C'': array([  98.07,  100.  ,  118.22]),
      ''D50'': array([  96.42,  100.  ,   82.51]), ...'
  - constant-name: colour.colorimetry.datasets.CCS_LIGHT_SOURCES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''Natural'':
      array([ 0.38158573,  0.35922414]), ''Philips TL-84'': array([ 0.3784136 ,  0.37929025]),
      ''SA'': array([ 0.44757303,  ...'
  - constant-name: colour.colorimetry.datasets.SDS_LIGHT_SOURCES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Natural': SpectralDistribution([[ 380.  ,    1.88],
                            [ 385.  ,    2.24],
                            [ 390.  ,    2.65],
                            [ 395.  ,    2.95],...
  - constant-name: colour.colorimetry.datasets.SDS_LEFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.datasets.SDS_LEFS_PHOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.datasets.SDS_LEFS_SCOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1951 Scotopic Standard Observer': SpectralDistribution([[  3.80000000e+02,   5.89000000e-04],
                            [  3.81000000e+02,   6.65000000e-04],
                         ...
  - constant-name: colour.colorimetry.datasets.cmfs.DATA_CMFS_LMS
    type-name: dict
    value: '{''Stockman & Sharpe 2 Degree Cone Fundamentals'': {390: (0.000415003,
      0.000368349, 0.00954729), 391: (0.00050265, 0.000448015, 0.0114794), 392: (0.000607367,
      0.000543965, 0.0137986), 393: (0.00073185, ...'
  - constant-name: colour.colorimetry.datasets.cmfs.MSDS_CMFS_LMS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.datasets.cmfs.DATA_CMFS_RGB
    type-name: dict
    value: '{''Wright & Guild 1931 2 Degree RGB CMFs'': {380: (3e-05, -1e-05, 0.00117),
      385: (5e-05, -2e-05, 0.00189), 390: (0.0001, -4e-05, 0.00359), 395: (0.00017,
      -7e-05, 0.00647), 400: (0.0003, -0.00014, 0.0121...'
  - constant-name: colour.colorimetry.datasets.cmfs.MSDS_CMFS_RGB
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Wright & Guild 1931 2 Degree RGB CMFs': RGB_ColourMatchingFunctions([[  3.80000000e+02,   3.00000000e-05,  -1.00000000e-05,
                                      1.17000000e-03],
          ...
  - constant-name: colour.colorimetry.datasets.cmfs.DATA_CMFS_STANDARD_OBSERVER
    type-name: dict
    value: '{''CIE 1931 2 Degree Standard Observer'': {360: (0.0001299, 3.917e-06,
      0.0006061), 361: (0.000145847, 4.393581e-06, 0.0006808792), 362: (0.0001638021,
      4.929604e-06, 0.0007651456), 363: (0.0001840037, 5....'
  - constant-name: colour.colorimetry.datasets.cmfs.MSDS_CMFS_STANDARD_OBSERVER
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1931 2 Degree Standard Observer': XYZ_ColourMatchingFunctions([[  3.60000000e+02,   1.29900000e-04,   3.91700000e-06,
                                      6.06100000e-04],
            ...
  - constant-name: colour.colorimetry.datasets.cmfs.MSDS_CMFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Stockman & Sharpe 2 Degree Cone Fundamentals': LMS_ConeFundamentals([[  3.90000000e+02,   4.15003000e-04,   3.68349000e-04,
                               9.54729000e-03],
                 ...
  - constant-name: colour.colorimetry.datasets.illuminants.CCS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 0.44758,  0.40745]), ''B'': array([ 0.34842,  0.35161]), ''C'': array([
      0.31006,  0.31616]), ''D50'': array([ 0.3457, ...'
  - constant-name: colour.colorimetry.datasets.illuminants.SDS_BASIS_FUNCTIONS_CIE_ILLUMINANT_D_SERIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'S0': SpectralDistribution([[  3.00000000e+02,   4.00000000e-02],
                            [  3.05000000e+02,   3.02000000e+00],
                            [  3.10000000e+02,   6.0000000...
  - constant-name: colour.colorimetry.datasets.illuminants.TVS_ILLUMINANTS_HUNTERLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      Illuminant_Specification_HunterLab(name=''A'', XYZ_n=array([ 109.83,  100.  ,   35.55]),
      K_ab=array([ 185.2,   38.4])), ''C...'
  - constant-name: colour.colorimetry.datasets.illuminants.SDS_ILLUMINANTS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'A': SpectralDistribution([[ 300.      ,    0.930483],
                            [ 305.      ,    1.12821 ],
                            [ 310.      ,    1.35769 ],
                            [...
  - constant-name: colour.colorimetry.datasets.illuminants.TVS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 109.85,  100.  ,   35.58]), ''C'': array([  98.07,  100.  ,  118.22]),
      ''D50'': array([  96.42,  100.  ,   82.51]), ...'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_CIE_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': array([ 0.44758,  0.40745]), ''B'': array([ 0.34842,  0.35161]),
      ''C'': array([ 0.31006,  0.31616]), ''D50'': array([ 0.3457,  0.3585]), ''D55'':
      array([ 0.33243,  0.34744]), ''D60'': arr...'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_ACES_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACES'': array([ 0.32168,  0.33767])})'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_BLACKMAGIC_DESIGN_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Blackmagic Wide Gamut'': array([ 0.312717 ,  0.3290312])})'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_DCI_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCI-P3'': array([ 0.314,  0.351])})'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_ICC_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ICC D50'': array([ 0.34570291,  0.3585386 ])})'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_ISO_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ISO 7589 Photographic Daylight'': array([ 0.3320391
      ,  0.34726389]), ''ISO 7589 Sensitometric Daylight'': array([ 0.33381831,  0.35343623]),
      ''ISO 7589 Studio Tungsten'': array([ 0.43094...'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_PLASA_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''PLASA ANSI E1.54'': array([ 0.4254,  0.4044])})'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_CIE_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': array([ 0.45117,  0.40594]), ''B'': array([ 0.3498,  0.3527]),
      ''C'': array([ 0.31039,  0.31905]), ''D50'': array([ 0.34773,  0.35952]), ''D55'':
      array([ 0.33412,  0.34877]), ''D60'': arr...'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS_ISO_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ISO 7589 Photographic Daylight'': array([ 0.33371691,  0.34859249]),
      ''ISO 7589 Sensitometric Daylight'': array([ 0.33612591,  0.35499706]), ''ISO
      7589 Studio Tungsten'': array([ 0.43457...'
  - constant-name: colour.colorimetry.datasets.illuminants.chromaticity_coordinates.CCS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 0.44758,  0.40745]), ''B'': array([ 0.34842,  0.35161]), ''C'': array([
      0.31006,  0.31616]), ''D50'': array([ 0.3457, ...'
  - constant-name: colour.colorimetry.datasets.illuminants.hunterlab.DATA_ILLUMINANTS_HUNTERLAB_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: tuple
    value: (('A', array([ 109.83,  100.  ,   35.55]), array([ 185.2,   38.4])), ('C',
      array([  98.04,  100.  ,  118.11]), array([ 175.,   70.])), ('D50', array([  96.38,  100.  ,   82.45]),
      array([ 173.51,   58....
  - constant-name: colour.colorimetry.datasets.illuminants.hunterlab.TVS_ILLUMINANTS_HUNTERLAB_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': Illuminant_Specification_HunterLab(name=''A'',
      XYZ_n=array([ 109.83,  100.  ,   35.55]), K_ab=array([ 185.2,   38.4])), ''C'':
      Illuminant_Specification_HunterLab(name=''C'', XYZ_n=arr...'
  - constant-name: colour.colorimetry.datasets.illuminants.hunterlab.DATA_ILLUMINANTS_HUNTERLAB_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: tuple
    value: (('A', array([ 111.16,  100.  ,   35.19]), array([ 186.3,   38.2])), ('C',
      array([  97.3 ,  100.  ,  116.14]), array([ 174.3,   69.4])), ('D50', array([  96.72,  100.  ,   81.45]),
      array([ 173.82,   5...
  - constant-name: colour.colorimetry.datasets.illuminants.hunterlab.TVS_ILLUMINANTS_HUNTERLAB_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': Illuminant_Specification_HunterLab(name=''A'',
      XYZ_n=array([ 111.16,  100.  ,   35.19]), K_ab=array([ 186.3,   38.2])), ''C'':
      Illuminant_Specification_HunterLab(name=''C'', XYZ_n=arr...'
  - constant-name: colour.colorimetry.datasets.illuminants.hunterlab.TVS_ILLUMINANTS_HUNTERLAB
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      Illuminant_Specification_HunterLab(name=''A'', XYZ_n=array([ 109.83,  100.  ,   35.55]),
      K_ab=array([ 185.2,   38.4])), ''C...'
  - constant-name: colour.colorimetry.datasets.illuminants.sds.DATA_ILLUMINANTS_CIE
    type-name: dict
    value: '{''A'': {300: 0.930483, 305: 1.12821, 310: 1.35769, 315: 1.62219, 320:
      1.92508, 325: 2.2698, 330: 2.65981, 335: 3.09861, 340: 3.58968, 345: 4.13648,
      350: 4.74238, 355: 5.4107, 360: 6.14462, 365: 6.9472,...'
  - constant-name: colour.colorimetry.datasets.illuminants.sds.SDS_ILLUMINANTS_CIE
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'A': SpectralDistribution([[ 300.      ,    0.930483],
                            [ 305.      ,    1.12821 ],
                            [ 310.      ,    1.35769 ],
                            [...
  - constant-name: colour.colorimetry.datasets.illuminants.sds.DATA_ILLUMINANTS_ISO
    type-name: dict
    value: '{''ISO 7589 Photographic Daylight'': {350: 28, 360: 31, 370: 34, 380:
      33, 390: 38, 400: 61, 410: 69, 420: 72, 430: 68, 440: 86, 450: 98, 460: 100,
      470: 100, 480: 103, 490: 98, 500: 101, 510: 101, 520: 1...'
  - constant-name: colour.colorimetry.datasets.illuminants.sds.SDS_ILLUMINANTS_ISO
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ISO 7589 Photographic Daylight': SpectralDistribution([[ 350.,   28.],
                            [ 360.,   31.],
                            [ 370.,   34.],
                            [ 380., ...
  - constant-name: colour.colorimetry.datasets.illuminants.sds.SDS_ILLUMINANTS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'A': SpectralDistribution([[ 300.      ,    0.930483],
                            [ 305.      ,    1.12821 ],
                            [ 310.      ,    1.35769 ],
                            [...
  - constant-name: colour.colorimetry.datasets.illuminants.sds_d_illuminant_series.DATA_BASIS_FUNCTIONS_CIE_ILLUMINANT_D_SERIES
    type-name: dict
    value: '{''S0'': {300: 0.04, 305: 3.02, 310: 6.0, 315: 17.8, 320: 29.6, 325: 42.45,
      330: 55.3, 335: 56.3, 340: 57.3, 345: 59.55, 350: 61.8, 355: 61.65, 360: 61.5,
      365: 65.15, 370: 68.8, 375: 66.1, 380: 63.4, 38...'
  - constant-name: colour.colorimetry.datasets.illuminants.sds_d_illuminant_series.SDS_BASIS_FUNCTIONS_CIE_ILLUMINANT_D_SERIES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'S0': SpectralDistribution([[  3.00000000e+02,   4.00000000e-02],
                            [  3.05000000e+02,   3.02000000e+00],
                            [  3.10000000e+02,   6.0000000...
  - constant-name: colour.colorimetry.datasets.illuminants.tristimulus_values.TVS_ILLUMINANTS_CIE_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': array([ 109.85,  100.  ,   35.58]), ''C'': array([  98.07,  100.  ,  118.22]),
      ''D50'': array([  96.42,  100.  ,   82.51]), ''D55'': array([  95.68,  100.  ,   92.14]),
      ''D65'': array([...'
  - constant-name: colour.colorimetry.datasets.illuminants.tristimulus_values.TVS_ILLUMINANTS_CIE_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''A'': array([ 111.14,  100.  ,   35.2 ]), ''C'': array([  97.29,  100.  ,  116.14]),
      ''D50'': array([  96.72,  100.  ,   81.43]), ''D55'': array([  95.8 ,  100.  ,   90.93]),
      ''D65'': array([...'
  - constant-name: colour.colorimetry.datasets.illuminants.tristimulus_values.TVS_ILLUMINANTS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''A'':
      array([ 109.85,  100.  ,   35.58]), ''C'': array([  98.07,  100.  ,  118.22]),
      ''D50'': array([  96.42,  100.  ,   82.51]), ...'
  - constant-name: colour.colorimetry.datasets.lefs.DATA_LEFS_PHOTOPIC
    type-name: dict
    value: '{''CIE 1924 Photopic Standard Observer'': {360: 3.917e-06, 361: 4.393581e-06,
      362: 4.929604e-06, 363: 5.532136e-06, 364: 6.208245e-06, 365: 6.965e-06, 366:
      7.813219e-06, 367: 8.767336e-06, 368: 9.839844...'
  - constant-name: colour.colorimetry.datasets.lefs.SDS_LEFS_PHOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.datasets.lefs.DATA_LEFS_SCOTOPIC
    type-name: dict
    value: '{''CIE 1951 Scotopic Standard Observer'': {380: 0.000589, 381: 0.000665,
      382: 0.000752, 383: 0.000854, 384: 0.000972, 385: 0.001108, 386: 0.001268, 387:
      0.001453, 388: 0.001668, 389: 0.001918, 390: 0.00...'
  - constant-name: colour.colorimetry.datasets.lefs.SDS_LEFS_SCOTOPIC
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1951 Scotopic Standard Observer': SpectralDistribution([[  3.80000000e+02,   5.89000000e-04],
                            [  3.81000000e+02,   6.65000000e-04],
                         ...
  - constant-name: colour.colorimetry.datasets.lefs.SDS_LEFS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'CIE 1924 Photopic Standard Observer': SpectralDistribution([[  3.60000000e+02,   3.91700000e-06],
                            [  3.61000000e+02,   4.39358100e-06],
                         ...
  - constant-name: colour.colorimetry.datasets.lefs.DATA_MESOPIC_X
    type-name: dict
    value: '{0.01: CanonicalMapping({''Blue Heavy'': CanonicalMapping({''MOVE'': 0.13,
      ''LRC'': 0.04}), ''Red Heavy'': CanonicalMapping({''MOVE'': 0.0, ''LRC'': 0.01})}),
      0.1: CanonicalMapping({''Blue Heavy'': CanonicalMapping...'
  - constant-name: colour.colorimetry.datasets.light_sources.CCS_LIGHT_SOURCES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''Natural'':
      array([ 0.38158573,  0.35922414]), ''Philips TL-84'': array([ 0.3784136 ,  0.37929025]),
      ''SA'': array([ 0.44757303,  ...'
  - constant-name: colour.colorimetry.datasets.light_sources.SDS_LIGHT_SOURCES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Natural': SpectralDistribution([[ 380.  ,    1.88],
                            [ 385.  ,    2.24],
                            [ 390.  ,    2.65],
                            [ 395.  ,    2.95],...
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_RIT_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Natural'': array([ 0.38158573,  0.35922414]), ''Philips
      TL-84'': array([ 0.3784136 ,  0.37929025]), ''SA'': array([ 0.44757303,  0.40743814]),
      ''SC'': array([ 0.31005673,  0.3161457 ]), ''T...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_RIT_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Natural'': array([ 0.38487099,  0.35386922]), ''Philips
      TL-84'': array([ 0.383592  ,  0.37392274]), ''SA'': array([ 0.4511768 ,  0.40593605]),
      ''SC'': array([ 0.31038864,  0.31905065]), ''T...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_TRADITIONAL_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cool White FL'': array([ 0.36925632,  0.37254988]),
      ''Daylight FL'': array([ 0.31266299,  0.33198569]), ''HPS'': array([ 0.5216777
      ,  0.41797118]), ''Incandescent'': array([ 0.45073022,  0...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_TRADITIONAL_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cool White FL'': array([ 0.37671505,  0.3645768 ]),
      ''Daylight FL'': array([ 0.31739588,  0.33078082]), ''HPS'': array([ 0.5317645
      ,  0.40875272]), ''Incandescent'': array([ 0.4543656 ,  0...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_LED_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''3-LED-1 (457/540/605)'': array([ 0.41705769,  0.39626246]),
      ''3-LED-2 (473/545/616)'': array([ 0.41706048,  0.39626812]), ''3-LED-2 Yellow'':
      array([ 0.43656308,  0.44364962]), ''3-LED-3 ...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_LED_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''3-LED-1 (457/540/605)'': array([ 0.42509999,  0.38945135]),
      ''3-LED-2 (473/545/616)'': array([ 0.42222212,  0.4012985 ]), ''3-LED-2 Yellow'':
      array([ 0.44622222,  0.44164646]), ''3-LED-3 ...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_PHILIPS_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''60 A/W (Soft White)'': array([ 0.45073022,  0.40804613]),
      ''C100S54 (HPS)'': array([ 0.52923152,  0.41137016]), ''C100S54C (HPS)'': array([
      0.50238041,  0.4158773 ]), ''F32T8/TL830 (Triph...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_NIST_PHILIPS_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''60 A/W (Soft White)'': array([ 0.4543656 ,  0.40657368]),
      ''C100S54 (HPS)'': array([ 0.53855461,  0.40257583]), ''C100S54C (HPS)'': array([
      0.50966306,  0.40906451]), ''F32T8/TL830 (Triph...'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_COMMON_STANDARD_OBSERVER_2_DEGREE_CIE1931
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Kinoton 75P'': array([ 0.31525241,  0.33287079])})'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES_COMMON_STANDARD_OBSERVER_10_DEGREE_CIE1964
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Kinoton 75P'': array([ 0.31708664,  0.33622243])})'
  - constant-name: colour.colorimetry.datasets.light_sources.chromaticity_coordinates.CCS_LIGHT_SOURCES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''Natural'':
      array([ 0.38158573,  0.35922414]), ''Philips TL-84'': array([ 0.3784136 ,  0.37929025]),
      ''SA'': array([ 0.44757303,  ...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.DATA_LIGHT_SOURCES_RIT
    type-name: dict
    value: '{''Natural'': {380: 1.88, 385: 2.24, 390: 2.65, 395: 2.95, 400: 4.06,
      405: 20.6, 410: 4.66, 415: 4.23, 420: 4.54, 425: 4.87, 430: 5.36, 435: 43.4,
      440: 11.07, 445: 6.21, 450: 6.52, 455: 6.82, 460: 7.09,...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES_RIT
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Natural': SpectralDistribution([[ 380.  ,    1.88],
                            [ 385.  ,    2.24],
                            [ 390.  ,    2.65],
                            [ 395.  ,    2.95],...
  - constant-name: colour.colorimetry.datasets.light_sources.sds.DATA_LIGHT_SOURCES_NIST_TRADITIONAL
    type-name: dict
    value: '{''Cool White FL'': {380: 0.03353465, 385: 0.04082136, 390: 0.04995733,
      395: 0.07760631, 400: 0.16214621, 405: 0.16590101, 410: 0.13939696, 415: 0.09848528,
      420: 0.11529654, 425: 0.15309344, 430: 0.3613...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES_NIST_TRADITIONAL
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Cool White FL': SpectralDistribution([[  3.80000000e+02,   3.35346500e-02],
                            [  3.85000000e+02,   4.08213600e-02],
                            [  3.90000000e+02, ...
  - constant-name: colour.colorimetry.datasets.light_sources.sds.DATA_LIGHT_SOURCES_NIST_LED
    type-name: dict
    value: '{''3-LED-1 (457/540/605)'': {380: 8.47479023841784e-08, 385: 5.45760813791522e-07,
      390: 3.10162282092079e-06, 395: 1.55556747080694e-05, 400: 6.88496856317102e-05,
      405: 0.0002689232, 410: 0.0009269749, ...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES_NIST_LED
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'3-LED-1 (457/540/605)': SpectralDistribution([[  3.80000000e+02,   8.47479024e-08],
                            [  3.85000000e+02,   5.45760814e-07],
                            [  3.900000...
  - constant-name: colour.colorimetry.datasets.light_sources.sds.DATA_LIGHT_SOURCES_NIST_PHILIPS
    type-name: dict
    value: '{''60 A/W (Soft White)'': {380: 0.0221129274, 385: 0.0257550191, 390:
      0.0303031416, 395: 0.0402040843, 400: 0.0502272809, 405: 0.0596287164, 410:
      0.0685435436, 415: 0.077222055, 420: 0.0842087617, 425: ...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES_NIST_PHILIPS
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'60 A/W (Soft White)': SpectralDistribution([[  3.80000000e+02,   2.21129274e-02],
                            [  3.85000000e+02,   2.57550191e-02],
                            [  3.90000000...
  - constant-name: colour.colorimetry.datasets.light_sources.sds.DATA_LIGHT_SOURCES_COMMON
    type-name: dict
    value: '{''Kinoton 75P'': {380: 0.0001099667, 382: 0.0001415667, 384: 0.0001502,
      386: 0.0001820333, 388: 0.000213, 390: 0.0002264333, 392: 0.0002610333, 394:
      0.0002977667, 396: 0.0003158, 398: 0.0003516333, 400...'
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES_COMMON
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Kinoton 75P': SpectralDistribution([[  3.80000000e+02,   1.09966700e-04],
                            [  3.82000000e+02,   1.41566700e-04],
                            [  3.84000000e+02,   ...
  - constant-name: colour.colorimetry.datasets.light_sources.sds.SDS_LIGHT_SOURCES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'Natural': SpectralDistribution([[ 380.  ,    1.88],
                            [ 385.  ,    2.24],
                            [ 390.  ,    2.65],
                            [ 395.  ,    2.95],...
  - constant-name: colour.colorimetry.generation.SD_GAUSSIAN_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Normal'': <function sd_gaussian_normal at 0x7b934bd3e700>,
      ''FWHM'': <function sd_gaussian_fwhm at 0x7b934bd3e7a0>})'
  - constant-name: colour.colorimetry.generation.SD_SINGLE_LED_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Ohno 2005'': <function sd_single_led_Ohno2005 at 0x7b934bd3e8e0>})'
  - constant-name: colour.colorimetry.generation.SD_MULTI_LEDS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Ohno 2005'': <function sd_multi_leds_Ohno2005 at 0x7b934bd3ea20>})'
  - constant-name: colour.colorimetry.lightness.LIGHTNESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Glasser 1958'': <function lightness_Glasser1958 at
      0x7b934bc40360>, ''Wyszecki 1963'': <function lightness_Wyszecki1963 at 0x7b934bc404a0>,
      ''CIE 1976'': <function lightness_CIE1976 at 0...'
  - constant-name: colour.colorimetry.luminance.LUMINANCE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Newhall 1943'': <function luminance_Newhall1943 at
      0x7b934bc411c0>, ''ASTM D1535'': <function luminance_ASTMD1535 at 0x7b934bc41260>,
      ''CIE 1976'': <function luminance_CIE1976 at 0x7b934...'
  - constant-name: colour.colorimetry.spectrum.SPECTRAL_SHAPE_DEFAULT
    type-name: SpectralShape
    value: SpectralShape(360, 780, 1)
  - constant-name: colour.colorimetry.tristimulus_values.SPECTRAL_SHAPE_ASTME308
    type-name: SpectralShape
    value: SpectralShape(360, 780, 1)
  - constant-name: colour.colorimetry.tristimulus_values.SD_TO_XYZ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM E308'': <function sd_to_XYZ_ASTME308 at 0x7b934bd3f380>,
      ''Integration'': <function sd_to_XYZ_integration at 0x7b934bd3f240>, ''astm2015'':
      <function sd_to_XYZ_ASTME308 at 0x7b934bd...'
  - constant-name: colour.colorimetry.tristimulus_values.MSDS_TO_XYZ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM E308'': <function msds_to_XYZ_ASTME308 at 0x7b934bd3f560>,
      ''Integration'': <function msds_to_XYZ_integration at 0x7b934bd3f4c0>, ''astm2015'':
      <function msds_to_XYZ_ASTME308 at 0x7...'
  - constant-name: colour.colorimetry.whiteness.WHITENESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Berger 1959'': <function whiteness_Berger1959 at 0x7b934bb57060>,
      ''Taube 1960'': <function whiteness_Taube1960 at 0x7b934bb57100>, ''Stensby
      1968'': <function whiteness_Stensby1968 at 0...'
  - constant-name: colour.colorimetry.yellowness.YELLOWNESS_COEFFICIENTS_ASTME313
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931 2 Degree Standard Observer'': CanonicalMapping({''C'':
      array([ 1.2769,  1.0592]), ''D65'': array([ 1.2985,  1.1335])}), ''CIE 1964
      10 Degree Standard Observer'': CanonicalMapping(...'
  - constant-name: colour.colorimetry.yellowness.YELLOWNESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ASTM D1925'': <function yellowness_ASTMD1925 at 0x7b934bb57600>,
      ''ASTM E313 Alternative'': <function yellowness_ASTME313_alternative at 0x7b934bb576a0>,
      ''ASTM E313'': <function yellown...'
  - constant-name: colour.constants.CONSTANT_K_M
    type-name: int
    value: '683'
  - constant-name: colour.constants.CONSTANT_KP_M
    type-name: int
    value: '1700'
  - constant-name: colour.constants.CONSTANT_AVOGADRO
    type-name: float
    value: '6.02214179e+23'
  - constant-name: colour.constants.CONSTANT_BOLTZMANN
    type-name: float
    value: '1.38065e-23'
  - constant-name: colour.constants.CONSTANT_LIGHT_SPEED
    type-name: int
    value: '299792458'
  - constant-name: colour.constants.CONSTANT_PLANCK
    type-name: float
    value: '6.62607e-34'
  - constant-name: colour.constants.PATTERN_FLOATING_POINT_NUMBER
    type-name: str
    value: '''[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?'''
  - constant-name: colour.constants.THRESHOLD_INTEGER
    type-name: float
    value: '0.001'
  - constant-name: colour.constants.EPSILON
    type-name: float64
    value: '2.2204460492503131e-16'
  - constant-name: colour.constants.TOLERANCE_ABSOLUTE_DEFAULT
    type-name: float
    value: 1e-08
  - constant-name: colour.constants.TOLERANCE_RELATIVE_DEFAULT
    type-name: float
    value: 1e-08
  - constant-name: colour.constants.TOLERANCE_ABSOLUTE_TESTS
    type-name: float
    value: 1e-07
  - constant-name: colour.constants.TOLERANCE_RELATIVE_TESTS
    type-name: float
    value: 1e-07
  - constant-name: colour.constants.cie.CONSTANT_K_M
    type-name: int
    value: '683'
  - constant-name: colour.constants.cie.CONSTANT_KP_M
    type-name: int
    value: '1700'
  - constant-name: colour.constants.codata.CONSTANT_AVOGADRO
    type-name: float
    value: '6.02214179e+23'
  - constant-name: colour.constants.codata.CONSTANT_BOLTZMANN
    type-name: float
    value: '1.38065e-23'
  - constant-name: colour.constants.codata.CONSTANT_LIGHT_SPEED
    type-name: int
    value: '299792458'
  - constant-name: colour.constants.codata.CONSTANT_PLANCK
    type-name: float
    value: '6.62607e-34'
  - constant-name: colour.constants.common.PATTERN_FLOATING_POINT_NUMBER
    type-name: str
    value: '''[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?'''
  - constant-name: colour.constants.common.THRESHOLD_INTEGER
    type-name: float
    value: '0.001'
  - constant-name: colour.constants.common.EPSILON
    type-name: float64
    value: '2.2204460492503131e-16'
  - constant-name: colour.constants.common.TOLERANCE_ABSOLUTE_DEFAULT
    type-name: float
    value: 1e-08
  - constant-name: colour.constants.common.TOLERANCE_RELATIVE_DEFAULT
    type-name: float
    value: 1e-08
  - constant-name: colour.constants.common.TOLERANCE_ABSOLUTE_TESTS
    type-name: float
    value: 1e-07
  - constant-name: colour.constants.common.TOLERANCE_RELATIVE_TESTS
    type-name: float
    value: 1e-07
  - constant-name: colour.contrast.CONTRAST_SENSITIVITY_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Barten 1999'': <function contrast_sensitivity_function_Barten1999
      at 0x7b9348b59d00>})'
  - constant-name: colour.corresponding.BRENEMAN_EXPERIMENTS
    type-name: dict
    value: '{1: (BrenemanExperimentResult(name=''Illuminant'', uv_t=array([ 0.259,  0.526]),
      uv_m=array([ 0.2  ,  0.475]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=...'
  - constant-name: colour.corresponding.BRENEMAN_EXPERIMENT_PRIMARIES_CHROMATICITIES
    type-name: dict
    value: |-
      {1: PrimariesChromaticityCoordinates(experiment=1, illuminants=array(['A', 'D65'],
            dtype='<U3'), Y=array(1500), P_uvp=array([ 0.671,  0.519]), D_uvp=array([-0.586,  0.627]), T_uvp=array([ 0.253,...
  - constant-name: colour.corresponding.CORRESPONDING_CHROMATICITIES_PREDICTION_MODELS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1994'': <function corresponding_chromaticities_prediction_CIE1994
      at 0x7b9348feb600>, ''CMCCAT2000'': <function corresponding_chromaticities_prediction_CMCCAT2000
      at 0x7b9348feb6a0...'
  - constant-name: colour.corresponding.datasets.BRENEMAN_EXPERIMENTS
    type-name: dict
    value: '{1: (BrenemanExperimentResult(name=''Illuminant'', uv_t=array([ 0.259,  0.526]),
      uv_m=array([ 0.2  ,  0.475]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=...'
  - constant-name: colour.corresponding.datasets.BRENEMAN_EXPERIMENT_PRIMARIES_CHROMATICITIES
    type-name: dict
    value: |-
      {1: PrimariesChromaticityCoordinates(experiment=1, illuminants=array(['A', 'D65'],
            dtype='<U3'), Y=array(1500), P_uvp=array([ 0.671,  0.519]), D_uvp=array([-0.586,  0.627]), T_uvp=array([ 0.253,...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_1_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.259,  0.526]),
      uv_m=array([ 0.2  ,  0.475]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_2_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.222,  0.521]),
      uv_m=array([ 0.204,  0.479]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_3_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.223,  0.521]),
      uv_m=array([ 0.206,  0.478]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_4_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.258,  0.523]),
      uv_m=array([ 0.199,  0.467]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_5_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Gray', uv_t=array([ 0.028,  0.48 ]), uv_m=array([
      0.212,  0.491]), s_uv=array([2, 2]), d_uv_i=array(None, dtype=object), d_uv_g=array(None,
      dtype=object)), BrenemanExpe...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_6_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.257,  0.525]),
      uv_m=array([ 0.201,  0.482]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_7_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Gray', uv_t=array([ 0.208,  0.481]), uv_m=array([
      0.211,  0.486]), s_uv=array([2, 3]), d_uv_i=array(None, dtype=object), d_uv_g=array(None,
      dtype=object)), BrenemanExpe...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_10_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Gray', uv_t=array([ 0.208,  0.482]), uv_m=array([
      0.213,  0.494]), s_uv=array([3, 3]), d_uv_i=array(None, dtype=object), d_uv_g=array(None,
      dtype=object)), BrenemanExpe...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_8_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.258,  0.524]),
      uv_m=array([ 0.195,  0.469]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_9_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.254,  0.525]),
      uv_m=array([ 0.195,  0.465]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_11_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.208,  0.482]),
      uv_m=array([ 0.174,  0.52 ]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_12_RESULTS
    type-name: tuple
    value: (BrenemanExperimentResult(name='Illuminant', uv_t=array([ 0.205,  0.482]),
      uv_m=array([ 0.174,  0.519]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=obje...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENT_PRIMARIES_CHROMATICITIES
    type-name: dict
    value: |-
      {1: PrimariesChromaticityCoordinates(experiment=1, illuminants=array(['A', 'D65'],
            dtype='<U3'), Y=array(1500), P_uvp=array([ 0.671,  0.519]), D_uvp=array([-0.586,  0.627]), T_uvp=array([ 0.253,...
  - constant-name: colour.corresponding.datasets.breneman1987.BRENEMAN_EXPERIMENTS
    type-name: dict
    value: '{1: (BrenemanExperimentResult(name=''Illuminant'', uv_t=array([ 0.259,  0.526]),
      uv_m=array([ 0.2  ,  0.475]), s_uv=array(None, dtype=object), d_uv_i=array(None,
      dtype=object), d_uv_g=array(None, dtype=...'
  - constant-name: colour.corresponding.prediction.CORRESPONDING_CHROMATICITIES_PREDICTION_MODELS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1994'': <function corresponding_chromaticities_prediction_CIE1994
      at 0x7b9348feb600>, ''CMCCAT2000'': <function corresponding_chromaticities_prediction_CMCCAT2000
      at 0x7b9348feb6a0...'
  - constant-name: colour.difference.JND_CIE1976
    type-name: float
    value: '2.3'
  - constant-name: colour.difference.INDEX_STRESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Garcia 2007'': <function index_stress_Garcia2007 at
      0x7b9348ee3060>})'
  - constant-name: colour.difference.DELTA_E_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1976'': <function delta_E_CIE1976 at 0x7b9348ee28e0>,
      ''CIE 1994'': <function delta_E_CIE1994 at 0x7b9348ee2980>, ''CIE 2000'': <function
      delta_E_CIE2000 at 0x7b9348ee2a20>, ''CMC'': <...'
  - constant-name: colour.difference.delta_e.JND_CIE1976
    type-name: float
    value: '2.3'
  - constant-name: colour.difference.stress.INDEX_STRESS_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Garcia 2007'': <function index_stress_Garcia2007 at
      0x7b9348ee3060>})'
  - constant-name: colour.geometry.ELLIPSE_FITTING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Halir 1998'': <function ellipse_fitting_Halir1998
      at 0x7b934bc42020>})'
  - constant-name: colour.geometry.MAPPING_PLANE_TO_AXIS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''yz'': ''+x'', ''zy'': ''-x'', ''xz'': ''+y'', ''zx'':
      ''-y'', ''xy'': ''+z'', ''yx'': ''-z''})'
  - constant-name: colour.geometry.PRIMITIVE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Grid'': <function primitive_grid at 0x7b934bc42700>,
      ''Cube'': <function primitive_cube at 0x7b934bc427a0>})'
  - constant-name: colour.geometry.PRIMITIVE_VERTICES_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Quad MPL'': <function primitive_vertices_quad_mpl
      at 0x7b934bc43100>, ''Grid MPL'': <function primitive_vertices_grid_mpl at 0x7b934bc431a0>,
      ''Cube MPL'': <function primitive_vertices_c...'
  - constant-name: colour.geometry.ellipse.ELLIPSE_FITTING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Halir 1998'': <function ellipse_fitting_Halir1998
      at 0x7b934bc42020>})'
  - constant-name: colour.geometry.primitives.MAPPING_PLANE_TO_AXIS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''yz'': ''+x'', ''zy'': ''-x'', ''xz'': ''+y'', ''zx'':
      ''-y'', ''xy'': ''+z'', ''yx'': ''-z''})'
  - constant-name: colour.geometry.primitives.PRIMITIVE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Grid'': <function primitive_grid at 0x7b934bc42700>,
      ''Cube'': <function primitive_cube at 0x7b934bc427a0>})'
  - constant-name: colour.geometry.vertices.PRIMITIVE_VERTICES_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Quad MPL'': <function primitive_vertices_quad_mpl
      at 0x7b934bc43100>, ''Grid MPL'': <function primitive_vertices_grid_mpl at 0x7b934bc431a0>,
      ''Cube MPL'': <function primitive_vertices_c...'
  - constant-name: colour.graph.CONVERSION_GRAPH
    type-name: NoneType
    value: None
  - constant-name: colour.graph.CONVERSION_GRAPH_NODE_LABELS
    type-name: dict
    value: '{''spectral distribution'': ''Spectral Distribution'', ''cie xyz'': ''CIE
      XYZ'', ''luminance'': ''Luminance'', ''lightness'': ''Lightness'', ''cie xy'':
      ''CIE xy'', ''wavelength'': ''Wavelength'', ''cie xyy'': ''CIE xyY'', ''cie
      ...'
  - constant-name: colour.graph.conversion.CONVERSION_SPECIFICATIONS_DATA
    type-name: list
    value: '[(''Spectral Distribution'', ''CIE XYZ'', <function sd_to_XYZ at 0x7b934bd3f420>),
      (''CIE XYZ'', ''Spectral Distribution'', <function XYZ_to_sd at 0x7b934e0c7d80>),
      (''Spectral Distribution'', ''Luminous Flux'', ...'
  - constant-name: colour.graph.conversion.CONVERSION_GRAPH_NODE_LABELS
    type-name: dict
    value: '{''spectral distribution'': ''Spectral Distribution'', ''cie xyz'': ''CIE
      XYZ'', ''luminance'': ''Luminance'', ''lightness'': ''Lightness'', ''cie xy'':
      ''CIE xy'', ''wavelength'': ''Wavelength'', ''cie xyy'': ''CIE xyY'', ''cie
      ...'
  - constant-name: colour.graph.conversion.CONVERSION_SPECIFICATIONS
    type-name: list
    value: '[Conversion_Specification(source=''spectral distribution'', target=''cie
      xyz'', conversion_function=<function sd_to_XYZ at 0x7b934bd3f420>), Conversion_Specification(source=''cie
      xyz'', target=''spectral dis...'
  - constant-name: colour.graph.conversion.CONVERSION_GRAPH
    type-name: NoneType
    value: None
  - constant-name: colour.hints.TYPE_CHECKING
    type-name: bool
    value: 'False'
  - constant-name: colour.io.LUT_READ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cinespace'': <function read_LUT_Cinespace at 0x7b93492c3880>,
      ''Iridas Cube'': <function read_LUT_IridasCube at 0x7b934925a520>, ''Resolve
      Cube'': <function read_LUT_ResolveCube at 0x7b9...'
  - constant-name: colour.io.LUT_WRITE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cinespace'': <function write_LUT_Cinespace at 0x7b93492c3920>,
      ''Iridas Cube'': <function write_LUT_IridasCube at 0x7b93492c2c00>, ''Resolve
      Cube'': <function write_LUT_ResolveCube at 0x...'
  - constant-name: colour.io.MAPPING_BIT_DEPTH
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''uint8'': Image_Specification_BitDepth(name=''uint8'',
      numpy=<class ''numpy.uint8''>, openimageio=None), ''uint16'': Image_Specification_BitDepth(name=''uint16'',
      numpy=<class ''numpy.uint16''>...'
  - constant-name: colour.io.READ_IMAGE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Imageio'': <function read_image_Imageio at 0x7b93492e4720>,
      ''OpenImageIO'': <function read_image_OpenImageIO at 0x7b93492e4860>})'
  - constant-name: colour.io.WRITE_IMAGE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Imageio'': <function write_image_Imageio at 0x7b93492e49a0>,
      ''OpenImageIO'': <function write_image_OpenImageIO at 0x7b93492e4ae0>})'
  - constant-name: colour.io.ctl.EXECUTABLE_CTL_RENDER
    type-name: str
    value: '''ctlrender'''
  - constant-name: colour.io.ctl.ARGUMENTS_CTL_RENDER_DEFAULTS
    type-name: tuple
    value: ('-verbose', '-force')
  - constant-name: colour.io.fichet2021.MAPPING_UNIT_CONVERSION
    type-name: dict
    value: '{''Y'': 1e+24, ''Z'': 1e+21, ''E'': 1e+18, ''P'': 1000000000000000.0,
      ''T'': 1000000000000.0, ''G'': 1000000000.0, ''M'': 1000000.0, ''k'': 1000.0,
      ''h'': 100.0, ''da'': 10.0, '''': 1, ''d'': 0.1, ''c'': 0.01, ''m'': 0.001,
      ''u'':...'
  - constant-name: colour.io.fichet2021.PATTERN_FICHET2021
    type-name: str
    value: '''(\\d*,?\\d*([eE][-+]?\\d+)?)(Y|Z|E|P|T|G|M|k|h|da|d|c|m|u|n|p|f|a|z|y)?(m|Hz)'''
  - constant-name: colour.io.image.MAPPING_BIT_DEPTH
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''uint8'': Image_Specification_BitDepth(name=''uint8'',
      numpy=<class ''numpy.uint8''>, openimageio=None), ''uint16'': Image_Specification_BitDepth(name=''uint16'',
      numpy=<class ''numpy.uint16''>...'
  - constant-name: colour.io.image.READ_IMAGE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Imageio'': <function read_image_Imageio at 0x7b93492e4720>,
      ''OpenImageIO'': <function read_image_OpenImageIO at 0x7b93492e4860>})'
  - constant-name: colour.io.image.WRITE_IMAGE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Imageio'': <function write_image_Imageio at 0x7b93492e49a0>,
      ''OpenImageIO'': <function write_image_OpenImageIO at 0x7b93492e4ae0>})'
  - constant-name: colour.io.luts.LUT_READ_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cinespace'': <function read_LUT_Cinespace at 0x7b93492c3880>,
      ''Iridas Cube'': <function read_LUT_IridasCube at 0x7b934925a520>, ''Resolve
      Cube'': <function read_LUT_ResolveCube at 0x7b9...'
  - constant-name: colour.io.luts.LUT_WRITE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Cinespace'': <function write_LUT_Cinespace at 0x7b93492c3920>,
      ''Iridas Cube'': <function write_LUT_IridasCube at 0x7b93492c2c00>, ''Resolve
      Cube'': <function write_LUT_ResolveCube at 0x...'
  - constant-name: colour.io.tm2714.VERSION_IESTM2714
    type-name: str
    value: '''1.0'''
  - constant-name: colour.io.tm2714.NAMESPACE_IESTM2714
    type-name: str
    value: '''http://www.ies.org/iestm2714'''
  - constant-name: colour.io.xrite.XRITE_FILE_ENCODING
    type-name: str
    value: '''utf-8'''
  - constant-name: colour.models.COLOURSPACE_MODELS
    type-name: tuple
    value: ('CAM02LCD', 'CAM02SCD', 'CAM02UCS', 'CAM16LCD', 'CAM16SCD', 'CAM16UCS',
      'CIE 1931', 'CIE 1960 UCS', 'CIE 1976 UCS', 'CIE Lab', 'CIE Luv', 'CIE UCS',
      'CIE UVW', 'CIE XYZ', 'CIE xyY', 'DIN99', 'HCL', '...
  - constant-name: colour.models.COLOURSPACE_MODELS_AXIS_LABELS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02LCD'': ("$J^''$", "$a^''$", "$b^''$"), ''CAM02SCD'':
      ("$J^''$", "$a^''$", "$b^''$"), ''CAM02UCS'': ("$J^''$", "$a^''$", "$b^''$"),
      ''CAM16LCD'': ("$J^''$", "$a^''$", "$b^''$"), ''CAM16SCD'': ("$J^''...'
  - constant-name: colour.models.COLOURSPACE_MODELS_DOMAIN_RANGE_SCALE_1_TO_REFERENCE
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02LCD'': array([100, 100, 100]), ''CAM02SCD'':
      array([100, 100, 100]), ''CAM02UCS'': array([100, 100, 100]), ''CAM16LCD'':
      array([100, 100, 100]), ''CAM16SCD'': array([100, 100, 100]), ''C...'
  - constant-name: colour.models.HDR_CIELAB_METHODS
    type-name: tuple
    value: ('Fairchild 2010', 'Fairchild 2011')
  - constant-name: colour.models.IZAZBZ_METHODS
    type-name: tuple
    value: ('Safdar 2017', 'Safdar 2021', 'ZCAM')
  - constant-name: colour.models.HDR_IPT_METHODS
    type-name: tuple
    value: ('Fairchild 2010', 'Fairchild 2011')
  - constant-name: colour.models.DATA_MACADAM_1942_ELLIPSES
    type-name: ndarray
    value: |-
      array([[  1.60000000e-01,   5.70000000e-02,   8.50000000e-01,
                3.50000000e-01,   6.25000000e+01,   9.40000000e-01,
                3.00000000e-01,   6.23000000e+01],
             [  1.87000000e-01,   1.1...
  - constant-name: colour.models.CCS_ILLUMINANT_POINTER_GAMUT
    type-name: ndarray
    value: array([ 0.31005673,  0.3161457 ])
  - constant-name: colour.models.DATA_POINTER_GAMUT_VOLUME
    type-name: ndarray
    value: "array([[ 15,  10,   0],\n       [ 15,  15,  10],\n       [ 15,  14,  20],\n\
      \       ..., \n       [ 90,   9, 330],\n       [ 90,   4, 340],\n       [ 90,\
      \   6, 350]])"
  - constant-name: colour.models.CCS_POINTER_GAMUT_BOUNDARY
    type-name: ndarray
    value: |-
      array([[ 0.659,  0.316],
             [ 0.634,  0.351],
             [ 0.594,  0.391],
             [ 0.557,  0.427],
             [ 0.523,  0.462],
             [ 0.482,  0.491],
             [ 0.444,  0.515],
             [ 0.409,  0.546],
      ...
  - constant-name: colour.models.BT2100_HLG_EOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_BT2100_HLG_1 at
      0x7b934bad2d40>, ''ITU-R BT.2100-2'': <function eotf_BT2100_HLG_2 at 0x7b934bad2de0>})'
  - constant-name: colour.models.BT2100_HLG_EOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_inverse_BT2100_HLG_1
      at 0x7b934bad2f20>, ''ITU-R BT.2100-2'': <function eotf_inverse_BT2100_HLG_2
      at 0x7b934bad2fc0>})'
  - constant-name: colour.models.BT2100_HLG_OOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_BT2100_HLG_1 at
      0x7b934bad3100>, ''ITU-R BT.2100-2'': <function ootf_BT2100_HLG_2 at 0x7b934bad31a0>})'
  - constant-name: colour.models.BT2100_HLG_OOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_inverse_BT2100_HLG_1
      at 0x7b934bad32e0>, ''ITU-R BT.2100-2'': <function ootf_inverse_BT2100_HLG_2
      at 0x7b934bad3380>})'
  - constant-name: colour.models.LOG3G10_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_Log3G10_v1 at 0x7b934bad9580>,
      ''v2'': <function log_encoding_Log3G10_v2 at 0x7b934bad96c0>, ''v3'': <function
      log_encoding_Log3G10_v3 at 0x7b934bad9800>})'
  - constant-name: colour.models.LOG3G10_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_Log3G10_v1 at 0x7b934bad9620>,
      ''v2'': <function log_decoding_Log3G10_v2 at 0x7b934bad9760>, ''v3'': <function
      log_decoding_Log3G10_v3 at 0x7b934bad98a0>})'
  - constant-name: colour.models.LOG_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_encoding_ACEScc at 0x7b934baa4ea0>,
      ''ACEScct'': <function log_encoding_ACEScct at 0x7b934baa4fe0>, ''ACESproxy'':
      <function log_encoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.LOG_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_decoding_ACEScc at 0x7b934baa4f40>,
      ''ACEScct'': <function log_decoding_ACEScct at 0x7b934baa5080>, ''ACESproxy'':
      <function log_decoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.OETFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_ARIBSTDB67 at 0x7b934baa4220>,
      ''Blackmagic Film Generation 5'': <function oetf_BlackmagicFilmGeneration5 at
      0x7b934baa5c60>, ''DaVinci Intermediate'': <fu...'
  - constant-name: colour.models.OETF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_inverse_ARIBSTDB67
      at 0x7b934baa5620>, ''Blackmagic Film Generation 5'': <function oetf_inverse_BlackmagicFilmGeneration5
      at 0x7b934baa5d00>, ''DaVinci In...'
  - constant-name: colour.models.EOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_DCDM at 0x7b934baa74c0>, ''DICOM
      GSDF'': <function eotf_DICOMGSDF at 0x7b934baa77e0>, ''ITU-R BT.1886'': <function
      eotf_BT1886 at 0x7b934bad16c0>, ''ITU-R BT.2100 H...'
  - constant-name: colour.models.EOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_inverse_DCDM at 0x7b934baa7420>,
      ''DICOM GSDF'': <function eotf_inverse_DICOMGSDF at 0x7b934baa7740>, ''ITU-R
      BT.1886'': <function eotf_inverse_BT1886 at 0x7b934ba...'
  - constant-name: colour.models.CCTF_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=0.45454545454545453), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>,...'
  - constant-name: colour.models.CCTF_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=2.2), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>, exponent=2.4), ...'
  - constant-name: colour.models.OOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_BT2100_HLG at
      0x7b934bad3240>, ''ITU-R BT.2100 PQ'': <function ootf_BT2100_PQ at 0x7b934bad2980>})'
  - constant-name: colour.models.OOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_inverse_BT2100_HLG
      at 0x7b934bad3420>, ''ITU-R BT.2100 PQ'': <function ootf_inverse_BT2100_PQ at
      0x7b934bad2a20>})'
  - constant-name: colour.models.RGB_COLOURSPACES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ACES2065-1': RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00...
  - constant-name: colour.models.RGB_COLOURSPACE_ACES2065_1
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00000000e-04,  -7.70000000e-02]],
          ...
  - constant-name: colour.models.RGB_COLOURSPACE_ACESCC
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScc',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.RGB_COLOURSPACE_ACESCCT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScct',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_ACESPROXY
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACESproxy',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
         ...
  - constant-name: colour.models.RGB_COLOURSPACE_ACESCG
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScg',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.RGB_COLOURSPACE_ADOBE_RGB1998
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe RGB (1998)',
                      [[ 0.64,  0.33],
                       [ 0.21,  0.71],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_ADOBE_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe Wide Gamut RGB',
                      [[ 0.7347,  0.2653],
                       [ 0.1152,  0.8264],
                       [ 0.1566,  0.0177]],
                      [ 0.3457,  0.3585],
                  ...
  - constant-name: colour.models.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 3',
                      [[ 0.684 ,  0.313 ],
                       [ 0.221 ,  0.848 ],
                       [ 0.0861, -0.102 ]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 4',
                      [[ 0.7347,  0.2653],
                       [ 0.1424,  0.8576],
                       [ 0.0991, -0.0308]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.RGB_COLOURSPACE_APPLE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Apple RGB',
                      [[ 0.625,  0.34 ],
                       [ 0.28 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
            ...
  - constant-name: colour.models.RGB_COLOURSPACE_BEST_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Best RGB',
                      [[ 0.73519164,  0.26480836],
                       [ 0.21533613,  0.77415966],
                       [ 0.13012295,  0.03483607]],
                      [ 0.3457,  0.3585],
      ...
  - constant-name: colour.models.RGB_COLOURSPACE_BETA_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Beta RGB',
                      [[ 0.6888,  0.3112],
                       [ 0.1986,  0.7551],
                       [ 0.1265,  0.0352]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.RGB_COLOURSPACE_BLACKMAGIC_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Blackmagic Wide Gamut',
                      [[ 0.7177215,  0.3171181],
                       [ 0.228041 ,  0.861569 ],
                       [ 0.1005841, -0.0820452]],
                      [ 0.312717 , ...
  - constant-name: colour.models.RGB_COLOURSPACE_BT470_525
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 525',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
         ...
  - constant-name: colour.models.RGB_COLOURSPACE_BT470_625
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 625',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
         ...
  - constant-name: colour.models.RGB_COLOURSPACE_BT709
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.709',
                      [[ 0.64,  0.33],
                       [ 0.3 ,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.RGB_COLOURSPACE_BT2020
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.2020',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.RGB_COLOURSPACE_CIE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('CIE RGB',
                      [[ 0.73474284,  0.26525716],
                       [ 0.27377903,  0.7174777 ],
                       [ 0.16655563,  0.00891073]],
                      [ 0.33333333,  0.3333...
  - constant-name: colour.models.RGB_COLOURSPACE_CINEMA_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Cinema Gamut',
                      [[ 0.74,  0.27],
                       [ 0.17,  1.14],
                       [ 0.08, -0.1 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.RGB_COLOURSPACE_COLOR_MATCH_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ColorMatch RGB',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.15 ,  0.075]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.RGB_COLOURSPACE_DAVINCI_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DaVinci Wide Gamut',
                      [[ 0.8   ,  0.313 ],
                       [ 0.1682,  0.9877],
                       [ 0.079 , -0.1155]],
                      [ 0.3127,  0.329 ],
                    ...
  - constant-name: colour.models.RGB_COLOURSPACE_DCDM_XYZ
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCDM XYZ',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.33333333,  0.33333333],
                      'E',
                      [[ ...
  - constant-name: colour.models.RGB_COLOURSPACE_DCI_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.314,  0.351],
                      'DCI-P3',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_DCI_P3_P
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3-P',
                      [[ 0.74,  0.27],
                       [ 0.22,  0.78],
                       [ 0.09, -0.09]],
                      [ 0.314,  0.351],
                      'DCI-P3',
                  ...
  - constant-name: colour.models.RGB_COLOURSPACE_DISPLAY_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Display P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_DJI_D_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DJI D-Gamut',
                      [[ 0.71,  0.31],
                       [ 0.21,  0.88],
                       [ 0.09, -0.08]],
                      [ 0.3127,  0.329 ],
                      'D65',
                ...
  - constant-name: colour.models.RGB_COLOURSPACE_DON_RGB_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Don RGB 4',
                      [[ 0.69612069,  0.29956897],
                       [ 0.21468298,  0.76529477],
                       [ 0.12993763,  0.03534304]],
                      [ 0.3457,  0.3585],...
  - constant-name: colour.models.RGB_COLOURSPACE_EBU_3213_E
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('EBU Tech. 3213-E',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.313,  0.329],
                      'D65',
             ...
  - constant-name: colour.models.RGB_COLOURSPACE_ECI_RGB_V2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ECI RGB v2',
                      [[ 0.67010309,  0.32989691],
                       [ 0.20990566,  0.70990566],
                       [ 0.14006179,  0.08032956]],
                      [ 0.3457,  0.3585]...
  - constant-name: colour.models.RGB_COLOURSPACE_EKTA_SPACE_PS_5
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Ekta Space PS 5',
                      [[ 0.69473684,  0.30526316],
                       [ 0.26      ,  0.7       ],
                       [ 0.10972851,  0.00452489]],
                      [ 0.3457,  0....
  - constant-name: colour.models.RGB_COLOURSPACE_FILMLIGHT_E_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('FilmLight E-Gamut',
                      [[ 0.8   ,  0.3177],
                       [ 0.18  ,  0.9   ],
                       [ 0.065 , -0.0805]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.RGB_COLOURSPACE_H273_GENERIC_FILM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - Generic Film',
                      [[ 0.681,  0.319],
                       [ 0.243,  0.692],
                       [ 0.145,  0.049]],
                      [ 0.31 ,  0.316],
                    ...
  - constant-name: colour.models.RGB_COLOURSPACE_H273_22_UNSPECIFIED
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - 22 Unspecified',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.155,  0.077]],
                      [ 0.3127,  0.329 ],
                ...
  - constant-name: colour.models.RGB_COLOURSPACE_PROTUNE_NATIVE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Protune Native',
                      [[ 0.69848046,  0.19302645],
                       [ 0.32955538,  1.02459662],
                       [ 0.10844263, -0.03467857]],
                      [ 0.3127,  0.3...
  - constant-name: colour.models.RGB_COLOURSPACE_MAX_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Max RGB',
                      [[ 0.73413379,  0.26586621],
                       [ 0.10039113,  0.89960887],
                       [ 0.03621495,  0.        ]],
                      [ 0.3457,  0.3585],
       ...
  - constant-name: colour.models.RGB_COLOURSPACE_N_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('N-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_P3_D65
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('P3-D65',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.RGB_COLOURSPACE_PAL_SECAM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Pal/Secam',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
                  ...
  - constant-name: colour.models.RGB_COLOURSPACE_RED_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor',
                      [[ 0.70105856,  0.33018098],
                       [ 0.29881132,  0.62516925],
                       [ 0.13503868,  0.03526178]],
                      [ 0.3127,  0.329 ],
      ...
  - constant-name: colour.models.RGB_COLOURSPACE_RED_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor2',
                      [[ 0.89740722,  0.33077623],
                       [ 0.29602209,  0.68463555],
                       [ 0.09979951, -0.02300051]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.RGB_COLOURSPACE_RED_COLOR_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor3',
                      [[ 0.70259866,  0.33018559],
                       [ 0.29578224,  0.68974826],
                       [ 0.11109053, -0.00433232]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.RGB_COLOURSPACE_RED_COLOR_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor4',
                      [[ 0.70259815,  0.3301851 ],
                       [ 0.29578233,  0.68974825],
                       [ 0.14445924,  0.05083772]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.RGB_COLOURSPACE_DRAGON_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor',
                      [[ 0.75865589,  0.33035535],
                       [ 0.29492362,  0.70805324],
                       [ 0.0859616 , -0.04587944]],
                      [ 0.3127,  0.329 ...
  - constant-name: colour.models.RGB_COLOURSPACE_DRAGON_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor2',
                      [[ 0.75865621,  0.33035584],
                       [ 0.29492389,  0.70805336],
                       [ 0.14416873,  0.05035738]],
                      [ 0.3127,  0.329...
  - constant-name: colour.models.RGB_COLOURSPACE_RED_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDWideGamutRGB',
                      [[ 0.780308,  0.304253],
                       [ 0.121595,  1.493994],
                       [ 0.095612, -0.084589]],
                      [ 0.3127,  0.329 ],
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_ROMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ROMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.RGB_COLOURSPACE_RIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('RIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.RGB_COLOURSPACE_ERIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ERIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_PROPHOTO_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ProPhoto RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
        ...
  - constant-name: colour.models.RGB_COLOURSPACE_PLASA_ANSI_E154
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('PLASA ANSI E1.54',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]]...
  - constant-name: colour.models.RGB_COLOURSPACE_RUSSELL_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Russell RGB',
                      [[ 0.69,  0.31],
                       [ 0.18,  0.77],
                       [ 0.1 ,  0.02]],
                      [ 0.33243,  0.34744],
                      'D55',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_SHARP_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Sharp RGB',
                      [[ 0.6898,  0.3206],
                       [ 0.0736,  0.9003],
                       [ 0.1166,  0.0374]],
                      [ 0.33333333,  0.33333333],
                     ...
  - constant-name: colour.models.RGB_COLOURSPACE_SMPTE_240M
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE 240M',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.RGB_COLOURSPACE_SMPTE_C
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE C',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_NTSC1953
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1953)',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
                ...
  - constant-name: colour.models.RGB_COLOURSPACE_NTSC1987
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1987)',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
          ...
  - constant-name: colour.models.RGB_COLOURSPACE_S_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
             ...
  - constant-name: colour.models.RGB_COLOURSPACE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3.Cine',
                      [[ 0.766,  0.275],
                       [ 0.225,  0.8  ],
                       [ 0.089, -0.087]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.RGB_COLOURSPACE_VENICE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3',
                      [[ 0.74046426,  0.27936437],
                       [ 0.08924115,  0.89380953],
                       [ 0.11048824, -0.05257933]],
                      [ 0.3127,  0....
  - constant-name: colour.models.RGB_COLOURSPACE_VENICE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3.Cine',
                      [[ 0.77590187,  0.27450239],
                       [ 0.1886829 ,  0.82868494],
                       [ 0.10133738, -0.08918752]],
                      [ 0.3127...
  - constant-name: colour.models.RGB_COLOURSPACE_V_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('V-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.165,  0.84 ],
                       [ 0.1  , -0.03 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.RGB_COLOURSPACE_XTREME_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Xtreme RGB',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.3457,  0.3585],
                      'D50',
                      [[ 0.96...
  - constant-name: colour.models.RGB_COLOURSPACE_F_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('F-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.WEIGHTS_YCBCR
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.601'': array([ 0.299,  0.114]), ''ITU-R BT.709'':
      array([ 0.2126,  0.0722]), ''ITU-R BT.2020'': array([ 0.2627,  0.0593]), ''SMPTE-240M'':
      array([ 0.2122,  0.0865])})'
  - constant-name: colour.models.COLOUR_PRIMARIES_ITUTH273
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.TRANSFER_CHARACTERISTICS_ITUTH273
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.MATRIX_COEFFICIENTS_ITUTH273
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.cam02_ucs.COEFFICIENTS_UCS_LUO2006
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02-LCD'': Coefficients_UCS_Luo2006(K_L=0.77, c_1=0.007,
      c_2=0.0053), ''CAM02-SCD'': Coefficients_UCS_Luo2006(K_L=1.24, c_1=0.007, c_2=0.0363),
      ''CAM02-UCS'': Coefficients_UCS_Luo2006(...'
  - constant-name: colour.models.common.COLOURSPACE_MODELS
    type-name: tuple
    value: ('CAM02LCD', 'CAM02SCD', 'CAM02UCS', 'CAM16LCD', 'CAM16SCD', 'CAM16UCS',
      'CIE 1931', 'CIE 1960 UCS', 'CIE 1976 UCS', 'CIE Lab', 'CIE Luv', 'CIE UCS',
      'CIE UVW', 'CIE XYZ', 'CIE xyY', 'DIN99', 'HCL', '...
  - constant-name: colour.models.common.COLOURSPACE_MODELS_AXIS_LABELS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02LCD'': ("$J^''$", "$a^''$", "$b^''$"), ''CAM02SCD'':
      ("$J^''$", "$a^''$", "$b^''$"), ''CAM02UCS'': ("$J^''$", "$a^''$", "$b^''$"),
      ''CAM16LCD'': ("$J^''$", "$a^''$", "$b^''$"), ''CAM16SCD'': ("$J^''...'
  - constant-name: colour.models.common.COLOURSPACE_MODELS_DOMAIN_RANGE_SCALE_1_TO_REFERENCE
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02LCD'': array([100, 100, 100]), ''CAM02SCD'':
      array([100, 100, 100]), ''CAM02UCS'': array([100, 100, 100]), ''CAM16LCD'':
      array([100, 100, 100]), ''CAM16SCD'': array([100, 100, 100]), ''C...'
  - constant-name: colour.models.datasets.DATA_MACADAM_1942_ELLIPSES
    type-name: ndarray
    value: |-
      array([[  1.60000000e-01,   5.70000000e-02,   8.50000000e-01,
                3.50000000e-01,   6.25000000e+01,   9.40000000e-01,
                3.00000000e-01,   6.23000000e+01],
             [  1.87000000e-01,   1.1...
  - constant-name: colour.models.datasets.CCS_ILLUMINANT_POINTER_GAMUT
    type-name: ndarray
    value: array([ 0.31005673,  0.3161457 ])
  - constant-name: colour.models.datasets.DATA_POINTER_GAMUT_VOLUME
    type-name: ndarray
    value: "array([[ 15,  10,   0],\n       [ 15,  15,  10],\n       [ 15,  14,  20],\n\
      \       ..., \n       [ 90,   9, 330],\n       [ 90,   4, 340],\n       [ 90,\
      \   6, 350]])"
  - constant-name: colour.models.datasets.CCS_POINTER_GAMUT_BOUNDARY
    type-name: ndarray
    value: |-
      array([[ 0.659,  0.316],
             [ 0.634,  0.351],
             [ 0.594,  0.391],
             [ 0.557,  0.427],
             [ 0.523,  0.462],
             [ 0.482,  0.491],
             [ 0.444,  0.515],
             [ 0.409,  0.546],
      ...
  - constant-name: colour.models.datasets.macadam_ellipses.DATA_MACADAM_1942_ELLIPSES
    type-name: ndarray
    value: |-
      array([[  1.60000000e-01,   5.70000000e-02,   8.50000000e-01,
                3.50000000e-01,   6.25000000e+01,   9.40000000e-01,
                3.00000000e-01,   6.23000000e+01],
             [  1.87000000e-01,   1.1...
  - constant-name: colour.models.datasets.pointer_gamut.CCS_ILLUMINANT_POINTER_GAMUT
    type-name: ndarray
    value: array([ 0.31005673,  0.3161457 ])
  - constant-name: colour.models.datasets.pointer_gamut.DATA_POINTER_GAMUT_VOLUME
    type-name: ndarray
    value: "array([[ 15,  10,   0],\n       [ 15,  15,  10],\n       [ 15,  14,  20],\n\
      \       ..., \n       [ 90,   9, 330],\n       [ 90,   4, 340],\n       [ 90,\
      \   6, 350]])"
  - constant-name: colour.models.datasets.pointer_gamut.CCS_POINTER_GAMUT_BOUNDARY
    type-name: ndarray
    value: |-
      array([[ 0.659,  0.316],
             [ 0.634,  0.351],
             [ 0.594,  0.391],
             [ 0.557,  0.427],
             [ 0.523,  0.462],
             [ 0.482,  0.491],
             [ 0.444,  0.515],
             [ 0.409,  0.546],
      ...
  - constant-name: colour.models.din99.DIN99_METHODS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'ASTMD2244-07': array([  1.05509000e+02,   1.58000000e-02,   1.60000000e+01,
               7.00000000e-01,   1.00000000e+00,   4.50000000e-02,
               0.00000000e+00,   4.50000000e-02]),...
  - constant-name: colour.models.hdr_cie_lab.HDR_CIELAB_METHODS
    type-name: tuple
    value: ('Fairchild 2010', 'Fairchild 2011')
  - constant-name: colour.models.hdr_ipt.HDR_IPT_METHODS
    type-name: tuple
    value: ('Fairchild 2010', 'Fairchild 2011')
  - constant-name: colour.models.icacb.MATRIX_ICACB_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.37613,  0.70431, -0.05675],
             [-0.21649,  1.14744,  0.05356],
             [ 0.02567,  0.16713,  0.74235]])
  - constant-name: colour.models.icacb.MATRIX_ICACB_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.93800976, -1.22401182,  0.23646545],
             [ 0.37269323,  0.64537479, -0.01807225],
             [-0.15092198, -0.10297179,  1.34296538]])
  - constant-name: colour.models.icacb.MATRIX_ICACB_XYZ_TO_LMS_2
    type-name: ndarray
    value: |-
      array([[  4.94900000e-01,   5.03700000e-01,   1.50000000e-03],
             [  4.28540000e+00,  -4.54620000e+00,   2.60900000e-01],
             [  3.60500000e-01,   1.14990000e+00,  -1.51050000e+00]])
  - constant-name: colour.models.icacb.MATRIX_ICACB_LMS_TO_XYZ_2
    type-name: ndarray
    value: |-
      array([[ 0.9998905 ,  0.11610738,  0.0210475 ],
             [ 0.99990953, -0.1139032 , -0.01868089],
             [ 0.99983879, -0.05900071, -0.67123041]])
  - constant-name: colour.models.igpgtg.MATRIX_IGPGTG_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 2.968,  2.741, -0.649],
             [ 1.237,  5.969, -0.173],
             [-0.318,  0.387,  2.311]])
  - constant-name: colour.models.igpgtg.MATRIX_IGPGTG_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.43434869, -0.20636237,  0.10653034],
             [-0.08785464,  0.20846347, -0.00906685],
             [ 0.07447972, -0.06330532,  0.44889031]])
  - constant-name: colour.models.igpgtg.MATRIX_IGPGTG_LMS_P_TO_IGPGTG
    type-name: ndarray
    value: |-
      array([[  0.117,   1.464,   0.13 ],
             [  8.285,  -8.361,  21.4  ],
             [ -1.208,   2.412, -36.53 ]])
  - constant-name: colour.models.igpgtg.MATRIX_IGPGTG_IGPGTG_TO_LMS_P
    type-name: ndarray
    value: |-
      array([[ 0.58184646,  0.12331855,  0.07431308],
             [ 0.63454819, -0.00943792, -0.00327074],
             [ 0.02265699, -0.00470115, -0.03004816]])
  - constant-name: colour.models.ipt.MATRIX_IPT_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.4002,  0.7075, -0.0807],
             [-0.228 ,  1.15  ,  0.0612],
             [ 0.    ,  0.    ,  0.9184]])
  - constant-name: colour.models.ipt.MATRIX_IPT_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.85024294, -1.13830164,  0.23843496],
             [ 0.36683078,  0.64388454, -0.01067344],
             [ 0.        ,  0.        ,  1.08885017]])
  - constant-name: colour.models.ipt.MATRIX_IPT_LMS_P_TO_IPT
    type-name: ndarray
    value: |-
      array([[ 0.4   ,  0.4   ,  0.2   ],
             [ 4.455 , -4.851 ,  0.396 ],
             [ 0.8056,  0.3572, -1.1628]])
  - constant-name: colour.models.ipt.MATRIX_IPT_IPT_TO_LMS_P
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.09756893,  0.20522643],
             [ 1.        , -0.11387649,  0.13321716],
             [ 1.        ,  0.03261511, -0.67688718]])
  - constant-name: colour.models.jzazbz.CONSTANTS_JZAZBZ_SAFDAR2017
    type-name: Structure
    value: '{''b'': 1.15, ''g'': 0.66, ''d'': -0.56, ''d_0'': 1.6295499532821565e-11,
      ''m_1'': 0.1593017578125, ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}'
  - constant-name: colour.models.jzazbz.CONSTANTS_JZAZBZ_SAFDAR2021
    type-name: Structure
    value: '{''b'': 1.15, ''g'': 0.66, ''d'': -0.56, ''d_0'': 3.7035226210190005e-11,
      ''m_1'': 0.1593017578125, ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}'
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.41478972,  0.579999  ,  0.014648  ],
             [-0.20151   ,  1.120649  ,  0.0531008 ],
             [-0.0166008 ,  0.2648    ,  0.6684799 ]])
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.92422644, -1.00479231,  0.0376514 ],
             [ 0.35031676,  0.72648119, -0.06538442],
             [-0.09098281, -0.31272829,  1.52276656]])
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_LMS_P_TO_IZAZBZ_SAFDAR2017
    type-name: ndarray
    value: |-
      array([[ 0.5     ,  0.5     ,  0.      ],
             [ 3.524   , -4.066708,  0.542708],
             [ 0.199076,  1.096799, -1.295875]])
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_IZAZBZ_TO_LMS_P_SAFDAR2017
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.13860504,  0.05804732],
             [ 1.        , -0.13860504, -0.05804732],
             [ 1.        , -0.09601924, -0.8118919 ]])
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_LMS_P_TO_IZAZBZ_SAFDAR2021
    type-name: ndarray
    value: |-
      array([[ 0.      ,  1.      ,  0.      ],
             [ 3.524   , -4.066708,  0.542708],
             [ 0.199076,  1.096799, -1.295875]])
  - constant-name: colour.models.jzazbz.MATRIX_JZAZBZ_IZAZBZ_TO_LMS_P_SAFDAR2021
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.27721009,  0.11609463],
             [ 1.        ,  0.        ,  0.        ],
             [ 1.        ,  0.0425858 , -0.75384458]])
  - constant-name: colour.models.jzazbz.IZAZBZ_METHODS
    type-name: tuple
    value: ('Safdar 2017', 'Safdar 2021', 'ZCAM')
  - constant-name: colour.models.oklab.MATRIX_1_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.81893301,  0.36186674, -0.12885971],
             [ 0.03298454,  0.92931187,  0.03614564],
             [ 0.0482003 ,  0.26436627,  0.63385171]])
  - constant-name: colour.models.oklab.MATRIX_1_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.22701385, -0.55779998,  0.28125615],
             [-0.04058018,  1.11225687, -0.07167668],
             [-0.07638128, -0.42148198,  1.58616322]])
  - constant-name: colour.models.oklab.MATRIX_2_LMS_TO_LAB
    type-name: ndarray
    value: |-
      array([[ 0.21045426,  0.79361779, -0.00407205],
             [ 1.9779985 , -2.42859221,  0.45059371],
             [ 0.02590404,  0.78277177, -0.80867577]])
  - constant-name: colour.models.oklab.MATRIX_2_LAB_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.39633779,  0.21580376],
             [ 1.00000001, -0.10556134, -0.06385417],
             [ 1.00000005, -0.08948418, -1.29148554]])
  - constant-name: colour.models.prolab.MATRIX_Q
    type-name: ndarray
    value: |-
      array([[  75.54  ,  486.66  ,  167.39  ,    0.    ],
             [ 617.72  , -595.45  ,  -22.27  ,    0.    ],
             [  48.34  ,  194.94  , -243.28  ,    0.    ],
             [   0.7554,    3.8666,    1.6739, ...
  - constant-name: colour.models.prolab.MATRIX_INVERSE_Q
    type-name: ndarray
    value: |-
      array([[  1.37063282e-03,   1.38738203e-03,   8.16068851e-04,
                0.00000000e+00],
             [  1.37063282e-03,  -2.43154854e-04,   9.65329195e-04,
                0.00000000e+00],
             [  1.37063282e-...
  - constant-name: colour.models.ragoo2021.MATRIX_IPT_XYZ_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.4321,  0.6906, -0.093 ],
             [-0.1793,  1.1458,  0.0226],
             [ 0.0631,  0.1532,  0.7226]])
  - constant-name: colour.models.ragoo2021.MATRIX_IPT_LMS_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.80808907, -1.12559776,  0.26790865],
             [ 0.28725347,  0.69759246,  0.0151522 ],
             [-0.21879   , -0.0496069 ,  1.35728432]])
  - constant-name: colour.models.ragoo2021.MATRIX_IPT_LMS_P_TO_IPT
    type-name: ndarray
    value: |-
      array([[ 0.3037,  0.6688,  0.0276],
             [ 3.9247, -4.7339,  0.8093],
             [ 1.5932, -0.5205, -1.0727]])
  - constant-name: colour.models.ragoo2021.MATRIX_IPT_IPT_TO_LMS_P
    type-name: ndarray
    value: |-
      array([[ 0.99988723,  0.12783032,  0.12216833],
             [ 0.99990673, -0.06722854, -0.0249936 ],
             [ 0.99987776,  0.22247761, -0.73865223]])
  - constant-name: colour.models.rgb.BT2100_HLG_EOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_BT2100_HLG_1 at
      0x7b934bad2d40>, ''ITU-R BT.2100-2'': <function eotf_BT2100_HLG_2 at 0x7b934bad2de0>})'
  - constant-name: colour.models.rgb.BT2100_HLG_EOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_inverse_BT2100_HLG_1
      at 0x7b934bad2f20>, ''ITU-R BT.2100-2'': <function eotf_inverse_BT2100_HLG_2
      at 0x7b934bad2fc0>})'
  - constant-name: colour.models.rgb.BT2100_HLG_OOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_BT2100_HLG_1 at
      0x7b934bad3100>, ''ITU-R BT.2100-2'': <function ootf_BT2100_HLG_2 at 0x7b934bad31a0>})'
  - constant-name: colour.models.rgb.BT2100_HLG_OOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_inverse_BT2100_HLG_1
      at 0x7b934bad32e0>, ''ITU-R BT.2100-2'': <function ootf_inverse_BT2100_HLG_2
      at 0x7b934bad3380>})'
  - constant-name: colour.models.rgb.LOG3G10_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_Log3G10_v1 at 0x7b934bad9580>,
      ''v2'': <function log_encoding_Log3G10_v2 at 0x7b934bad96c0>, ''v3'': <function
      log_encoding_Log3G10_v3 at 0x7b934bad9800>})'
  - constant-name: colour.models.rgb.LOG3G10_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_Log3G10_v1 at 0x7b934bad9620>,
      ''v2'': <function log_decoding_Log3G10_v2 at 0x7b934bad9760>, ''v3'': <function
      log_decoding_Log3G10_v3 at 0x7b934bad98a0>})'
  - constant-name: colour.models.rgb.LOG_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_encoding_ACEScc at 0x7b934baa4ea0>,
      ''ACEScct'': <function log_encoding_ACEScct at 0x7b934baa4fe0>, ''ACESproxy'':
      <function log_encoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.rgb.LOG_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_decoding_ACEScc at 0x7b934baa4f40>,
      ''ACEScct'': <function log_decoding_ACEScct at 0x7b934baa5080>, ''ACESproxy'':
      <function log_decoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.rgb.OETFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_ARIBSTDB67 at 0x7b934baa4220>,
      ''Blackmagic Film Generation 5'': <function oetf_BlackmagicFilmGeneration5 at
      0x7b934baa5c60>, ''DaVinci Intermediate'': <fu...'
  - constant-name: colour.models.rgb.OETF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_inverse_ARIBSTDB67
      at 0x7b934baa5620>, ''Blackmagic Film Generation 5'': <function oetf_inverse_BlackmagicFilmGeneration5
      at 0x7b934baa5d00>, ''DaVinci In...'
  - constant-name: colour.models.rgb.EOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_DCDM at 0x7b934baa74c0>, ''DICOM
      GSDF'': <function eotf_DICOMGSDF at 0x7b934baa77e0>, ''ITU-R BT.1886'': <function
      eotf_BT1886 at 0x7b934bad16c0>, ''ITU-R BT.2100 H...'
  - constant-name: colour.models.rgb.EOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_inverse_DCDM at 0x7b934baa7420>,
      ''DICOM GSDF'': <function eotf_inverse_DICOMGSDF at 0x7b934baa7740>, ''ITU-R
      BT.1886'': <function eotf_inverse_BT1886 at 0x7b934ba...'
  - constant-name: colour.models.rgb.CCTF_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=0.45454545454545453), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>,...'
  - constant-name: colour.models.rgb.CCTF_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=2.2), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>, exponent=2.4), ...'
  - constant-name: colour.models.rgb.OOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_BT2100_HLG at
      0x7b934bad3240>, ''ITU-R BT.2100 PQ'': <function ootf_BT2100_PQ at 0x7b934bad2980>})'
  - constant-name: colour.models.rgb.OOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_inverse_BT2100_HLG
      at 0x7b934bad3420>, ''ITU-R BT.2100 PQ'': <function ootf_inverse_BT2100_PQ at
      0x7b934bad2a20>})'
  - constant-name: colour.models.rgb.RGB_COLOURSPACES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ACES2065-1': RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ACES2065_1
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00000000e-04,  -7.70000000e-02]],
          ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ACESCC
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScc',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ACESCCT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScct',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ACESPROXY
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACESproxy',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
         ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ACESCG
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScg',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ADOBE_RGB1998
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe RGB (1998)',
                      [[ 0.64,  0.33],
                       [ 0.21,  0.71],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ADOBE_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe Wide Gamut RGB',
                      [[ 0.7347,  0.2653],
                       [ 0.1152,  0.8264],
                       [ 0.1566,  0.0177]],
                      [ 0.3457,  0.3585],
                  ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 3',
                      [[ 0.684 ,  0.313 ],
                       [ 0.221 ,  0.848 ],
                       [ 0.0861, -0.102 ]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 4',
                      [[ 0.7347,  0.2653],
                       [ 0.1424,  0.8576],
                       [ 0.0991, -0.0308]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_APPLE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Apple RGB',
                      [[ 0.625,  0.34 ],
                       [ 0.28 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
            ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BEST_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Best RGB',
                      [[ 0.73519164,  0.26480836],
                       [ 0.21533613,  0.77415966],
                       [ 0.13012295,  0.03483607]],
                      [ 0.3457,  0.3585],
      ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BETA_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Beta RGB',
                      [[ 0.6888,  0.3112],
                       [ 0.1986,  0.7551],
                       [ 0.1265,  0.0352]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BLACKMAGIC_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Blackmagic Wide Gamut',
                      [[ 0.7177215,  0.3171181],
                       [ 0.228041 ,  0.861569 ],
                       [ 0.1005841, -0.0820452]],
                      [ 0.312717 , ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BT470_525
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 525',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
         ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BT470_625
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 625',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
         ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BT709
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.709',
                      [[ 0.64,  0.33],
                       [ 0.3 ,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_BT2020
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.2020',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_CIE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('CIE RGB',
                      [[ 0.73474284,  0.26525716],
                       [ 0.27377903,  0.7174777 ],
                       [ 0.16655563,  0.00891073]],
                      [ 0.33333333,  0.3333...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_CINEMA_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Cinema Gamut',
                      [[ 0.74,  0.27],
                       [ 0.17,  1.14],
                       [ 0.08, -0.1 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_COLOR_MATCH_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ColorMatch RGB',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.15 ,  0.075]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DAVINCI_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DaVinci Wide Gamut',
                      [[ 0.8   ,  0.313 ],
                       [ 0.1682,  0.9877],
                       [ 0.079 , -0.1155]],
                      [ 0.3127,  0.329 ],
                    ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DCDM_XYZ
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCDM XYZ',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.33333333,  0.33333333],
                      'E',
                      [[ ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DCI_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.314,  0.351],
                      'DCI-P3',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DCI_P3_P
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3-P',
                      [[ 0.74,  0.27],
                       [ 0.22,  0.78],
                       [ 0.09, -0.09]],
                      [ 0.314,  0.351],
                      'DCI-P3',
                  ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DISPLAY_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Display P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DJI_D_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DJI D-Gamut',
                      [[ 0.71,  0.31],
                       [ 0.21,  0.88],
                       [ 0.09, -0.08]],
                      [ 0.3127,  0.329 ],
                      'D65',
                ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DON_RGB_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Don RGB 4',
                      [[ 0.69612069,  0.29956897],
                       [ 0.21468298,  0.76529477],
                       [ 0.12993763,  0.03534304]],
                      [ 0.3457,  0.3585],...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ECI_RGB_V2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ECI RGB v2',
                      [[ 0.67010309,  0.32989691],
                       [ 0.20990566,  0.70990566],
                       [ 0.14006179,  0.08032956]],
                      [ 0.3457,  0.3585]...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_EBU_3213_E
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('EBU Tech. 3213-E',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.313,  0.329],
                      'D65',
             ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_EKTA_SPACE_PS_5
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Ekta Space PS 5',
                      [[ 0.69473684,  0.30526316],
                       [ 0.26      ,  0.7       ],
                       [ 0.10972851,  0.00452489]],
                      [ 0.3457,  0....
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_FILMLIGHT_E_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('FilmLight E-Gamut',
                      [[ 0.8   ,  0.3177],
                       [ 0.18  ,  0.9   ],
                       [ 0.065 , -0.0805]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_H273_GENERIC_FILM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - Generic Film',
                      [[ 0.681,  0.319],
                       [ 0.243,  0.692],
                       [ 0.145,  0.049]],
                      [ 0.31 ,  0.316],
                    ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_H273_22_UNSPECIFIED
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - 22 Unspecified',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.155,  0.077]],
                      [ 0.3127,  0.329 ],
                ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_PROTUNE_NATIVE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Protune Native',
                      [[ 0.69848046,  0.19302645],
                       [ 0.32955538,  1.02459662],
                       [ 0.10844263, -0.03467857]],
                      [ 0.3127,  0.3...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_MAX_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Max RGB',
                      [[ 0.73413379,  0.26586621],
                       [ 0.10039113,  0.89960887],
                       [ 0.03621495,  0.        ]],
                      [ 0.3457,  0.3585],
       ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_N_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('N-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_P3_D65
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('P3-D65',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_PAL_SECAM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Pal/Secam',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
                  ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RED_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor',
                      [[ 0.70105856,  0.33018098],
                       [ 0.29881132,  0.62516925],
                       [ 0.13503868,  0.03526178]],
                      [ 0.3127,  0.329 ],
      ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RED_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor2',
                      [[ 0.89740722,  0.33077623],
                       [ 0.29602209,  0.68463555],
                       [ 0.09979951, -0.02300051]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RED_COLOR_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor3',
                      [[ 0.70259866,  0.33018559],
                       [ 0.29578224,  0.68974826],
                       [ 0.11109053, -0.00433232]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RED_COLOR_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor4',
                      [[ 0.70259815,  0.3301851 ],
                       [ 0.29578233,  0.68974825],
                       [ 0.14445924,  0.05083772]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DRAGON_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor',
                      [[ 0.75865589,  0.33035535],
                       [ 0.29492362,  0.70805324],
                       [ 0.0859616 , -0.04587944]],
                      [ 0.3127,  0.329 ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_DRAGON_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor2',
                      [[ 0.75865621,  0.33035584],
                       [ 0.29492389,  0.70805336],
                       [ 0.14416873,  0.05035738]],
                      [ 0.3127,  0.329...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RED_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDWideGamutRGB',
                      [[ 0.780308,  0.304253],
                       [ 0.121595,  1.493994],
                       [ 0.095612, -0.084589]],
                      [ 0.3127,  0.329 ],
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ROMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ROMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('RIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_ERIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ERIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_PROPHOTO_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ProPhoto RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
        ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_PLASA_ANSI_E154
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('PLASA ANSI E1.54',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]]...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_RUSSELL_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Russell RGB',
                      [[ 0.69,  0.31],
                       [ 0.18,  0.77],
                       [ 0.1 ,  0.02]],
                      [ 0.33243,  0.34744],
                      'D55',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_SHARP_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Sharp RGB',
                      [[ 0.6898,  0.3206],
                       [ 0.0736,  0.9003],
                       [ 0.1166,  0.0374]],
                      [ 0.33333333,  0.33333333],
                     ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_SMPTE_240M
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE 240M',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_SMPTE_C
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE C',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_NTSC1953
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1953)',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
                ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_NTSC1987
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1987)',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
          ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_S_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
             ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3.Cine',
                      [[ 0.766,  0.275],
                       [ 0.225,  0.8  ],
                       [ 0.089, -0.087]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_VENICE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3',
                      [[ 0.74046426,  0.27936437],
                       [ 0.08924115,  0.89380953],
                       [ 0.11048824, -0.05257933]],
                      [ 0.3127,  0....
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_VENICE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3.Cine',
                      [[ 0.77590187,  0.27450239],
                       [ 0.1886829 ,  0.82868494],
                       [ 0.10133738, -0.08918752]],
                      [ 0.3127...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_V_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('V-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.165,  0.84 ],
                       [ 0.1  , -0.03 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_XTREME_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Xtreme RGB',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.3457,  0.3585],
                      'D50',
                      [[ 0.96...
  - constant-name: colour.models.rgb.RGB_COLOURSPACE_F_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('F-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.WEIGHTS_YCBCR
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.601'': array([ 0.299,  0.114]), ''ITU-R BT.709'':
      array([ 0.2126,  0.0722]), ''ITU-R BT.2020'': array([ 0.2627,  0.0593]), ''SMPTE-240M'':
      array([ 0.2122,  0.0865])})'
  - constant-name: colour.models.rgb.COLOUR_PRIMARIES_ITUTH273
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.rgb.TRANSFER_CHARACTERISTICS_ITUTH273
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.rgb.MATRIX_COEFFICIENTS_ITUTH273
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACES
    type-name: LazyCanonicalMapping
    value: |-
      LazyCanonicalMapping({'ACES2065-1': RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ACES2065_1
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00000000e-04,  -7.70000000e-02]],
          ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ACESCC
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScc',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ACESCCT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScct',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ACESPROXY
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACESproxy',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
         ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ACESCG
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScg',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ADOBE_RGB1998
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe RGB (1998)',
                      [[ 0.64,  0.33],
                       [ 0.21,  0.71],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ADOBE_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe Wide Gamut RGB',
                      [[ 0.7347,  0.2653],
                       [ 0.1152,  0.8264],
                       [ 0.1566,  0.0177]],
                      [ 0.3457,  0.3585],
                  ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 3',
                      [[ 0.684 ,  0.313 ],
                       [ 0.221 ,  0.848 ],
                       [ 0.0861, -0.102 ]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 4',
                      [[ 0.7347,  0.2653],
                       [ 0.1424,  0.8576],
                       [ 0.0991, -0.0308]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_APPLE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Apple RGB',
                      [[ 0.625,  0.34 ],
                       [ 0.28 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
            ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BEST_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Best RGB',
                      [[ 0.73519164,  0.26480836],
                       [ 0.21533613,  0.77415966],
                       [ 0.13012295,  0.03483607]],
                      [ 0.3457,  0.3585],
      ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BETA_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Beta RGB',
                      [[ 0.6888,  0.3112],
                       [ 0.1986,  0.7551],
                       [ 0.1265,  0.0352]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BLACKMAGIC_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Blackmagic Wide Gamut',
                      [[ 0.7177215,  0.3171181],
                       [ 0.228041 ,  0.861569 ],
                       [ 0.1005841, -0.0820452]],
                      [ 0.312717 , ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BT470_525
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 525',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
         ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BT470_625
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 625',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
         ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BT709
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.709',
                      [[ 0.64,  0.33],
                       [ 0.3 ,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_BT2020
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.2020',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_H273_GENERIC_FILM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - Generic Film',
                      [[ 0.681,  0.319],
                       [ 0.243,  0.692],
                       [ 0.145,  0.049]],
                      [ 0.31 ,  0.316],
                    ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_H273_22_UNSPECIFIED
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - 22 Unspecified',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.155,  0.077]],
                      [ 0.3127,  0.329 ],
                ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_CIE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('CIE RGB',
                      [[ 0.73474284,  0.26525716],
                       [ 0.27377903,  0.7174777 ],
                       [ 0.16655563,  0.00891073]],
                      [ 0.33333333,  0.3333...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_CINEMA_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Cinema Gamut',
                      [[ 0.74,  0.27],
                       [ 0.17,  1.14],
                       [ 0.08, -0.1 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_COLOR_MATCH_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ColorMatch RGB',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.15 ,  0.075]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DAVINCI_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DaVinci Wide Gamut',
                      [[ 0.8   ,  0.313 ],
                       [ 0.1682,  0.9877],
                       [ 0.079 , -0.1155]],
                      [ 0.3127,  0.329 ],
                    ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DCDM_XYZ
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCDM XYZ',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.33333333,  0.33333333],
                      'E',
                      [[ ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DCI_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.314,  0.351],
                      'DCI-P3',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DCI_P3_P
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3-P',
                      [[ 0.74,  0.27],
                       [ 0.22,  0.78],
                       [ 0.09, -0.09]],
                      [ 0.314,  0.351],
                      'DCI-P3',
                  ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DISPLAY_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Display P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DJI_D_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DJI D-Gamut',
                      [[ 0.71,  0.31],
                       [ 0.21,  0.88],
                       [ 0.09, -0.08]],
                      [ 0.3127,  0.329 ],
                      'D65',
                ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_EBU_3213_E
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('EBU Tech. 3213-E',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.313,  0.329],
                      'D65',
             ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DON_RGB_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Don RGB 4',
                      [[ 0.69612069,  0.29956897],
                       [ 0.21468298,  0.76529477],
                       [ 0.12993763,  0.03534304]],
                      [ 0.3457,  0.3585],...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ECI_RGB_V2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ECI RGB v2',
                      [[ 0.67010309,  0.32989691],
                       [ 0.20990566,  0.70990566],
                       [ 0.14006179,  0.08032956]],
                      [ 0.3457,  0.3585]...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_EKTA_SPACE_PS_5
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Ekta Space PS 5',
                      [[ 0.69473684,  0.30526316],
                       [ 0.26      ,  0.7       ],
                       [ 0.10972851,  0.00452489]],
                      [ 0.3457,  0....
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_FILMLIGHT_E_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('FilmLight E-Gamut',
                      [[ 0.8   ,  0.3177],
                       [ 0.18  ,  0.9   ],
                       [ 0.065 , -0.0805]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_PROTUNE_NATIVE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Protune Native',
                      [[ 0.69848046,  0.19302645],
                       [ 0.32955538,  1.02459662],
                       [ 0.10844263, -0.03467857]],
                      [ 0.3127,  0.3...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_MAX_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Max RGB',
                      [[ 0.73413379,  0.26586621],
                       [ 0.10039113,  0.89960887],
                       [ 0.03621495,  0.        ]],
                      [ 0.3457,  0.3585],
       ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_N_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('N-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_P3_D65
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('P3-D65',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_PAL_SECAM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Pal/Secam',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
                  ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RED_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor',
                      [[ 0.70105856,  0.33018098],
                       [ 0.29881132,  0.62516925],
                       [ 0.13503868,  0.03526178]],
                      [ 0.3127,  0.329 ],
      ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RED_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor2',
                      [[ 0.89740722,  0.33077623],
                       [ 0.29602209,  0.68463555],
                       [ 0.09979951, -0.02300051]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RED_COLOR_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor3',
                      [[ 0.70259866,  0.33018559],
                       [ 0.29578224,  0.68974826],
                       [ 0.11109053, -0.00433232]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RED_COLOR_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor4',
                      [[ 0.70259815,  0.3301851 ],
                       [ 0.29578233,  0.68974825],
                       [ 0.14445924,  0.05083772]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DRAGON_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor',
                      [[ 0.75865589,  0.33035535],
                       [ 0.29492362,  0.70805324],
                       [ 0.0859616 , -0.04587944]],
                      [ 0.3127,  0.329 ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_DRAGON_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor2',
                      [[ 0.75865621,  0.33035584],
                       [ 0.29492389,  0.70805336],
                       [ 0.14416873,  0.05035738]],
                      [ 0.3127,  0.329...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RED_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDWideGamutRGB',
                      [[ 0.780308,  0.304253],
                       [ 0.121595,  1.493994],
                       [ 0.095612, -0.084589]],
                      [ 0.3127,  0.329 ],
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ROMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ROMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('RIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_ERIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ERIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_PROPHOTO_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ProPhoto RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
        ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_PLASA_ANSI_E154
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('PLASA ANSI E1.54',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]]...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_RUSSELL_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Russell RGB',
                      [[ 0.69,  0.31],
                       [ 0.18,  0.77],
                       [ 0.1 ,  0.02]],
                      [ 0.33243,  0.34744],
                      'D55',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_SHARP_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Sharp RGB',
                      [[ 0.6898,  0.3206],
                       [ 0.0736,  0.9003],
                       [ 0.1166,  0.0374]],
                      [ 0.33333333,  0.33333333],
                     ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_SMPTE_240M
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE 240M',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_SMPTE_C
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE C',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_NTSC1953
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1953)',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
                ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_NTSC1987
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1987)',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
          ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_S_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
             ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3.Cine',
                      [[ 0.766,  0.275],
                       [ 0.225,  0.8  ],
                       [ 0.089, -0.087]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_VENICE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3',
                      [[ 0.74046426,  0.27936437],
                       [ 0.08924115,  0.89380953],
                       [ 0.11048824, -0.05257933]],
                      [ 0.3127,  0....
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_VENICE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3.Cine',
                      [[ 0.77590187,  0.27450239],
                       [ 0.1886829 ,  0.82868494],
                       [ 0.10133738, -0.08918752]],
                      [ 0.3127...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_V_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('V-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.165,  0.84 ],
                       [ 0.1  , -0.03 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_XTREME_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Xtreme RGB',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.3457,  0.3585],
                      'D50',
                      [[ 0.96...
  - constant-name: colour.models.rgb.datasets.RGB_COLOURSPACE_F_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('F-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.aces.AP0
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  0.00000000e+00,   1.00000000e+00],
             [  1.00000000e-04,  -7.70000000e-02]])
  - constant-name: colour.models.rgb.datasets.aces.AP1
    type-name: ndarray
    value: |-
      array([[ 0.713,  0.293],
             [ 0.165,  0.83 ],
             [ 0.128,  0.044]])
  - constant-name: colour.models.rgb.datasets.aces.WHITEPOINT_NAME_ACES
    type-name: str
    value: '''ACES'''
  - constant-name: colour.models.rgb.datasets.aces.CCS_WHITEPOINT_ACES
    type-name: ndarray
    value: array([ 0.32168,  0.33767])
  - constant-name: colour.models.rgb.datasets.aces.MATRIX_AP0_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  9.52552396e-01,   0.00000000e+00,   9.36786000e-05],
             [  3.43966450e-01,   7.28166097e-01,  -7.21325464e-02],
             [  0.00000000e+00,   0.00000000e+00,   1.00882518e+00]])
  - constant-name: colour.models.rgb.datasets.aces.MATRIX_XYZ_TO_AP0
    type-name: ndarray
    value: |-
      array([[  1.04981102e+00,   0.00000000e+00,  -9.74845000e-05],
             [ -4.95903023e-01,   1.37331305e+00,   9.82400361e-02],
             [  0.00000000e+00,   0.00000000e+00,   9.91252018e-01]])
  - constant-name: colour.models.rgb.datasets.aces.MATRIX_AP1_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.66245418,  0.13400421,  0.15618769],
             [ 0.27222872,  0.67408177,  0.05368952],
             [-0.00557465,  0.00406073,  1.0103391 ]])
  - constant-name: colour.models.rgb.datasets.aces.MATRIX_XYZ_TO_AP1
    type-name: ndarray
    value: |-
      array([[ 1.64102338, -0.32480329, -0.2364247 ],
             [-0.66366286,  1.61533159,  0.01675635],
             [ 0.01172189, -0.00828444,  0.98839486]])
  - constant-name: colour.models.rgb.datasets.aces.RGB_COLOURSPACE_ACES2065_1
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACES2065-1',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  0.00000000e+00,   1.00000000e+00],
                       [  1.00000000e-04,  -7.70000000e-02]],
          ...
  - constant-name: colour.models.rgb.datasets.aces.RGB_COLOURSPACE_ACESCG
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScg',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.datasets.aces.RGB_COLOURSPACE_ACESCC
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScc',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
            ...
  - constant-name: colour.models.rgb.datasets.aces.RGB_COLOURSPACE_ACESCCT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACEScct',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
           ...
  - constant-name: colour.models.rgb.datasets.aces.RGB_COLOURSPACE_ACESPROXY
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ACESproxy',
                      [[ 0.713,  0.293],
                       [ 0.165,  0.83 ],
                       [ 0.128,  0.044]],
                      [ 0.32168,  0.33767],
                      'ACES',
         ...
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.PRIMARIES_ADOBE_RGB1998
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.21,  0.71],
             [ 0.15,  0.06]])
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.WHITEPOINT_NAME_ADOBE_RGB1998
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.CCS_WHITEPOINT_ADOBE_RGB1998
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.MATRIX_ADOBE_RGB1998_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.57667,  0.18556,  0.18823],
             [ 0.29734,  0.62736,  0.07529],
             [ 0.02703,  0.07069,  0.99134]])
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.MATRIX_XYZ_TO_ADOBE_RGB1998
    type-name: ndarray
    value: |-
      array([[ 2.04159, -0.56501, -0.34473],
             [-0.96924,  1.87597,  0.04156],
             [ 0.01344, -0.11836,  1.01517]])
  - constant-name: colour.models.rgb.datasets.adobe_rgb_1998.RGB_COLOURSPACE_ADOBE_RGB1998
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe RGB (1998)',
                      [[ 0.64,  0.33],
                       [ 0.21,  0.71],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.PRIMARIES_ADOBE_WIDE_GAMUT_RGB
    type-name: ndarray
    value: |-
      array([[ 0.7347,  0.2653],
             [ 0.1152,  0.8264],
             [ 0.1566,  0.0177]])
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.WHITEPOINT_NAME_ADOBE_WIDE_GAMUT_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.CCS_WHITEPOINT_ADOBE_WIDE_GAMUT_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.MATRIX_ADOBE_WIDE_GAMUT_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.71650072,  0.10102057,  0.14677439],
             [ 0.25872824,  0.72468231,  0.01658944],
             [ 0.        ,  0.05121182,  0.77389278]])
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.MATRIX_XYZ_TO_ADOBE_WIDE_GAMUT_RGB
    type-name: ndarray
    value: |-
      array([[ 1.46230418, -0.18452564, -0.27338105],
             [-0.52286828,  1.4479884 ,  0.06812617],
             [ 0.03460045, -0.09581963,  1.28766046]])
  - constant-name: colour.models.rgb.datasets.adobe_wide_gamut_rgb.RGB_COLOURSPACE_ADOBE_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Adobe Wide Gamut RGB',
                      [[ 0.7347,  0.2653],
                       [ 0.1152,  0.8264],
                       [ 0.1566,  0.0177]],
                      [ 0.3457,  0.3585],
                  ...
  - constant-name: colour.models.rgb.datasets.apple_rgb.PRIMARIES_APPLE_RGB
    type-name: ndarray
    value: |-
      array([[ 0.625,  0.34 ],
             [ 0.28 ,  0.595],
             [ 0.155,  0.07 ]])
  - constant-name: colour.models.rgb.datasets.apple_rgb.WHITEPOINT_NAME_APPLE_RGB
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.apple_rgb.CCS_WHITEPOINT_APPLE_RGB
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.apple_rgb.MATRIX_APPLE_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.44966162,  0.31625612,  0.18453819],
             [ 0.24461592,  0.67204425,  0.08333983],
             [ 0.02518105,  0.14118577,  0.92269093]])
  - constant-name: colour.models.rgb.datasets.apple_rgb.MATRIX_XYZ_TO_APPLE_RGB
    type-name: ndarray
    value: |-
      array([[ 2.95197848, -1.2896043 , -0.47391531],
             [-1.08508357,  1.99080934,  0.03720168],
             [ 0.08547221, -0.26942971,  1.09102767]])
  - constant-name: colour.models.rgb.datasets.apple_rgb.RGB_COLOURSPACE_APPLE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Apple RGB',
                      [[ 0.625,  0.34 ],
                       [ 0.28 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
            ...
  - constant-name: colour.models.rgb.datasets.arri.PRIMARIES_ARRI_WIDE_GAMUT_3
    type-name: ndarray
    value: |-
      array([[ 0.684 ,  0.313 ],
             [ 0.221 ,  0.848 ],
             [ 0.0861, -0.102 ]])
  - constant-name: colour.models.rgb.datasets.arri.WHITEPOINT_NAME_ARRI_WIDE_GAMUT_3
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.arri.CCS_WHITEPOINT_ARRI_WIDE_GAMUT_3
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.arri.MATRIX_ARRI_WIDE_GAMUT_3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.638008,  0.214704,  0.097744],
             [ 0.291954,  0.823841, -0.115795],
             [ 0.002798, -0.067034,  1.153294]])
  - constant-name: colour.models.rgb.datasets.arri.MATRIX_XYZ_TO_ARRI_WIDE_GAMUT_3
    type-name: ndarray
    value: |-
      array([[ 1.789066, -0.482534, -0.200076],
             [-0.639849,  1.3964  ,  0.194432],
             [-0.041532,  0.082335,  0.878868]])
  - constant-name: colour.models.rgb.datasets.arri.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 3',
                      [[ 0.684 ,  0.313 ],
                       [ 0.221 ,  0.848 ],
                       [ 0.0861, -0.102 ]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.arri.PRIMARIES_ARRI_WIDE_GAMUT_4
    type-name: ndarray
    value: |-
      array([[ 0.7347,  0.2653],
             [ 0.1424,  0.8576],
             [ 0.0991, -0.0308]])
  - constant-name: colour.models.rgb.datasets.arri.WHITEPOINT_NAME_ARRI_WIDE_GAMUT_4
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.arri.CCS_WHITEPOINT_ARRI_WIDE_GAMUT_4
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.arri.MATRIX_ARRI_WIDE_GAMUT_4_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.70485832,  0.1297603 ,  0.11583731],
             [ 0.25452418,  0.78147773, -0.03600191],
             [ 0.        ,  0.        ,  1.08905775]])
  - constant-name: colour.models.rgb.datasets.arri.MATRIX_XYZ_TO_ARRI_WIDE_GAMUT_4
    type-name: ndarray
    value: |-
      array([[ 1.50921547, -0.25059735, -0.16881148],
             [-0.49154545,  1.36124555,  0.09728294],
             [ 0.        ,  0.        ,  0.91822495]])
  - constant-name: colour.models.rgb.datasets.arri.RGB_COLOURSPACE_ARRI_WIDE_GAMUT_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ARRI Wide Gamut 4',
                      [[ 0.7347,  0.2653],
                       [ 0.1424,  0.8576],
                       [ 0.0991, -0.0308]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.best_rgb.PRIMARIES_BEST_RGB
    type-name: ndarray
    value: |-
      array([[ 0.73519164,  0.26480836],
             [ 0.21533613,  0.77415966],
             [ 0.13012295,  0.03483607]])
  - constant-name: colour.models.rgb.datasets.best_rgb.WHITEPOINT_NAME_BEST_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.best_rgb.CCS_WHITEPOINT_BEST_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.best_rgb.MATRIX_BEST_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.6318944 ,  0.20538793,  0.12701335],
             [ 0.22760177,  0.73839465,  0.03400357],
             [ 0.        ,  0.01001892,  0.81508568]])
  - constant-name: colour.models.rgb.datasets.best_rgb.MATRIX_XYZ_TO_BEST_RGB
    type-name: ndarray
    value: |-
      array([[ 1.75737181, -0.48538023, -0.25359913],
             [-0.54199672,  1.50475404,  0.02168337],
             [ 0.00666215, -0.01849623,  1.22659836]])
  - constant-name: colour.models.rgb.datasets.best_rgb.RGB_COLOURSPACE_BEST_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Best RGB',
                      [[ 0.73519164,  0.26480836],
                       [ 0.21533613,  0.77415966],
                       [ 0.13012295,  0.03483607]],
                      [ 0.3457,  0.3585],
      ...
  - constant-name: colour.models.rgb.datasets.beta_rgb.PRIMARIES_BETA_RGB
    type-name: ndarray
    value: |-
      array([[ 0.6888,  0.3112],
             [ 0.1986,  0.7551],
             [ 0.1265,  0.0352]])
  - constant-name: colour.models.rgb.datasets.beta_rgb.WHITEPOINT_NAME_BETA_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.beta_rgb.CCS_WHITEPOINT_BETA_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.beta_rgb.MATRIX_BETA_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.71355903e-01,   1.74572381e-01,   1.18367393e-01],
             [  3.03318753e-01,   6.63744233e-01,   3.29370136e-02],
             [  5.41053122e-17,   4.06983949e-02,   7.84406208e-01]])
  - constant-name: colour.models.rgb.datasets.beta_rgb.MATRIX_XYZ_TO_BETA_RGB
    type-name: ndarray
    value: |-
      array([[ 1.68297071, -0.42817109, -0.23598255],
             [-0.77107152,  1.70666472,  0.04469277],
             [ 0.04000653, -0.08854917,  1.27253082]])
  - constant-name: colour.models.rgb.datasets.beta_rgb.RGB_COLOURSPACE_BETA_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Beta RGB',
                      [[ 0.6888,  0.3112],
                       [ 0.1986,  0.7551],
                       [ 0.1265,  0.0352]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.datasets.blackmagic_design.PRIMARIES_BLACKMAGIC_WIDE_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.7177215,  0.3171181],
             [ 0.228041 ,  0.861569 ],
             [ 0.1005841, -0.0820452]])
  - constant-name: colour.models.rgb.datasets.blackmagic_design.WHITEPOINT_NAME_BLACKMAGIC_WIDE_GAMUT
    type-name: str
    value: '''Blackmagic Wide Gamut'''
  - constant-name: colour.models.rgb.datasets.blackmagic_design.CCS_WHITEPOINT_BLACKMAGIC_WIDE_GAMUT
    type-name: ndarray
    value: array([ 0.312717 ,  0.3290312])
  - constant-name: colour.models.rgb.datasets.blackmagic_design.MATRIX_BLACKMAGIC_WIDE_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.60653 ,  0.220408,  0.123479],
             [ 0.267989,  0.832731, -0.10072 ],
             [-0.029442, -0.086611,  1.204861]])
  - constant-name: colour.models.rgb.datasets.blackmagic_design.MATRIX_XYZ_TO_BLACKMAGIC_WIDE_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.866382, -0.518397, -0.23461 ],
             [-0.600342,  1.378149,  0.176732],
             [ 0.002452,  0.0864  ,  0.836943]])
  - constant-name: colour.models.rgb.datasets.blackmagic_design.RGB_COLOURSPACE_BLACKMAGIC_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Blackmagic Wide Gamut',
                      [[ 0.7177215,  0.3171181],
                       [ 0.228041 ,  0.861569 ],
                       [ 0.1005841, -0.0820452]],
                      [ 0.312717 , ...
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.PRIMARIES_CINEMA_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.74,  0.27],
             [ 0.17,  1.14],
             [ 0.08, -0.1 ]])
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.WHITEPOINT_NAME_CINEMA_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.CCS_WHITEPOINT_CINEMA_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.MATRIX_CINEMA_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.71604965,  0.12968348,  0.1047228 ],
             [ 0.26126136,  0.86964215, -0.1309035 ],
             [-0.00967635, -0.23648164,  1.33521573]])
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.MATRIX_XYZ_TO_CINEMA_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.48981827, -0.2608959 , -0.14242652],
             [-0.45816657,  1.26162778,  0.15962363],
             [-0.07034967,  0.22155767,  0.7761816 ]])
  - constant-name: colour.models.rgb.datasets.canon_cinema_gamut.RGB_COLOURSPACE_CINEMA_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Cinema Gamut',
                      [[ 0.74,  0.27],
                       [ 0.17,  1.14],
                       [ 0.08, -0.1 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.cie_rgb.PRIMARIES_CIE_RGB
    type-name: ndarray
    value: |-
      array([[ 0.73474284,  0.26525716],
             [ 0.27377903,  0.7174777 ],
             [ 0.16655563,  0.00891073]])
  - constant-name: colour.models.rgb.datasets.cie_rgb.WHITEPOINT_NAME_CIE_RGB
    type-name: str
    value: '''E'''
  - constant-name: colour.models.rgb.datasets.cie_rgb.CCS_WHITEPOINT_CIE_RGB
    type-name: ndarray
    value: array([ 0.33333333,  0.33333333])
  - constant-name: colour.models.rgb.datasets.cie_rgb.MATRIX_CIE_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.49  ,  0.31  ,  0.2   ],
             [ 0.1769,  0.8124,  0.0107],
             [ 0.    ,  0.0099,  0.9901]])
  - constant-name: colour.models.rgb.datasets.cie_rgb.MATRIX_XYZ_TO_CIE_RGB
    type-name: ndarray
    value: |-
      array([[ 2.36449012, -0.89655263, -0.46793749],
             [-0.51493525,  1.42633279,  0.08860245],
             [ 0.00514883, -0.01426189,  1.00911305]])
  - constant-name: colour.models.rgb.datasets.cie_rgb.RGB_COLOURSPACE_CIE_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('CIE RGB',
                      [[ 0.73474284,  0.26525716],
                       [ 0.27377903,  0.7174777 ],
                       [ 0.16655563,  0.00891073]],
                      [ 0.33333333,  0.3333...
  - constant-name: colour.models.rgb.datasets.color_match_rgb.PRIMARIES_COLOR_MATCH_RGB
    type-name: ndarray
    value: |-
      array([[ 0.63 ,  0.34 ],
             [ 0.295,  0.605],
             [ 0.15 ,  0.075]])
  - constant-name: colour.models.rgb.datasets.color_match_rgb.WHITEPOINT_NAME_COLOR_MATCH_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.color_match_rgb.CCS_WHITEPOINT_COLOR_MATCH_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.color_match_rgb.MATRIX_COLOR_MATCH_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.5094668 ,  0.32087954,  0.13394933],
             [ 0.27495034,  0.658075  ,  0.06697467],
             [ 0.02426032,  0.10877273,  0.69207155]])
  - constant-name: colour.models.rgb.datasets.color_match_rgb.MATRIX_XYZ_TO_COLOR_MATCH_RGB
    type-name: ndarray
    value: |-
      array([[ 2.64164976, -1.22313179, -0.39291946],
             [-1.11207173,  2.05919502,  0.01596275],
             [ 0.08218196, -0.28076676,  1.45620209]])
  - constant-name: colour.models.rgb.datasets.color_match_rgb.RGB_COLOURSPACE_COLOR_MATCH_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ColorMatch RGB',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.15 ,  0.075]],
                      [ 0.3457,  0.3585],
                      'D50',
       ...
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.PRIMARIES_DAVINCI_WIDE_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.8   ,  0.313 ],
             [ 0.1682,  0.9877],
             [ 0.079 , -0.1155]])
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.WHITEPOINT_NAME_DAVINCI_WIDE_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.CCS_WHITEPOINT_DAVINCI_WIDE_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.MATRIX_DAVINCI_WIDE_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.70062239,  0.14877482,  0.10105872],
             [ 0.27411851,  0.8736319 , -0.14775041],
             [-0.09896291, -0.13789533,  1.32591599]])
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.MATRIX_XYZ_TO_DAVINCI_WIDE_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.51667204, -0.28147805, -0.14696363],
             [-0.4649171 ,  1.25142378,  0.17488461],
             [ 0.06484905,  0.10913934,  0.76141462]])
  - constant-name: colour.models.rgb.datasets.davinci_wide_gamut.RGB_COLOURSPACE_DAVINCI_WIDE_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DaVinci Wide Gamut',
                      [[ 0.8   ,  0.313 ],
                       [ 0.1682,  0.9877],
                       [ 0.079 , -0.1155]],
                      [ 0.3127,  0.329 ],
                    ...
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.PRIMARIES_DCDM_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.,  0.],
             [ 0.,  1.],
             [ 0.,  0.]])
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.WHITEPOINT_NAME_DCDM_XYZ
    type-name: str
    value: '''E'''
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.CCS_WHITEPOINT_DCDM_XYZ
    type-name: ndarray
    value: array([ 0.33333333,  0.33333333])
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.MATRIX_DCDM_XYZ_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]])
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.MATRIX_XYZ_TO_DCDM_XYZ
    type-name: ndarray
    value: |-
      array([[ 1.,  0.,  0.],
             [ 0.,  1.,  0.],
             [ 0.,  0.,  1.]])
  - constant-name: colour.models.rgb.datasets.dcdm_xyz.RGB_COLOURSPACE_DCDM_XYZ
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCDM XYZ',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.33333333,  0.33333333],
                      'E',
                      [[ ...
  - constant-name: colour.models.rgb.datasets.dci_p3.PRIMARIES_DCI_P3
    type-name: ndarray
    value: |-
      array([[ 0.68 ,  0.32 ],
             [ 0.265,  0.69 ],
             [ 0.15 ,  0.06 ]])
  - constant-name: colour.models.rgb.datasets.dci_p3.PRIMARIES_DCI_P3_P
    type-name: ndarray
    value: |-
      array([[ 0.74,  0.27],
             [ 0.22,  0.78],
             [ 0.09, -0.09]])
  - constant-name: colour.models.rgb.datasets.dci_p3.WHITEPOINT_NAME_DCI_P3
    type-name: str
    value: '''DCI-P3'''
  - constant-name: colour.models.rgb.datasets.dci_p3.CCS_WHITEPOINT_DCI_P3
    type-name: ndarray
    value: array([ 0.314,  0.351])
  - constant-name: colour.models.rgb.datasets.dci_p3.MATRIX_DCI_P3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  4.45169816e-01,   2.77134409e-01,   1.72282670e-01],
             [  2.09491678e-01,   7.21595254e-01,   6.89130679e-02],
             [ -3.63410132e-17,   4.70605601e-02,   9.07355394e-01]])
  - constant-name: colour.models.rgb.datasets.dci_p3.MATRIX_XYZ_TO_DCI_P3
    type-name: ndarray
    value: |-
      array([[ 2.72539403, -1.01800301, -0.4401632 ],
             [-0.79516803,  1.68973205,  0.02264719],
             [ 0.04124189, -0.08763902,  1.10092938]])
  - constant-name: colour.models.rgb.datasets.dci_p3.MATRIX_DCI_P3_P_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.55907356,  0.24893595,  0.08657739],
             [ 0.2039863 ,  0.88259109, -0.08657739],
             [-0.00755505,  0.        ,  0.961971  ]])
  - constant-name: colour.models.rgb.datasets.dci_p3.MATRIX_XYZ_TO_DCI_P3_P
    type-name: ndarray
    value: |-
      array([[ 1.99040349, -0.56139586, -0.22966194],
             [-0.45849279,  1.262346  ,  0.15487549],
             [ 0.01563207, -0.00440904,  1.03772867]])
  - constant-name: colour.models.rgb.datasets.dci_p3.RGB_COLOURSPACE_DCI_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.314,  0.351],
                      'DCI-P3',
              ...
  - constant-name: colour.models.rgb.datasets.dci_p3.RGB_COLOURSPACE_DCI_P3_P
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DCI-P3-P',
                      [[ 0.74,  0.27],
                       [ 0.22,  0.78],
                       [ 0.09, -0.09]],
                      [ 0.314,  0.351],
                      'DCI-P3',
                  ...
  - constant-name: colour.models.rgb.datasets.display_p3.PRIMARIES_DISPLAY_P3
    type-name: ndarray
    value: |-
      array([[ 0.68 ,  0.32 ],
             [ 0.265,  0.69 ],
             [ 0.15 ,  0.06 ]])
  - constant-name: colour.models.rgb.datasets.display_p3.WHITEPOINT_NAME_DISPLAY_P3
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.display_p3.CCS_WHITEPOINT_DISPLAY_P3
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.display_p3.MATRIX_DISPLAY_P3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  4.86570949e-01,   2.65667693e-01,   1.98217285e-01],
             [  2.28974564e-01,   6.91738522e-01,   7.92869141e-02],
             [ -3.97207552e-17,   4.51133819e-02,   1.04394437e+00]])
  - constant-name: colour.models.rgb.datasets.display_p3.MATRIX_XYZ_TO_DISPLAY_P3
    type-name: ndarray
    value: |-
      array([[ 2.49349691, -0.93138362, -0.40271078],
             [-0.82948897,  1.76266406,  0.02362469],
             [ 0.03584583, -0.07617239,  0.95688452]])
  - constant-name: colour.models.rgb.datasets.display_p3.RGB_COLOURSPACE_DISPLAY_P3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Display P3',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.PRIMARIES_DJI_D_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.71,  0.31],
             [ 0.21,  0.88],
             [ 0.09, -0.08]])
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.WHITEPOINT_NAME_DJI_D_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.CCS_WHITEPOINT_DJI_D_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.MATRIX_DJI_D_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.6482,  0.194 ,  0.1082],
             [ 0.283 ,  0.8132, -0.0962],
             [-0.0183, -0.0832,  1.1903]])
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.MATRIX_XYZ_TO_DJI_D_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.7257, -0.4314, -0.1917],
             [-0.6025,  1.3906,  0.1671],
             [-0.0156,  0.0905,  0.8489]])
  - constant-name: colour.models.rgb.datasets.dji_d_gamut.RGB_COLOURSPACE_DJI_D_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DJI D-Gamut',
                      [[ 0.71,  0.31],
                       [ 0.21,  0.88],
                       [ 0.09, -0.08]],
                      [ 0.3127,  0.329 ],
                      'D65',
                ...
  - constant-name: colour.models.rgb.datasets.don_rgb_4.PRIMARIES_DON_RGB_4
    type-name: ndarray
    value: |-
      array([[ 0.69612069,  0.29956897],
             [ 0.21468298,  0.76529477],
             [ 0.12993763,  0.03534304]])
  - constant-name: colour.models.rgb.datasets.don_rgb_4.WHITEPOINT_NAME_DON_RGB_4
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.don_rgb_4.CCS_WHITEPOINT_DON_RGB_4
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.don_rgb_4.MATRIX_DON_RGB_4_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.64631888,  0.19296024,  0.12501655],
             [ 0.27813723,  0.68785827,  0.0340045 ],
             [ 0.00400197,  0.01799629,  0.80310634]])
  - constant-name: colour.models.rgb.datasets.don_rgb_4.MATRIX_XYZ_TO_DON_RGB_4
    type-name: ndarray
    value: |-
      array([[ 1.75819127, -0.48659205, -0.25308814],
             [-0.7112839 ,  1.65225302,  0.04076449],
             [ 0.00717743, -0.03459953,  1.24551283]])
  - constant-name: colour.models.rgb.datasets.don_rgb_4.RGB_COLOURSPACE_DON_RGB_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Don RGB 4',
                      [[ 0.69612069,  0.29956897],
                       [ 0.21468298,  0.76529477],
                       [ 0.12993763,  0.03534304]],
                      [ 0.3457,  0.3585],...
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.PRIMARIES_EBU_3213_E
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.29,  0.6 ],
             [ 0.15,  0.06]])
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.WHITEPOINT_NAME_EBU_3213_E
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.CCS_WHITEPOINT_EBU_3213_E
    type-name: ndarray
    value: array([ 0.313,  0.329])
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.MATRIX_EBU_3213_E_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.43194331,  0.341235  ,  0.17818948],
             [ 0.22272077,  0.70600344,  0.07127579],
             [ 0.02024734,  0.12943396,  0.93846459]])
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.MATRIX_XYZ_TO_EBU_3213_E_RGB
    type-name: ndarray
    value: |-
      array([[ 3.05350675, -1.38890786, -0.47429309],
             [-0.97013781,  1.87769818,  0.04159339],
             [ 0.06792306, -0.22900835,  1.07006656]])
  - constant-name: colour.models.rgb.datasets.ebu_3213_e.RGB_COLOURSPACE_EBU_3213_E
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('EBU Tech. 3213-E',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.313,  0.329],
                      'D65',
             ...
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.PRIMARIES_ECI_RGB_V2
    type-name: ndarray
    value: |-
      array([[ 0.67010309,  0.32989691],
             [ 0.20990566,  0.70990566],
             [ 0.14006179,  0.08032956]])
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.WHITEPOINT_NAME_ECI_RGB_V
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.CCS_WHITEPOINT_ECI_RGB_V2
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.MATRIX_ECI_RGB_V2_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.65032438,  0.177949  ,  0.13602229],
             [ 0.3201597 ,  0.60182752,  0.07801279],
             [ 0.        ,  0.06798052,  0.75712409]])
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.MATRIX_XYZ_TO_ECI_RGB_V2
    type-name: ndarray
    value: |-
      array([[ 1.78215602, -0.49656317, -0.26901095],
             [-0.95923427,  1.94844461, -0.02843173],
             [ 0.08612755, -0.17494658,  1.32334029]])
  - constant-name: colour.models.rgb.datasets.eci_rgb_v2.RGB_COLOURSPACE_ECI_RGB_V2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ECI RGB v2',
                      [[ 0.67010309,  0.32989691],
                       [ 0.20990566,  0.70990566],
                       [ 0.14006179,  0.08032956]],
                      [ 0.3457,  0.3585]...
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.PRIMARIES_EKTA_SPACE_PS_5
    type-name: ndarray
    value: |-
      array([[ 0.69473684,  0.30526316],
             [ 0.26      ,  0.7       ],
             [ 0.10972851,  0.00452489]])
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.WHITEPOINT_NAME_EKTA_SPACE_PS_5_V
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.CCS_WHITEPOINT_EKTA_SPACE_PS_5
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.MATRIX_EKTA_SPACE_PS_5_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.59433686,  0.27294481,  0.09701401],
             [ 0.26114801,  0.73485141,  0.00400058],
             [ 0.        ,  0.04199151,  0.78311309]])
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.MATRIX_XYZ_TO_EKTA_SPACE_PS_5
    type-name: ndarray
    value: |-
      array([[ 2.00336603, -0.73013869, -0.24445204],
             [-0.71215462,  1.62076569,  0.07994372],
             [ 0.03818663, -0.08690749,  1.27266809]])
  - constant-name: colour.models.rgb.datasets.ekta_space_ps5.RGB_COLOURSPACE_EKTA_SPACE_PS_5
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Ekta Space PS 5',
                      [[ 0.69473684,  0.30526316],
                       [ 0.26      ,  0.7       ],
                       [ 0.10972851,  0.00452489]],
                      [ 0.3457,  0....
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.PRIMARIES_FILMLIGHT_E_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.8   ,  0.3177],
             [ 0.18  ,  0.9   ],
             [ 0.065 , -0.0805]])
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.WHITEPOINT_NAME_FILMLIGHT_E_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.CCS_WHITEPOINT_FILMLIGHT_E_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.MATRIX_FILMLIGHT_E_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.70539685,  0.16404133,  0.08101775],
             [ 0.28013072,  0.82020664, -0.10033737],
             [-0.10378151, -0.07290726,  1.26574652]])
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.MATRIX_XYZ_TO_FILMLIGHT_E_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.52505277, -0.31591351, -0.12265826],
             [-0.50915256,  1.33332741,  0.13828437],
             [ 0.09571535,  0.05089744,  0.78795577]])
  - constant-name: colour.models.rgb.datasets.filmlight_e_gamut.RGB_COLOURSPACE_FILMLIGHT_E_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('FilmLight E-Gamut',
                      [[ 0.8   ,  0.3177],
                       [ 0.18  ,  0.9   ],
                       [ 0.065 , -0.0805]],
                      [ 0.3127,  0.329 ],
                     ...
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.PRIMARIES_F_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.708,  0.292],
             [ 0.17 ,  0.797],
             [ 0.131,  0.046]])
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.WHITEPOINT_NAME_F_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.CCS_WHITEPOINT_F_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.MATRIX_F_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.36958048e-01,   1.44616904e-01,   1.68880975e-01],
             [  2.62700212e-01,   6.77998072e-01,   5.93017165e-02],
             [  4.99410657e-17,   2.80726930e-02,   1.06098506e+00]])
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.MATRIX_XYZ_TO_F_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.71665119, -0.35567078, -0.25336628],
             [-0.66668435,  1.61648124,  0.01576855],
             [ 0.01763986, -0.04277061,  0.94210312]])
  - constant-name: colour.models.rgb.datasets.fujifilm_f_gamut.RGB_COLOURSPACE_F_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('F-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.gopro.PRIMARIES_PROTUNE_NATIVE
    type-name: ndarray
    value: |-
      array([[ 0.69848046,  0.19302645],
             [ 0.32955538,  1.02459662],
             [ 0.10844263, -0.03467857]])
  - constant-name: colour.models.rgb.datasets.gopro.WHITEPOINT_NAME_PROTUNE_NATIVE
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.gopro.CCS_WHITEPOINT_PROTUNE_NATIVE
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.gopro.MATRIX_PROTUNE_NATIVE_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.50225719,  0.29296671,  0.15523203],
             [ 0.13879976,  0.91084146, -0.04964122],
             [ 0.07801426, -0.31483251,  1.325876  ]])
  - constant-name: colour.models.rgb.datasets.gopro.MATRIX_XYZ_TO_PROTUNE_NATIVE
    type-name: ndarray
    value: |-
      array([[ 2.2668965 , -0.83163359, -0.29654225],
             [-0.35733783,  1.24337315,  0.08838899],
             [-0.21823445,  0.34417515,  0.79265501]])
  - constant-name: colour.models.rgb.datasets.gopro.RGB_COLOURSPACE_PROTUNE_NATIVE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Protune Native',
                      [[ 0.69848046,  0.19302645],
                       [ 0.32955538,  1.02459662],
                       [ 0.10844263, -0.03467857]],
                      [ 0.3127,  0.3...
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.PRIMARIES_BT2020
    type-name: ndarray
    value: |-
      array([[ 0.708,  0.292],
             [ 0.17 ,  0.797],
             [ 0.131,  0.046]])
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.WHITEPOINT_NAME_BT2020
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.CCS_WHITEPOINT_BT2020
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.MATRIX_BT2020_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.36958048e-01,   1.44616904e-01,   1.68880975e-01],
             [  2.62700212e-01,   6.77998072e-01,   5.93017165e-02],
             [  4.99410657e-17,   2.80726930e-02,   1.06098506e+00]])
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.MATRIX_XYZ_TO_BT2020
    type-name: ndarray
    value: |-
      array([[ 1.71665119, -0.35567078, -0.25336628],
             [-0.66668435,  1.61648124,  0.01576855],
             [ 0.01763986, -0.04277061,  0.94210312]])
  - constant-name: colour.models.rgb.datasets.itur_bt_2020.RGB_COLOURSPACE_BT2020
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.2020',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.datasets.itur_bt_470.PRIMARIES_BT470_525
    type-name: ndarray
    value: |-
      array([[ 0.67,  0.33],
             [ 0.21,  0.71],
             [ 0.14,  0.08]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.CCS_WHITEPOINT_BT470_525
    type-name: ndarray
    value: array([ 0.31006,  0.31616])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.WHITEPOINT_NAME_BT470_525
    type-name: str
    value: '''C'''
  - constant-name: colour.models.rgb.datasets.itur_bt_470.MATRIX_BT470_525_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.06863809e-01,   1.73507281e-01,   2.00334881e-01],
             [  2.98903070e-01,   5.86619855e-01,   1.14477075e-01],
             [ -5.02801622e-17,   6.60980118e-02,   1.11615148e+00]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.MATRIX_XYZ_TO_BT470_525
    type-name: ndarray
    value: |-
      array([[ 1.91008143, -0.53247794, -0.28822201],
             [-0.98463135,  1.99910001, -0.02830719],
             [ 0.05830945, -0.11838584,  0.89761208]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.RGB_COLOURSPACE_BT470_525
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 525',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
         ...
  - constant-name: colour.models.rgb.datasets.itur_bt_470.PRIMARIES_BT470_625
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.29,  0.6 ],
             [ 0.15,  0.06]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.CCS_WHITEPOINT_BT470_625
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.WHITEPOINT_NAME_BT470_625
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.itur_bt_470.MATRIX_BT470_625_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.43055381,  0.3415498 ,  0.17835231],
             [ 0.22200431,  0.70665477,  0.07134092],
             [ 0.02018221,  0.12955337,  0.93932217]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.MATRIX_XYZ_TO_BT470_625
    type-name: ndarray
    value: |-
      array([[ 3.06336109, -1.39339017, -0.47582374],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.06786105, -0.22879927,  1.06908962]])
  - constant-name: colour.models.rgb.datasets.itur_bt_470.RGB_COLOURSPACE_BT470_625
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.470 - 625',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
         ...
  - constant-name: colour.models.rgb.datasets.itur_bt_709.PRIMARIES_BT709
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]])
  - constant-name: colour.models.rgb.datasets.itur_bt_709.CCS_WHITEPOINT_BT709
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.itur_bt_709.WHITEPOINT_NAME_BT709
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.itur_bt_709.MATRIX_BT709_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.4123908 ,  0.35758434,  0.18048079],
             [ 0.21263901,  0.71516868,  0.07219232],
             [ 0.01933082,  0.11919478,  0.95053215]])
  - constant-name: colour.models.rgb.datasets.itur_bt_709.MATRIX_XYZ_TO_BT709
    type-name: ndarray
    value: |-
      array([[ 3.24096994, -1.53738318, -0.49861076],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.05563008, -0.20397696,  1.05697151]])
  - constant-name: colour.models.rgb.datasets.itur_bt_709.RGB_COLOURSPACE_BT709
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-R BT.709',
                      [[ 0.64,  0.33],
                       [ 0.3 ,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.itut_h_273.PRIMARIES_H273_GENERIC_FILM
    type-name: ndarray
    value: |-
      array([[ 0.681,  0.319],
             [ 0.243,  0.692],
             [ 0.145,  0.049]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.WHITEPOINT_NAME_H273_GENERIC_FILM
    type-name: str
    value: '''C'''
  - constant-name: colour.models.rgb.datasets.itut_h_273.CCS_WHITEPOINT_H273_GENERIC_FILM
    type-name: ndarray
    value: array([ 0.31 ,  0.316])
  - constant-name: colour.models.rgb.datasets.itut_h_273.MATRIX_H273_GENERIC_FILM_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  5.41353080e-01,   2.38201725e-01,   2.01457854e-01],
             [  2.53585363e-01,   6.78335776e-01,   6.80788609e-02],
             [ -4.41279481e-17,   6.37165107e-02,   1.11982779e+00]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.MATRIX_XYZ_TO_H273_GENERIC_FILM_RGB
    type-name: ndarray
    value: |-
      array([[ 2.19248548, -0.73706449, -0.34962064],
             [-0.82433417,  1.75978548,  0.04131385],
             [ 0.04690337, -0.10012914,  0.89064375]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.RGB_COLOURSPACE_H273_GENERIC_FILM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - Generic Film',
                      [[ 0.681,  0.319],
                       [ 0.243,  0.692],
                       [ 0.145,  0.049]],
                      [ 0.31 ,  0.316],
                    ...
  - constant-name: colour.models.rgb.datasets.itut_h_273.PRIMARIES_H273_22_UNSPECIFIED
    type-name: ndarray
    value: |-
      array([[ 0.63 ,  0.34 ],
             [ 0.295,  0.605],
             [ 0.155,  0.077]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.WHITEPOINT_NAME_H273_22_UNSPECIFIED
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.itut_h_273.CCS_WHITEPOINT_H273_22_UNSPECIFIED
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.itut_h_273.MATRIX_H273_22_UNSPECIFIED_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.42942013,  0.3277917 ,  0.1932441 ],
             [ 0.23175055,  0.67225077,  0.09599868],
             [ 0.02044858,  0.11111583,  0.95749334]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.MATRIX_XYZ_TO_H273_22_UNSPECIFIED_RGB
    type-name: ndarray
    value: |-
      array([[ 3.13288278, -1.44707454, -0.48720324],
             [-1.08850877,  2.01538781,  0.01762239],
             [ 0.05941301, -0.20297883,  1.05275352]])
  - constant-name: colour.models.rgb.datasets.itut_h_273.RGB_COLOURSPACE_H273_22_UNSPECIFIED
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ITU-T H.273 - 22 Unspecified',
                      [[ 0.63 ,  0.34 ],
                       [ 0.295,  0.605],
                       [ 0.155,  0.077]],
                      [ 0.3127,  0.329 ],
                ...
  - constant-name: colour.models.rgb.datasets.max_rgb.PRIMARIES_MAX_RGB
    type-name: ndarray
    value: |-
      array([[ 0.73413379,  0.26586621],
             [ 0.10039113,  0.89960887],
             [ 0.03621495,  0.        ]])
  - constant-name: colour.models.rgb.datasets.max_rgb.WHITEPOINT_NAME_MAX_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.max_rgb.CCS_WHITEPOINT_MAX_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.max_rgb.MATRIX_MAX_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.85630404,  0.07698771,  0.03100393],
             [ 0.31011011,  0.68988989,  0.        ],
             [ 0.        ,  0.        ,  0.8251046 ]])
  - constant-name: colour.models.rgb.datasets.max_rgb.MATRIX_XYZ_TO_MAX_RGB
    type-name: ndarray
    value: |-
      array([[ 1.2169928 , -0.13580933, -0.04572942],
             [-0.54704638,  1.51055387,  0.02055568],
             [ 0.        ,  0.        ,  1.21196755]])
  - constant-name: colour.models.rgb.datasets.max_rgb.RGB_COLOURSPACE_MAX_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Max RGB',
                      [[ 0.73413379,  0.26586621],
                       [ 0.10039113,  0.89960887],
                       [ 0.03621495,  0.        ]],
                      [ 0.3457,  0.3585],
       ...
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.PRIMARIES_N_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.708,  0.292],
             [ 0.17 ,  0.797],
             [ 0.131,  0.046]])
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.WHITEPOINT_NAME_N_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.CCS_WHITEPOINT_N_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.MATRIX_N_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.36958048e-01,   1.44616904e-01,   1.68880975e-01],
             [  2.62700212e-01,   6.77998072e-01,   5.93017165e-02],
             [  4.99410657e-17,   2.80726930e-02,   1.06098506e+00]])
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.MATRIX_XYZ_TO_N_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.71665119, -0.35567078, -0.25336628],
             [-0.66668435,  1.61648124,  0.01576855],
             [ 0.01763986, -0.04277061,  0.94210312]])
  - constant-name: colour.models.rgb.datasets.nikon_n_gamut.RGB_COLOURSPACE_N_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('N-Gamut',
                      [[ 0.708,  0.292],
                       [ 0.17 ,  0.797],
                       [ 0.131,  0.046]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.ntsc.PRIMARIES_NTSC1953
    type-name: ndarray
    value: |-
      array([[ 0.67,  0.33],
             [ 0.21,  0.71],
             [ 0.14,  0.08]])
  - constant-name: colour.models.rgb.datasets.ntsc.WHITEPOINT_NAME_NTSC1953
    type-name: str
    value: '''C'''
  - constant-name: colour.models.rgb.datasets.ntsc.CCS_WHITEPOINT_NTSC1953
    type-name: ndarray
    value: array([ 0.31006,  0.31616])
  - constant-name: colour.models.rgb.datasets.ntsc.MATRIX_NTSC1953_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  6.06863809e-01,   1.73507281e-01,   2.00334881e-01],
             [  2.98903070e-01,   5.86619855e-01,   1.14477075e-01],
             [ -5.02801622e-17,   6.60980118e-02,   1.11615148e+00]])
  - constant-name: colour.models.rgb.datasets.ntsc.MATRIX_XYZ_TO_NTSC1953
    type-name: ndarray
    value: |-
      array([[ 1.91008143, -0.53247794, -0.28822201],
             [-0.98463135,  1.99910001, -0.02830719],
             [ 0.05830945, -0.11838584,  0.89761208]])
  - constant-name: colour.models.rgb.datasets.ntsc.RGB_COLOURSPACE_NTSC1953
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1953)',
                      [[ 0.67,  0.33],
                       [ 0.21,  0.71],
                       [ 0.14,  0.08]],
                      [ 0.31006,  0.31616],
                      'C',
                ...
  - constant-name: colour.models.rgb.datasets.ntsc.PRIMARIES_NTSC1987
    type-name: ndarray
    value: |-
      array([[ 0.63 ,  0.34 ],
             [ 0.31 ,  0.595],
             [ 0.155,  0.07 ]])
  - constant-name: colour.models.rgb.datasets.ntsc.WHITEPOINT_NAME_NTSC1987
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.ntsc.CCS_WHITEPOINT_NTSC1987
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.ntsc.MATRIX_NTSC1987_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.3935209 ,  0.36525808,  0.19167695],
             [ 0.21237636,  0.70105986,  0.08656378],
             [ 0.01873909,  0.11193393,  0.95838473]])
  - constant-name: colour.models.rgb.datasets.ntsc.MATRIX_XYZ_TO_NTSC1987
    type-name: ndarray
    value: |-
      array([[ 3.50600328, -1.73979073, -0.54405827],
             [-1.06904756,  1.97777888,  0.03517142],
             [ 0.05630659, -0.19697565,  1.04995233]])
  - constant-name: colour.models.rgb.datasets.ntsc.RGB_COLOURSPACE_NTSC1987
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('NTSC (1987)',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
          ...
  - constant-name: colour.models.rgb.datasets.p3_d65.PRIMARIES_P3_D65
    type-name: ndarray
    value: |-
      array([[ 0.68 ,  0.32 ],
             [ 0.265,  0.69 ],
             [ 0.15 ,  0.06 ]])
  - constant-name: colour.models.rgb.datasets.p3_d65.WHITEPOINT_NAME_P3_D65
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.p3_d65.CCS_WHITEPOINT_P3_D65
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.p3_d65.MATRIX_P3_D65_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  4.86570949e-01,   2.65667693e-01,   1.98217285e-01],
             [  2.28974564e-01,   6.91738522e-01,   7.92869141e-02],
             [ -3.97207552e-17,   4.51133819e-02,   1.04394437e+00]])
  - constant-name: colour.models.rgb.datasets.p3_d65.MATRIX_XYZ_TO_P3_D65
    type-name: ndarray
    value: |-
      array([[ 2.49349691, -0.93138362, -0.40271078],
             [-0.82948897,  1.76266406,  0.02362469],
             [ 0.03584583, -0.07617239,  0.95688452]])
  - constant-name: colour.models.rgb.datasets.p3_d65.RGB_COLOURSPACE_P3_D65
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('P3-D65',
                      [[ 0.68 ,  0.32 ],
                       [ 0.265,  0.69 ],
                       [ 0.15 ,  0.06 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
               ...
  - constant-name: colour.models.rgb.datasets.pal_secam.PRIMARIES_PAL_SECAM
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.29,  0.6 ],
             [ 0.15,  0.06]])
  - constant-name: colour.models.rgb.datasets.pal_secam.WHITEPOINT_NAME_PAL_SECAM
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.pal_secam.CCS_WHITEPOINT_PAL_SECAM
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.pal_secam.MATRIX_PAL_SECAM_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.43055381,  0.3415498 ,  0.17835231],
             [ 0.22200431,  0.70665477,  0.07134092],
             [ 0.02018221,  0.12955337,  0.93932217]])
  - constant-name: colour.models.rgb.datasets.pal_secam.MATRIX_XYZ_TO_PAL_SECAM
    type-name: ndarray
    value: |-
      array([[ 3.06336109, -1.39339017, -0.47582374],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.06786105, -0.22879927,  1.06908962]])
  - constant-name: colour.models.rgb.datasets.pal_secam.RGB_COLOURSPACE_PAL_SECAM
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Pal/Secam',
                      [[ 0.64,  0.33],
                       [ 0.29,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.3127,  0.329 ],
                      'D65',
                  ...
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.PRIMARIES_V_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.73 ,  0.28 ],
             [ 0.165,  0.84 ],
             [ 0.1  , -0.03 ]])
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.WHITEPOINT_NAME_V_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.CCS_WHITEPOINT_V_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.MATRIX_V_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.679644,  0.152211,  0.1186  ],
             [ 0.260686,  0.774894, -0.03558 ],
             [-0.00931 , -0.004612,  1.10298 ]])
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.MATRIX_XYZ_TO_V_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.589012, -0.313204, -0.180965],
             [-0.534053,  1.396011,  0.102458],
             [ 0.011179,  0.003194,  0.905535]])
  - constant-name: colour.models.rgb.datasets.panasonic_v_gamut.RGB_COLOURSPACE_V_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('V-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.165,  0.84 ],
                       [ 0.1  , -0.03 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.PRIMARIES_PLASA_ANSI_E154
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  1.59600000e-01,   8.40400000e-01],
             [  3.66000000e-02,   1.00000000e-04]])
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.WHITEPOINT_NAME_PLASA_ANSI_E154
    type-name: str
    value: '''PLASA ANSI E1.54'''
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.CCS_WHITEPOINT_PLASA_ANSI_E154
    type-name: ndarray
    value: array([ 0.4254,  0.4044])
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.MATRIX_PLASA_ANSI_E154_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  9.08326466e-01,   1.27611601e-01,   1.59907169e-02],
             [  3.27996477e-01,   6.71959833e-01,   4.36904833e-05],
             [  0.00000000e+00,   0.00000000e+00,   4.20870425e-01]])
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.MATRIX_XYZ_TO_PLASA_ANSI_E154
    type-name: ndarray
    value: |-
      array([[ 1.18198169, -0.22446963, -0.04488538],
             [-0.57694792,  1.59775212,  0.02175492],
             [ 0.        ,  0.        ,  2.3760282 ]])
  - constant-name: colour.models.rgb.datasets.plasa_ansi_e154.RGB_COLOURSPACE_PLASA_ANSI_E154
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('PLASA ANSI E1.54',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]]...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_RED_COLOR
    type-name: ndarray
    value: |-
      array([[ 0.70105856,  0.33018098],
             [ 0.29881132,  0.62516925],
             [ 0.13503868,  0.03526178]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_RED_COLOR
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_RED_COLOR
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_RED_COLOR_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.42302331,  0.36210731,  0.16532531],
             [ 0.19923335,  0.75759632,  0.04317033],
             [-0.01885014,  0.09212233,  1.01578557]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_RED_COLOR
    type-name: ndarray
    value: |-
      array([[ 2.99433635, -1.37906534, -0.42873703],
             [-0.79472663,  1.69283865,  0.0574019 ],
             [ 0.12764085, -0.17911636,  0.97129776]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_RED_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor',
                      [[ 0.70105856,  0.33018098],
                       [ 0.29881132,  0.62516925],
                       [ 0.13503868,  0.03526178]],
                      [ 0.3127,  0.329 ],
      ...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_RED_COLOR_2
    type-name: ndarray
    value: |-
      array([[ 0.89740722,  0.33077623],
             [ 0.29602209,  0.68463555],
             [ 0.09979951, -0.02300051]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_RED_COLOR_2
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_RED_COLOR_2
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_RED_COLOR_2_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.44957762,  0.3734296 ,  0.12744871],
             [ 0.16571026,  0.86366248, -0.02937275],
             [-0.11431396,  0.02440023,  1.17897148]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_RED_COLOR_2
    type-name: ndarray
    value: |-
      array([[ 2.55060735, -1.09426927, -0.30298724],
             [-0.48063394,  1.36324834,  0.0859211 ],
             [ 0.2572561 , -0.13431523,  0.81704083]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_RED_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor2',
                      [[ 0.89740722,  0.33077623],
                       [ 0.29602209,  0.68463555],
                       [ 0.09979951, -0.02300051]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_RED_COLOR_3
    type-name: ndarray
    value: |-
      array([[ 0.70259866,  0.33018559],
             [ 0.29578224,  0.68974826],
             [ 0.11109053, -0.00433232]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_RED_COLOR_3
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_RED_COLOR_3
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_RED_COLOR_3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.47986312,  0.33439883,  0.13619398],
             [ 0.22551123,  0.77980008, -0.00531131],
             [-0.02239109,  0.01635861,  1.09509023]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_RED_COLOR_3
    type-name: ndarray
    value: |-
      array([[ 2.58673915, -1.10240102, -0.32705386],
             [-0.74762558,  1.6008681 ,  0.10074495],
             [ 0.06405867, -0.04645456,  0.90497461]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_RED_COLOR_3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor3',
                      [[ 0.70259866,  0.33018559],
                       [ 0.29578224,  0.68974826],
                       [ 0.11109053, -0.00433232]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_RED_COLOR_4
    type-name: ndarray
    value: |-
      array([[ 0.70259815,  0.3301851 ],
             [ 0.29578233,  0.68974825],
             [ 0.14445924,  0.05083772]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_RED_COLOR_4
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_RED_COLOR_4
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_RED_COLOR_4_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.44431783,  0.30962925,  0.19650885],
             [ 0.20880659,  0.72203852,  0.06915489],
             [-0.02073188,  0.0151468 ,  1.09464284]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_RED_COLOR_4
    type-name: ndarray
    value: |-
      array([[ 2.78855329, -1.18687705, -0.42561558],
             [-0.81255797,  1.73265028,  0.03640786],
             [ 0.06405707, -0.04645378,  0.9049753 ]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_RED_COLOR_4
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDcolor4',
                      [[ 0.70259815,  0.3301851 ],
                       [ 0.29578233,  0.68974825],
                       [ 0.14445924,  0.05083772]],
                      [ 0.3127,  0.329 ],...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_DRAGON_COLOR
    type-name: ndarray
    value: |-
      array([[ 0.75865589,  0.33035535],
             [ 0.29492362,  0.70805324],
             [ 0.0859616 , -0.04587944]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_DRAGON_COLOR
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_DRAGON_COLOR
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_DRAGON_COLOR_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.49831915,  0.34905932,  0.10307746],
             [ 0.21699218,  0.83802234, -0.05501452],
             [-0.05846657, -0.00352329,  1.15104761]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_DRAGON_COLOR
    type-name: ndarray
    value: |-
      array([[ 2.41407671, -1.00664042, -0.26429553],
             [-0.61715986,  1.45087355,  0.12461203],
             [ 0.12073206, -0.04669048,  0.85573054]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_DRAGON_COLOR
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor',
                      [[ 0.75865589,  0.33035535],
                       [ 0.29492362,  0.70805324],
                       [ 0.0859616 , -0.04587944]],
                      [ 0.3127,  0.329 ...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_DRAGON_COLOR_2
    type-name: ndarray
    value: |-
      array([[ 0.75865621,  0.33035584],
             [ 0.29492389,  0.70805336],
             [ 0.14416873,  0.05035738]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_DRAGON_COLOR_2
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_DRAGON_COLOR_2
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_DRAGON_COLOR_2_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.43856251,  0.30720212,  0.2046913 ],
             [ 0.19097146,  0.73753094,  0.0714976 ],
             [-0.05145591, -0.0031012 ,  1.14361486]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_DRAGON_COLOR_2
    type-name: ndarray
    value: |-
      array([[ 2.72655873, -1.13744045, -0.41690486],
             [-0.71770143,  1.654923  ,  0.02499461],
             [ 0.12073281, -0.04669036,  0.85572978]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_DRAGON_COLOR_2
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('DRAGONcolor2',
                      [[ 0.75865621,  0.33035584],
                       [ 0.29492389,  0.70805336],
                       [ 0.14416873,  0.05035738]],
                      [ 0.3127,  0.329...
  - constant-name: colour.models.rgb.datasets.red.PRIMARIES_RED_WIDE_GAMUT_RGB
    type-name: ndarray
    value: |-
      array([[ 0.780308,  0.304253],
             [ 0.121595,  1.493994],
             [ 0.095612, -0.084589]])
  - constant-name: colour.models.rgb.datasets.red.WHITEPOINT_NAME_RED_WIDE_GAMUT_RGB
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.red.CCS_WHITEPOINT_RED_WIDE_GAMUT_RGB
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_RED_WIDE_GAMUT_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.735275,  0.068609,  0.146571],
             [ 0.286694,  0.842979, -0.129673],
             [-0.079681, -0.347343,  1.516082]])
  - constant-name: colour.models.rgb.datasets.red.MATRIX_XYZ_TO_RED_WIDE_GAMUT_RGB
    type-name: ndarray
    value: |-
      array([[ 1.41280661, -0.17752237, -0.15177038],
             [-0.48620319,  1.29069621,  0.15740028],
             [-0.03713878,  0.28637576,  0.68767961]])
  - constant-name: colour.models.rgb.datasets.red.RGB_COLOURSPACE_RED_WIDE_GAMUT_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('REDWideGamutRGB',
                      [[ 0.780308,  0.304253],
                       [ 0.121595,  1.493994],
                       [ 0.095612, -0.084589]],
                      [ 0.3127,  0.329 ],
           ...
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.PRIMARIES_ROMM_RGB
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  1.59600000e-01,   8.40400000e-01],
             [  3.66000000e-02,   1.00000000e-04]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.WHITEPOINT_NAME_ROMM_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.CCS_WHITEPOINT_ROMM_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_ROMM_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  7.97700000e-01,   1.35200000e-01,   3.13000000e-02],
             [  2.88000000e-01,   7.11900000e-01,   1.00000000e-04],
             [  0.00000000e+00,   0.00000000e+00,   8.24900000e-01]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_XYZ_TO_ROMM_RGB
    type-name: ndarray
    value: |-
      array([[ 1.346 , -0.2556, -0.0511],
             [-0.5446,  1.5082,  0.0205],
             [ 0.    ,  0.    ,  1.2123]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.RGB_COLOURSPACE_ROMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ROMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.PRIMARIES_RIMM_RGB
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  1.59600000e-01,   8.40400000e-01],
             [  3.66000000e-02,   1.00000000e-04]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.WHITEPOINT_NAME_RIMM_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.CCS_WHITEPOINT_RIMM_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_RIMM_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  7.97700000e-01,   1.35200000e-01,   3.13000000e-02],
             [  2.88000000e-01,   7.11900000e-01,   1.00000000e-04],
             [  0.00000000e+00,   0.00000000e+00,   8.24900000e-01]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_XYZ_TO_RIMM_RGB
    type-name: ndarray
    value: |-
      array([[ 1.346 , -0.2556, -0.0511],
             [-0.5446,  1.5082,  0.0205],
             [ 0.    ,  0.    ,  1.2123]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.RGB_COLOURSPACE_RIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('RIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
            ...
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.PRIMARIES_ERIMM_RGB
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  1.59600000e-01,   8.40400000e-01],
             [  3.66000000e-02,   1.00000000e-04]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.WHITEPOINT_NAME_ERIMM_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.CCS_WHITEPOINT_ERIMM_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_ERIMM_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  7.97700000e-01,   1.35200000e-01,   3.13000000e-02],
             [  2.88000000e-01,   7.11900000e-01,   1.00000000e-04],
             [  0.00000000e+00,   0.00000000e+00,   8.24900000e-01]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_XYZ_TO_ERIMM_RGB
    type-name: ndarray
    value: |-
      array([[ 1.346 , -0.2556, -0.0511],
             [-0.5446,  1.5082,  0.0205],
             [ 0.    ,  0.    ,  1.2123]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.RGB_COLOURSPACE_ERIMM_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ERIMM RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
           ...
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.PRIMARIES_PROPHOTO_RGB
    type-name: ndarray
    value: |-
      array([[  7.34700000e-01,   2.65300000e-01],
             [  1.59600000e-01,   8.40400000e-01],
             [  3.66000000e-02,   1.00000000e-04]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.WHITEPOINT_NAME_PROPHOTO_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.CCS_WHITEPOINT_PROPHOTO_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_PROPHOTO_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  7.97700000e-01,   1.35200000e-01,   3.13000000e-02],
             [  2.88000000e-01,   7.11900000e-01,   1.00000000e-04],
             [  0.00000000e+00,   0.00000000e+00,   8.24900000e-01]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.MATRIX_XYZ_TO_PROPHOTO_RGB
    type-name: ndarray
    value: |-
      array([[ 1.346 , -0.2556, -0.0511],
             [-0.5446,  1.5082,  0.0205],
             [ 0.    ,  0.    ,  1.2123]])
  - constant-name: colour.models.rgb.datasets.rimm_romm_rgb.RGB_COLOURSPACE_PROPHOTO_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('ProPhoto RGB',
                      [[  7.34700000e-01,   2.65300000e-01],
                       [  1.59600000e-01,   8.40400000e-01],
                       [  3.66000000e-02,   1.00000000e-04]],
        ...
  - constant-name: colour.models.rgb.datasets.russell_rgb.PRIMARIES_RUSSELL_RGB
    type-name: ndarray
    value: |-
      array([[ 0.69,  0.31],
             [ 0.18,  0.77],
             [ 0.1 ,  0.02]])
  - constant-name: colour.models.rgb.datasets.russell_rgb.WHITEPOINT_NAME_RUSSELL_RGB
    type-name: str
    value: '''D55'''
  - constant-name: colour.models.rgb.datasets.russell_rgb.CCS_WHITEPOINT_RUSSELL_RGB
    type-name: ndarray
    value: array([ 0.33243,  0.34744])
  - constant-name: colour.models.rgb.datasets.russell_rgb.MATRIX_RUSSELL_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[  7.01583746e-01,   1.55416218e-01,   9.97983328e-02],
             [  3.15204292e-01,   6.64836042e-01,   1.99596666e-02],
             [  5.64430745e-17,   4.31711716e-02,   8.78225329e-01]])
  - constant-name: colour.models.rgb.datasets.russell_rgb.MATRIX_XYZ_TO_RUSSELL_RGB
    type-name: ndarray
    value: |-
      array([[ 1.58699918, -0.35980738, -0.17216338],
             [-0.75352154,  1.67719311,  0.04750942],
             [ 0.03704107, -0.08244626,  1.13632451]])
  - constant-name: colour.models.rgb.datasets.russell_rgb.RGB_COLOURSPACE_RUSSELL_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Russell RGB',
                      [[ 0.69,  0.31],
                       [ 0.18,  0.77],
                       [ 0.1 ,  0.02]],
                      [ 0.33243,  0.34744],
                      'D55',
              ...
  - constant-name: colour.models.rgb.datasets.sharp.PRIMARIES_SHARP_RGB
    type-name: ndarray
    value: |-
      array([[ 0.6898,  0.3206],
             [ 0.0736,  0.9003],
             [ 0.1166,  0.0374]])
  - constant-name: colour.models.rgb.datasets.sharp.WHITEPOINT_NAME_SHARP_RGB
    type-name: str
    value: '''E'''
  - constant-name: colour.models.rgb.datasets.sharp.CCS_WHITEPOINT_SHARP_RGB
    type-name: ndarray
    value: array([ 0.33333333,  0.33333333])
  - constant-name: colour.models.rgb.datasets.sharp.MATRIX_SHARP_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.8156226 ,  0.0471626 ,  0.1372148 ],
             [ 0.37907887,  0.57690884,  0.04401229],
             [-0.01229701,  0.01672478,  0.99557223]])
  - constant-name: colour.models.rgb.datasets.sharp.MATRIX_XYZ_TO_SHARP_RGB
    type-name: ndarray
    value: |-
      array([[ 1.26941888, -0.09883024, -0.17058864],
             [-0.83638581,  1.80071706,  0.03566876],
             [ 0.02973006, -0.03147126,  1.0017412 ]])
  - constant-name: colour.models.rgb.datasets.sharp.RGB_COLOURSPACE_SHARP_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Sharp RGB',
                      [[ 0.6898,  0.3206],
                       [ 0.0736,  0.9003],
                       [ 0.1166,  0.0374]],
                      [ 0.33333333,  0.33333333],
                     ...
  - constant-name: colour.models.rgb.datasets.smpte_240m.PRIMARIES_SMPTE_240M
    type-name: ndarray
    value: |-
      array([[ 0.63 ,  0.34 ],
             [ 0.31 ,  0.595],
             [ 0.155,  0.07 ]])
  - constant-name: colour.models.rgb.datasets.smpte_240m.WHITEPOINT_NAME_SMPTE_240M
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.smpte_240m.CCS_WHITEPOINT_SMPTE_240M
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.smpte_240m.MATRIX_SMPTE_240M_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.3935209 ,  0.36525808,  0.19167695],
             [ 0.21237636,  0.70105986,  0.08656378],
             [ 0.01873909,  0.11193393,  0.95838473]])
  - constant-name: colour.models.rgb.datasets.smpte_240m.MATRIX_XYZ_TO_SMPTE_240M
    type-name: ndarray
    value: |-
      array([[ 3.50600328, -1.73979073, -0.54405827],
             [-1.06904756,  1.97777888,  0.03517142],
             [ 0.05630659, -0.19697565,  1.04995233]])
  - constant-name: colour.models.rgb.datasets.smpte_240m.RGB_COLOURSPACE_SMPTE_240M
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE 240M',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
           ...
  - constant-name: colour.models.rgb.datasets.smpte_c.PRIMARIES_SMPTE_C
    type-name: ndarray
    value: |-
      array([[ 0.63 ,  0.34 ],
             [ 0.31 ,  0.595],
             [ 0.155,  0.07 ]])
  - constant-name: colour.models.rgb.datasets.smpte_c.WHITEPOINT_NAME_SMPTE_C
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.smpte_c.CCS_WHITEPOINT_SMPTE_C
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.smpte_c.MATRIX_SMPTE_C_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.3935209 ,  0.36525808,  0.19167695],
             [ 0.21237636,  0.70105986,  0.08656378],
             [ 0.01873909,  0.11193393,  0.95838473]])
  - constant-name: colour.models.rgb.datasets.smpte_c.MATRIX_XYZ_TO_SMPTE_C
    type-name: ndarray
    value: |-
      array([[ 3.50600328, -1.73979073, -0.54405827],
             [-1.06904756,  1.97777888,  0.03517142],
             [ 0.05630659, -0.19697565,  1.04995233]])
  - constant-name: colour.models.rgb.datasets.smpte_c.RGB_COLOURSPACE_SMPTE_C
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('SMPTE C',
                      [[ 0.63 ,  0.34 ],
                       [ 0.31 ,  0.595],
                       [ 0.155,  0.07 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.sony.PRIMARIES_S_GAMUT
    type-name: ndarray
    value: |-
      array([[ 0.73 ,  0.28 ],
             [ 0.14 ,  0.855],
             [ 0.1  , -0.05 ]])
  - constant-name: colour.models.rgb.datasets.sony.WHITEPOINT_NAME_S_GAMUT
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.sony.CCS_WHITEPOINT_S_GAMUT
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_S_GAMUT_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.70648271,  0.12880105,  0.11517216],
             [ 0.27097967,  0.78660641, -0.05758608],
             [-0.00967785,  0.00460004,  1.09413556]])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_XYZ_TO_S_GAMUT
    type-name: ndarray
    value: |-
      array([[ 1.5073999 , -0.24582214, -0.17161168],
             [-0.51815173,  1.35539124,  0.12587867],
             [ 0.0155117 , -0.00787277,  0.91191637]])
  - constant-name: colour.models.rgb.datasets.sony.RGB_COLOURSPACE_S_GAMUT
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
              ...
  - constant-name: colour.models.rgb.datasets.sony.PRIMARIES_S_GAMUT3
    type-name: ndarray
    value: |-
      array([[ 0.73 ,  0.28 ],
             [ 0.14 ,  0.855],
             [ 0.1  , -0.05 ]])
  - constant-name: colour.models.rgb.datasets.sony.WHITEPOINT_NAME_S_GAMUT3
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.sony.CCS_WHITEPOINT_S_GAMUT3
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_S_GAMUT3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.70648271,  0.12880105,  0.11517216],
             [ 0.27097967,  0.78660641, -0.05758608],
             [-0.00967785,  0.00460004,  1.09413556]])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_XYZ_TO_S_GAMUT3
    type-name: ndarray
    value: |-
      array([[ 1.5073999 , -0.24582214, -0.17161168],
             [-0.51815173,  1.35539124,  0.12587867],
             [ 0.0155117 , -0.00787277,  0.91191637]])
  - constant-name: colour.models.rgb.datasets.sony.RGB_COLOURSPACE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3',
                      [[ 0.73 ,  0.28 ],
                       [ 0.14 ,  0.855],
                       [ 0.1  , -0.05 ]],
                      [ 0.3127,  0.329 ],
                      'D65',
             ...
  - constant-name: colour.models.rgb.datasets.sony.PRIMARIES_S_GAMUT3_CINE
    type-name: ndarray
    value: |-
      array([[ 0.766,  0.275],
             [ 0.225,  0.8  ],
             [ 0.089, -0.087]])
  - constant-name: colour.models.rgb.datasets.sony.WHITEPOINT_NAME_S_GAMUT3_CINE
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.sony.CCS_WHITEPOINT_S_GAMUT3_CINE
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_S_GAMUT3_CINE_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.59908392,  0.24892552,  0.10244649],
             [ 0.21507582,  0.8850685 , -0.10014432],
             [-0.03206585, -0.02765839,  1.14878199]])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_XYZ_TO_S_GAMUT3_CINE
    type-name: ndarray
    value: |-
      array([[ 1.84677897, -0.52598612, -0.21054521],
             [-0.44415326,  1.2594429 ,  0.14939997],
             [ 0.04085542,  0.01564089,  0.86820725]])
  - constant-name: colour.models.rgb.datasets.sony.RGB_COLOURSPACE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('S-Gamut3.Cine',
                      [[ 0.766,  0.275],
                       [ 0.225,  0.8  ],
                       [ 0.089, -0.087]],
                      [ 0.3127,  0.329 ],
                      'D65',
        ...
  - constant-name: colour.models.rgb.datasets.sony.PRIMARIES_VENICE_S_GAMUT3
    type-name: ndarray
    value: |-
      array([[ 0.74046426,  0.27936437],
             [ 0.08924115,  0.89380953],
             [ 0.11048824, -0.05257933]])
  - constant-name: colour.models.rgb.datasets.sony.WHITEPOINT_NAME_VENICE_S_GAMUT3
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.sony.CCS_WHITEPOINT_VENICE_S_GAMUT3
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_VENICE_S_GAMUT3_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.74422299,  0.07790652,  0.12832642],
             [ 0.28078248,  0.78028572, -0.0610682 ],
             [-0.01992929,  0.01479657,  1.09419047]])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_XYZ_TO_VENICE_S_GAMUT3
    type-name: ndarray
    value: |-
      array([[ 1.39026398, -0.13557353, -0.17061639],
             [-0.49777193,  1.32876782,  0.13253885],
             [ 0.03205319, -0.02043803,  0.9090178 ]])
  - constant-name: colour.models.rgb.datasets.sony.RGB_COLOURSPACE_VENICE_S_GAMUT3
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3',
                      [[ 0.74046426,  0.27936437],
                       [ 0.08924115,  0.89380953],
                       [ 0.11048824, -0.05257933]],
                      [ 0.3127,  0....
  - constant-name: colour.models.rgb.datasets.sony.PRIMARIES_VENICE_S_GAMUT3_CINE
    type-name: ndarray
    value: |-
      array([[ 0.77590187,  0.27450239],
             [ 0.1886829 ,  0.82868494],
             [ 0.10133738, -0.08918752]])
  - constant-name: colour.models.rgb.datasets.sony.WHITEPOINT_NAME_VENICE_S_GAMUT3_CINE
    type-name: str
    value: '''D65'''
  - constant-name: colour.models.rgb.datasets.sony.CCS_WHITEPOINT_VENICE_S_GAMUT3_CINE
    type-name: ndarray
    value: array([ 0.3127,  0.329 ])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_VENICE_S_GAMUT3_CINE_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.63226084,  0.20037001,  0.11782508],
             [ 0.22368436,  0.88001406, -0.10369842],
             [-0.04107303, -0.01844361,  1.14857439]])
  - constant-name: colour.models.rgb.datasets.sony.MATRIX_XYZ_TO_VENICE_S_GAMUT3_CINE
    type-name: ndarray
    value: |-
      array([[ 1.70701129, -0.39308248, -0.21060088],
             [-0.42750858,  1.23694441,  0.1555323 ],
             [ 0.05417788,  0.00580601,  0.86561094]])
  - constant-name: colour.models.rgb.datasets.sony.RGB_COLOURSPACE_VENICE_S_GAMUT3_CINE
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Venice S-Gamut3.Cine',
                      [[ 0.77590187,  0.27450239],
                       [ 0.1886829 ,  0.82868494],
                       [ 0.10133738, -0.08918752]],
                      [ 0.3127...
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.PRIMARIES_XTREME_RGB
    type-name: ndarray
    value: |-
      array([[ 1.,  0.],
             [ 0.,  1.],
             [ 0.,  0.]])
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.WHITEPOINT_NAME_XTREME_RGB
    type-name: str
    value: '''D50'''
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.CCS_WHITEPOINT_XTREME_RGB
    type-name: ndarray
    value: array([ 0.3457,  0.3585])
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.MATRIX_XTREME_RGB_TO_XYZ
    type-name: ndarray
    value: |-
      array([[ 0.96429568,  0.        ,  0.        ],
             [ 0.        ,  1.        ,  0.        ],
             [ 0.        ,  0.        ,  0.8251046 ]])
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.MATRIX_XYZ_TO_XTREME_RGB
    type-name: ndarray
    value: |-
      array([[ 1.03702632,  0.        ,  0.        ],
             [ 0.        ,  1.        ,  0.        ],
             [ 0.        ,  0.        ,  1.21196755]])
  - constant-name: colour.models.rgb.datasets.xtreme_rgb.RGB_COLOURSPACE_XTREME_RGB
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Xtreme RGB',
                      [[ 1.,  0.],
                       [ 0.,  1.],
                       [ 0.,  0.]],
                      [ 0.3457,  0.3585],
                      'D50',
                      [[ 0.96...
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_RGB_TO_LMS
    type-name: ndarray
    value: |-
      array([[ 0.41210938,  0.52392578,  0.06396484],
             [ 0.16674805,  0.72045898,  0.11279297],
             [ 0.02416992,  0.07543945,  0.90039062]])
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_LMS_TO_RGB
    type-name: ndarray
    value: |-
      array([[ 3.43660669, -2.50645212,  0.06984542],
             [-0.79132956,  1.98360045, -0.1922709 ],
             [-0.0259499 , -0.09891371,  1.12486361]])
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_LMS_P_TO_ICTCP
    type-name: ndarray
    value: |-
      array([[ 0.5       ,  0.5       ,  0.        ],
             [ 1.61376953, -3.32348633,  1.7097168 ],
             [ 4.37817383, -4.24560547, -0.13256836]])
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_ICTCP_TO_LMS_P
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.00860904,  0.11102963],
             [ 1.        , -0.00860904, -0.11102963],
             [ 1.        ,  0.56003134, -0.32062717]])
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_LMS_P_TO_ICTCP_BT2100_HLG_2
    type-name: ndarray
    value: |-
      array([[ 0.5       ,  0.5       ,  0.        ],
             [ 0.88500977, -1.82250977,  0.9375    ],
             [ 2.31933594, -2.24902344, -0.0703125 ]])
  - constant-name: colour.models.rgb.ictcp.MATRIX_ICTCP_ICTCP_TO_LMS_P_BT2100_HLG_2
    type-name: ndarray
    value: |-
      array([[ 1.        ,  0.01571858,  0.20958107],
             [ 1.        , -0.01571858, -0.20958107],
             [ 1.        ,  1.02127108, -0.60527449]])
  - constant-name: colour.models.rgb.itut_h_273.COLOUR_PRIMARIES_ITUTH273
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.rgb.itut_h_273.TRANSFER_CHARACTERISTICS_ITUTH273
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.rgb.itut_h_273.MATRIX_COEFFICIENTS_ITUTH273
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.rgb.itut_h_273.CCS_WHITEPOINTS_ITUTH273
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([ 0.3127,  0.329 ]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.31 ,  0.316]), 5: array([ 0.3...
  - constant-name: colour.models.rgb.itut_h_273.WHITEPOINT_NAMES_ITUTH273
    type-name: dict
    value: '{0: ''Reserved'', 1: ''D65'', 2: ''Unspecified'', 3: ''Reserved'', 4:
      ''C'', 5: ''D65'', 6: ''D65'', 7: ''D65'', 8: ''C'', 9: ''D65'', 10: ''E'',
      11: ''DCI-P3'', 12: ''D65'', 22: ''D65'', 23: ''Reserved''}'
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_ITUTH273_RGB_TO_XYZ
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.4123908 ,  0.35758434,  0.18048079],
             [ 0.21263901,  0.71516868,  0.07219232],
             [ 0.01933082,  0.11919478,  0.95053215]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_XYZ_TO_ITUTH273_RGB
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 3.24096994, -1.53738318, -0.49861076],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.05563008, -0.20397696,  1.05697151]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.COLOUR_PRIMARIES_ISO23091_2
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.rgb.itut_h_273.TRANSFER_CHARACTERISTICS_ISO23091_2
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.rgb.itut_h_273.MATRIX_COEFFICIENTS_ISO23091_2
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.rgb.itut_h_273.CCS_WHITEPOINTS_ISO23091_2
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([ 0.3127,  0.329 ]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.31 ,  0.316]), 5: array([ 0.3...
  - constant-name: colour.models.rgb.itut_h_273.WHITEPOINT_NAMES_ISO23091_2
    type-name: dict
    value: '{0: ''Reserved'', 1: ''D65'', 2: ''Unspecified'', 3: ''Reserved'', 4:
      ''C'', 5: ''D65'', 6: ''D65'', 7: ''D65'', 8: ''C'', 9: ''D65'', 10: ''E'',
      11: ''DCI-P3'', 12: ''D65'', 22: ''D65'', 23: ''Reserved''}'
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_ISO23091_2_RGB_TO_XYZ
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.4123908 ,  0.35758434,  0.18048079],
             [ 0.21263901,  0.71516868,  0.07219232],
             [ 0.01933082,  0.11919478,  0.95053215]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_XYZ_TO_ISO23091_2_RGB
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 3.24096994, -1.53738318, -0.49861076],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.05563008, -0.20397696,  1.05697151]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.COLOUR_PRIMARIES_23001_8
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.rgb.itut_h_273.TRANSFER_CHARACTERISTICS_23001_8
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.rgb.itut_h_273.MATRIX_COEFFICIENTS_23001_8
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.rgb.itut_h_273.CCS_WHITEPOINTS_23001_8
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([ 0.3127,  0.329 ]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.31 ,  0.316]), 5: array([ 0.3...
  - constant-name: colour.models.rgb.itut_h_273.WHITEPOINT_NAMES_23001_8
    type-name: dict
    value: '{0: ''Reserved'', 1: ''D65'', 2: ''Unspecified'', 3: ''Reserved'', 4:
      ''C'', 5: ''D65'', 6: ''D65'', 7: ''D65'', 8: ''C'', 9: ''D65'', 10: ''E'',
      11: ''DCI-P3'', 12: ''D65'', 22: ''D65'', 23: ''Reserved''}'
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_23001_8_RGB_TO_XYZ
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.4123908 ,  0.35758434,  0.18048079],
             [ 0.21263901,  0.71516868,  0.07219232],
             [ 0.01933082,  0.11919478,  0.95053215]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_XYZ_TO_23001_8_RGB
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 3.24096994, -1.53738318, -0.49861076],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.05563008, -0.20397696,  1.05697151]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.COLOUR_PRIMARIES_ISO14496_10
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8')...
  - constant-name: colour.models.rgb.itut_h_273.TRANSFER_CHARACTERISTICS_ISO14496_10
    type-name: dict
    value: '{0: <function _reserved at 0x7b934bb2ac00>, 1: <function oetf_BT709 at
      0x7b934bb2ade0>, 2: <function _unspecified at 0x7b934bb2aca0>, 3: <function
      _reserved at 0x7b934bb2ac00>, 4: <function _clipped_d...'
  - constant-name: colour.models.rgb.itut_h_273.MATRIX_COEFFICIENTS_ISO14496_10
    type-name: dict
    value: |-
      {0: array('Identity',
            dtype='<U8'), 1: array([ 0.2126,  0.0722]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.3 ,  0.11]), 5: array([ 0.299...
  - constant-name: colour.models.rgb.itut_h_273.CCS_WHITEPOINTS_ISO14496_10
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([ 0.3127,  0.329 ]), 2: array('Unspecified',
            dtype='<U11'), 3: array('Reserved',
            dtype='<U8'), 4: array([ 0.31 ,  0.316]), 5: array([ 0.3...
  - constant-name: colour.models.rgb.itut_h_273.WHITEPOINT_NAMES_ISO14496_10
    type-name: dict
    value: '{0: ''Reserved'', 1: ''D65'', 2: ''Unspecified'', 3: ''Reserved'', 4:
      ''C'', 5: ''D65'', 6: ''D65'', 7: ''D65'', 8: ''C'', 9: ''D65'', 10: ''E'',
      11: ''DCI-P3'', 12: ''D65'', 22: ''D65'', 23: ''Reserved''}'
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_ISO14496_10_RGB_TO_XYZ
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 0.4123908 ,  0.35758434,  0.18048079],
             [ 0.21263901,  0.71516868,  0.07219232],
             [ 0.01933082,  0.11919478,  0.95053215]]), 2: array(...
  - constant-name: colour.models.rgb.itut_h_273.MATRICES_XYZ_TO_ISO14496_10_RGB
    type-name: dict
    value: |-
      {0: array('Reserved',
            dtype='<U8'), 1: array([[ 3.24096994, -1.53738318, -0.49861076],
             [-0.96924364,  1.8759675 ,  0.04155506],
             [ 0.05563008, -0.20397696,  1.05697151]]), 2: array(...
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog_v1 at 0x7b934baa6020>,
      ''v1.2'': <function log_encoding_CanonLog_v1_2 at 0x7b934baa6160>})'
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog_v1 at 0x7b934baa60c0>,
      ''v1.2'': <function log_decoding_CanonLog_v1_2 at 0x7b934baa6200>})'
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_2_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog2_v1 at 0x7b934baa63e0>,
      ''v1.2'': <function log_encoding_CanonLog2_v1_2 at 0x7b934baa6520>})'
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_2_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog2_v1 at 0x7b934baa6480>,
      ''v1.2'': <function log_decoding_CanonLog2_v1_2 at 0x7b934baa65c0>})'
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_3_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog3_v1 at 0x7b934baa67a0>,
      ''v1.2'': <function log_encoding_CanonLog3_v1_2 at 0x7b934baa68e0>})'
  - constant-name: colour.models.rgb.transfer_functions.CANON_LOG_3_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog3_v1 at 0x7b934baa6840>,
      ''v1.2'': <function log_decoding_CanonLog3_v1_2 at 0x7b934baa6980>})'
  - constant-name: colour.models.rgb.transfer_functions.BT2100_HLG_EOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_BT2100_HLG_1 at
      0x7b934bad2d40>, ''ITU-R BT.2100-2'': <function eotf_BT2100_HLG_2 at 0x7b934bad2de0>})'
  - constant-name: colour.models.rgb.transfer_functions.BT2100_HLG_EOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_inverse_BT2100_HLG_1
      at 0x7b934bad2f20>, ''ITU-R BT.2100-2'': <function eotf_inverse_BT2100_HLG_2
      at 0x7b934bad2fc0>})'
  - constant-name: colour.models.rgb.transfer_functions.BT2100_HLG_OOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_BT2100_HLG_1 at
      0x7b934bad3100>, ''ITU-R BT.2100-2'': <function ootf_BT2100_HLG_2 at 0x7b934bad31a0>})'
  - constant-name: colour.models.rgb.transfer_functions.BT2100_HLG_OOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_inverse_BT2100_HLG_1
      at 0x7b934bad32e0>, ''ITU-R BT.2100-2'': <function ootf_inverse_BT2100_HLG_2
      at 0x7b934bad3380>})'
  - constant-name: colour.models.rgb.transfer_functions.LOG3G10_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_Log3G10_v1 at 0x7b934bad9580>,
      ''v2'': <function log_encoding_Log3G10_v2 at 0x7b934bad96c0>, ''v3'': <function
      log_encoding_Log3G10_v3 at 0x7b934bad9800>})'
  - constant-name: colour.models.rgb.transfer_functions.LOG3G10_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_Log3G10_v1 at 0x7b934bad9620>,
      ''v2'': <function log_decoding_Log3G10_v2 at 0x7b934bad9760>, ''v3'': <function
      log_decoding_Log3G10_v3 at 0x7b934bad98a0>})'
  - constant-name: colour.models.rgb.transfer_functions.LOG_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_encoding_ACEScc at 0x7b934baa4ea0>,
      ''ACEScct'': <function log_encoding_ACEScct at 0x7b934baa4fe0>, ''ACESproxy'':
      <function log_encoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.rgb.transfer_functions.LOG_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ACEScc'': <function log_decoding_ACEScc at 0x7b934baa4f40>,
      ''ACEScct'': <function log_decoding_ACEScct at 0x7b934baa5080>, ''ACESproxy'':
      <function log_decoding_ACESproxy at 0x7b934baa4...'
  - constant-name: colour.models.rgb.transfer_functions.OETFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_ARIBSTDB67 at 0x7b934baa4220>,
      ''Blackmagic Film Generation 5'': <function oetf_BlackmagicFilmGeneration5 at
      0x7b934baa5c60>, ''DaVinci Intermediate'': <fu...'
  - constant-name: colour.models.rgb.transfer_functions.OETF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ARIB STD-B67'': <function oetf_inverse_ARIBSTDB67
      at 0x7b934baa5620>, ''Blackmagic Film Generation 5'': <function oetf_inverse_BlackmagicFilmGeneration5
      at 0x7b934baa5d00>, ''DaVinci In...'
  - constant-name: colour.models.rgb.transfer_functions.EOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_DCDM at 0x7b934baa74c0>, ''DICOM
      GSDF'': <function eotf_DICOMGSDF at 0x7b934baa77e0>, ''ITU-R BT.1886'': <function
      eotf_BT1886 at 0x7b934bad16c0>, ''ITU-R BT.2100 H...'
  - constant-name: colour.models.rgb.transfer_functions.EOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''DCDM'': <function eotf_inverse_DCDM at 0x7b934baa7420>,
      ''DICOM GSDF'': <function eotf_inverse_DICOMGSDF at 0x7b934baa7740>, ''ITU-R
      BT.1886'': <function eotf_inverse_BT1886 at 0x7b934ba...'
  - constant-name: colour.models.rgb.transfer_functions.CCTF_ENCODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=0.45454545454545453), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>,...'
  - constant-name: colour.models.rgb.transfer_functions.CCTF_DECODINGS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Gamma 2.2'': functools.partial(<function gamma_function
      at 0x7b934baa49a0>, exponent=2.2), ''Gamma 2.4'': functools.partial(<function
      gamma_function at 0x7b934baa49a0>, exponent=2.4), ...'
  - constant-name: colour.models.rgb.transfer_functions.OOTFS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_BT2100_HLG at
      0x7b934bad3240>, ''ITU-R BT.2100 PQ'': <function ootf_BT2100_PQ at 0x7b934bad2980>})'
  - constant-name: colour.models.rgb.transfer_functions.OOTF_INVERSES
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100 HLG'': <function ootf_inverse_BT2100_HLG
      at 0x7b934bad3420>, ''ITU-R BT.2100 PQ'': <function ootf_inverse_BT2100_PQ at
      0x7b934bad2a20>})'
  - constant-name: colour.models.rgb.transfer_functions.aces.CONSTANTS_ACES_PROXY_10
    type-name: Structure
    value: '{''CV_min'': 64, ''CV_max'': 940, ''steps_per_stop'': 50, ''mid_CV_offset'':
      425, ''mid_log_offset'': 2.5}'
  - constant-name: colour.models.rgb.transfer_functions.aces.CONSTANTS_ACES_PROXY_12
    type-name: Structure
    value: '{''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'': 200, ''mid_CV_offset'':
      1700, ''mid_log_offset'': 2.5}'
  - constant-name: colour.models.rgb.transfer_functions.aces.CONSTANTS_ACES_PROXY
    type-name: dict
    value: '{10: {''CV_min'': 64, ''CV_max'': 940, ''steps_per_stop'': 50, ''mid_CV_offset'':
      425, ''mid_log_offset'': 2.5}, 12: {''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'':
      200, ''mid_CV_offset'': 1700, ''mid_log_offset...'
  - constant-name: colour.models.rgb.transfer_functions.aces.CONSTANTS_ACES_CCT
    type-name: Structure
    value: '{''X_BRK'': 0.0078125, ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545,
      ''B'': 0.0729055341958355}'
  - constant-name: colour.models.rgb.transfer_functions.apple_log_profile.CONSTANTS_APPLE_LOG_PROFILE
    type-name: Structure
    value: '{''R_0'': -0.05641088, ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'':
      0.00964052, ''gamma'': 0.08550479, ''delta'': 0.69336945}'
  - constant-name: colour.models.rgb.transfer_functions.arib_std_b67.CONSTANTS_ARIBSTDB67
    type-name: Structure
    value: '{''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}'
  - constant-name: colour.models.rgb.transfer_functions.arri.DATA_ALEXA_LOG_C_CURVE_BCL
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''SUP 3.x'': {160: (0.0928, 0.8128), 200: (0.0928, 0.8341),
      250: (0.0928, 0.8549), 320: (0.0928, 0.8773), 400: (0.0928, 0.8968), 500: (0.0928,
      0.9158), 640: (0.0928, 0.9362), 800: (0.0...'
  - constant-name: colour.models.rgb.transfer_functions.arri.DATA_ALEXA_LOG_C_CURVE_CONVERSION
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''SUP 3.x'': CanonicalMapping({''Normalised Sensor Signal'':
      {160: (0.00468, 40.0, -0.076072, 0.269036, 0.381991, 42.062665, -0.071569, 0.125266),
      200: (0.004597, 50.0, -0.11874, 0.26600...'
  - constant-name: colour.models.rgb.transfer_functions.arri.CONSTANTS_ARRILOGC4
    type-name: Structure
    value: '{''a'': 2231.8263090676883, ''b'': 0.9071358748778103, ''c'': 0.09286412512218964,
      ''s'': 0.1135972086105891, ''t'': -0.01805699611991131}'
  - constant-name: colour.models.rgb.transfer_functions.blackmagic_design.CONSTANTS_BLACKMAGIC_FILM_GENERATION_5
    type-name: Structure
    value: '{''A'': 0.08692876065491224, ''B'': 0.005494072432257808, ''C'': 0.5300133392291939,
      ''D'': 8.283605932402494, ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog_v1 at 0x7b934baa6020>,
      ''v1.2'': <function log_encoding_CanonLog_v1_2 at 0x7b934baa6160>})'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog_v1 at 0x7b934baa60c0>,
      ''v1.2'': <function log_decoding_CanonLog_v1_2 at 0x7b934baa6200>})'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_2_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog2_v1 at 0x7b934baa63e0>,
      ''v1.2'': <function log_encoding_CanonLog2_v1_2 at 0x7b934baa6520>})'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_2_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog2_v1 at 0x7b934baa6480>,
      ''v1.2'': <function log_decoding_CanonLog2_v1_2 at 0x7b934baa65c0>})'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_3_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_CanonLog3_v1 at 0x7b934baa67a0>,
      ''v1.2'': <function log_encoding_CanonLog3_v1_2 at 0x7b934baa68e0>})'
  - constant-name: colour.models.rgb.transfer_functions.canon.CANON_LOG_3_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_CanonLog3_v1 at 0x7b934baa6840>,
      ''v1.2'': <function log_decoding_CanonLog3_v1_2 at 0x7b934baa6980>})'
  - constant-name: colour.models.rgb.transfer_functions.davinci_intermediate.CONSTANTS_DAVINCI_INTERMEDIATE
    type-name: Structure
    value: '{''DI_A'': 0.0075, ''DI_B'': 7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855,
      ''DI_LIN_CUT'': 0.00262409, ''DI_LOG_CUT'': 0.02740668}'
  - constant-name: colour.models.rgb.transfer_functions.dicom_gsdf.CONSTANTS_DICOMGSDF
    type-name: Structure
    value: '{''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068,...'
  - constant-name: colour.models.rgb.transfer_functions.fujifilm_f_log.CONSTANTS_FLOG
    type-name: Structure
    value: '{''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'':
      0.009468, ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}'
  - constant-name: colour.models.rgb.transfer_functions.fujifilm_f_log.CONSTANTS_FLOG2
    type-name: Structure
    value: '{''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'':
      0.064829, ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2020.CONSTANTS_BT2020
    type-name: Structure
    value: '{''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'': <function
      <lambda> at 0x7b934bad19e0>}'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2020.CONSTANTS_BT2020_PRECISE
    type-name: Structure
    value: '{''alpha'': <function <lambda> at 0x7b934bad1a80>, ''beta'': <function
      <lambda> at 0x7b934bad1b20>}'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.WEIGHTS_BT2100_HLG
    type-name: ndarray
    value: array([ 0.2627,  0.678 ,  0.0593])
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.CONSTANTS_BT2100_HLG
    type-name: Structure
    value: '{''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.559910729529562}'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.BT2100_HLG_EOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_BT2100_HLG_1 at
      0x7b934bad2d40>, ''ITU-R BT.2100-2'': <function eotf_BT2100_HLG_2 at 0x7b934bad2de0>})'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.BT2100_HLG_EOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function eotf_inverse_BT2100_HLG_1
      at 0x7b934bad2f20>, ''ITU-R BT.2100-2'': <function eotf_inverse_BT2100_HLG_2
      at 0x7b934bad2fc0>})'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.BT2100_HLG_OOTF_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_BT2100_HLG_1 at
      0x7b934bad3100>, ''ITU-R BT.2100-2'': <function ootf_BT2100_HLG_2 at 0x7b934bad31a0>})'
  - constant-name: colour.models.rgb.transfer_functions.itur_bt_2100.BT2100_HLG_OOTF_INVERSE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.2100-1'': <function ootf_inverse_BT2100_HLG_1
      at 0x7b934bad32e0>, ''ITU-R BT.2100-2'': <function ootf_inverse_BT2100_HLG_2
      at 0x7b934bad3380>})'
  - constant-name: colour.models.rgb.transfer_functions.leica_l_log.CONSTANTS_LLOG
    type-name: Structure
    value: '{''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27,
      ''d'': 1.3, ''e'': 0.0115, ''f'': 0.6}'
  - constant-name: colour.models.rgb.transfer_functions.nikon_n_log.CONSTANTS_NLOG
    type-name: Structure
    value: '{''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087,
      ''b'': 0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}'
  - constant-name: colour.models.rgb.transfer_functions.panasonic_v_log.CONSTANTS_VLOG
    type-name: Structure
    value: '{''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'':
      0.598206}'
  - constant-name: colour.models.rgb.transfer_functions.red.LOG3G10_ENCODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_encoding_Log3G10_v1 at 0x7b934bad9580>,
      ''v2'': <function log_encoding_Log3G10_v2 at 0x7b934bad96c0>, ''v3'': <function
      log_encoding_Log3G10_v3 at 0x7b934bad9800>})'
  - constant-name: colour.models.rgb.transfer_functions.red.LOG3G10_DECODING_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''v1'': <function log_decoding_Log3G10_v1 at 0x7b934bad9620>,
      ''v2'': <function log_decoding_Log3G10_v2 at 0x7b934bad9760>, ''v3'': <function
      log_decoding_Log3G10_v3 at 0x7b934bad98a0>})'
  - constant-name: colour.models.rgb.transfer_functions.st_2084.CONSTANTS_ST2084
    type-name: Structure
    value: '{''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}'
  - constant-name: colour.models.rgb.ycbcr.WEIGHTS_YCBCR
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ITU-R BT.601'': array([ 0.299,  0.114]), ''ITU-R BT.709'':
      array([ 0.2126,  0.0722]), ''ITU-R BT.2020'': array([ 0.2627,  0.0593]), ''SMPTE-240M'':
      array([ 0.2122,  0.0865])})'
  - constant-name: colour.models.rgb.ycocg.MATRIX_RGB_TO_YCOCG
    type-name: ndarray
    value: |-
      array([[ 0.25,  0.5 ,  0.25],
             [ 0.5 ,  0.  , -0.5 ],
             [-0.25,  0.5 , -0.25]])
  - constant-name: colour.models.rgb.ycocg.MATRIX_YCOCG_TO_RGB
    type-name: ndarray
    value: |-
      array([[ 1,  1, -1],
             [ 1,  0,  1],
             [ 1, -1, -1]])
  - constant-name: colour.notation.CSS_COLOR_3_BASIC
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.CSS_COLOR_3_EXTENDED
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''aliceblue'': ''#F0F8FF'', ''antiquewhite'': ''#FAEBD7'',
      ''aqua'': ''#00FFFF'', ''aquamarine'': ''#7FFFD4'', ''azure'': ''#F0FFFF'',
      ''beige'': ''#F5F5DC'', ''bisque'': ''#FFE4C4'', ''black'': ''#000000'', ''blanc...'
  - constant-name: colour.notation.CSS_COLOR_3
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.MUNSELL_COLOURS_ALL
    type-name: tuple
    value: ((('2.5GY', 0.2, 2.0), array([ 0.713,  1.414,  0.237])), (('5GY', 0.2,
      2.0), array([ 0.449,  1.145,  0.237])), (('7.5GY', 0.2, 2.0), array([ 0.262,  0.837,  0.237])),
      (('7.5GY', 0.2, 4.0), array([-0.0...
  - constant-name: colour.notation.MUNSELL_COLOURS_1929
    type-name: tuple
    value: ((('10RP', 2.0, 2.0), array([ 0.3532,  0.2957,  3.126 ])), (('10RP', 2.0,
      4.0), array([ 0.385 ,  0.2778,  3.126 ])), (('10RP', 2.0, 6.0), array([ 0.4139,  0.2608,  3.126
      ])), (('10RP', 2.0, 8.0), arra...
  - constant-name: colour.notation.MUNSELL_COLOURS_REAL
    type-name: tuple
    value: ((('10RP', 1.0, 2.0), array([ 0.3629,  0.271 ,  1.21  ])), (('10RP', 1.0,
      4.0), array([ 0.392 ,  0.2423,  1.21  ])), (('10RP', 1.0, 6.0), array([ 0.4151,  0.2169,  1.21  ])),
      (('10RP', 1.0, 8.0), arra...
  - constant-name: colour.notation.MUNSELL_COLOURS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Munsell Colours All'': (((''2.5GY'', 0.2, 2.0), array([
      0.713,  1.414,  0.237])), ((''5GY'', 0.2, 2.0), array([ 0.449,  1.145,  0.237])),
      ((''7.5GY'', 0.2, 2.0), array([ 0.262,  0.837,  0....'
  - constant-name: colour.notation.MUNSELL_VALUE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Priest 1920'': <function munsell_value_Priest1920
      at 0x7b934919ade0>, ''Munsell 1933'': <function munsell_value_Munsell1933 at
      0x7b934919ae80>, ''Moon 1943'': <function munsell_value_Moo...'
  - constant-name: colour.notation.datasets.CSS_COLOR_3_BASIC
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.datasets.CSS_COLOR_3_EXTENDED
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''aliceblue'': ''#F0F8FF'', ''antiquewhite'': ''#FAEBD7'',
      ''aqua'': ''#00FFFF'', ''aquamarine'': ''#7FFFD4'', ''azure'': ''#F0FFFF'',
      ''beige'': ''#F5F5DC'', ''bisque'': ''#FFE4C4'', ''black'': ''#000000'', ''blanc...'
  - constant-name: colour.notation.datasets.CSS_COLOR_3
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.datasets.MUNSELL_COLOURS_ALL
    type-name: tuple
    value: ((('2.5GY', 0.2, 2.0), array([ 0.713,  1.414,  0.237])), (('5GY', 0.2,
      2.0), array([ 0.449,  1.145,  0.237])), (('7.5GY', 0.2, 2.0), array([ 0.262,  0.837,  0.237])),
      (('7.5GY', 0.2, 4.0), array([-0.0...
  - constant-name: colour.notation.datasets.MUNSELL_COLOURS_1929
    type-name: tuple
    value: ((('10RP', 2.0, 2.0), array([ 0.3532,  0.2957,  3.126 ])), (('10RP', 2.0,
      4.0), array([ 0.385 ,  0.2778,  3.126 ])), (('10RP', 2.0, 6.0), array([ 0.4139,  0.2608,  3.126
      ])), (('10RP', 2.0, 8.0), arra...
  - constant-name: colour.notation.datasets.MUNSELL_COLOURS_REAL
    type-name: tuple
    value: ((('10RP', 1.0, 2.0), array([ 0.3629,  0.271 ,  1.21  ])), (('10RP', 1.0,
      4.0), array([ 0.392 ,  0.2423,  1.21  ])), (('10RP', 1.0, 6.0), array([ 0.4151,  0.2169,  1.21  ])),
      (('10RP', 1.0, 8.0), arra...
  - constant-name: colour.notation.datasets.MUNSELL_COLOURS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Munsell Colours All'': (((''2.5GY'', 0.2, 2.0), array([
      0.713,  1.414,  0.237])), ((''5GY'', 0.2, 2.0), array([ 0.449,  1.145,  0.237])),
      ((''7.5GY'', 0.2, 2.0), array([ 0.262,  0.837,  0....'
  - constant-name: colour.notation.datasets.css_color_3.CSS_COLOR_3_BASIC
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.datasets.css_color_3.CSS_COLOR_3_EXTENDED
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''aliceblue'': ''#F0F8FF'', ''antiquewhite'': ''#FAEBD7'',
      ''aqua'': ''#00FFFF'', ''aquamarine'': ''#7FFFD4'', ''azure'': ''#F0FFFF'',
      ''beige'': ''#F5F5DC'', ''bisque'': ''#FFE4C4'', ''black'': ''#000000'', ''blanc...'
  - constant-name: colour.notation.datasets.css_color_3.CSS_COLOR_3
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''black'': ''#000000'', ''silver'': ''#C0C0C0'', ''gray'':
      ''#808080'', ''white'': ''#FFFFFF'', ''maroon'': ''#800000'', ''red'': ''#FF0000'',
      ''purple'': ''#800080'', ''fuchsia'': ''#FF00FF'', ''green'': ''#008000'', ...'
  - constant-name: colour.notation.datasets.munsell.MUNSELL_COLOURS_ALL
    type-name: tuple
    value: ((('2.5GY', 0.2, 2.0), array([ 0.713,  1.414,  0.237])), (('5GY', 0.2,
      2.0), array([ 0.449,  1.145,  0.237])), (('7.5GY', 0.2, 2.0), array([ 0.262,  0.837,  0.237])),
      (('7.5GY', 0.2, 4.0), array([-0.0...
  - constant-name: colour.notation.datasets.munsell.MUNSELL_COLOURS_1929
    type-name: tuple
    value: ((('10RP', 2.0, 2.0), array([ 0.3532,  0.2957,  3.126 ])), (('10RP', 2.0,
      4.0), array([ 0.385 ,  0.2778,  3.126 ])), (('10RP', 2.0, 6.0), array([ 0.4139,  0.2608,  3.126
      ])), (('10RP', 2.0, 8.0), arra...
  - constant-name: colour.notation.datasets.munsell.MUNSELL_COLOURS_REAL
    type-name: tuple
    value: ((('10RP', 1.0, 2.0), array([ 0.3629,  0.271 ,  1.21  ])), (('10RP', 1.0,
      4.0), array([ 0.392 ,  0.2423,  1.21  ])), (('10RP', 1.0, 6.0), array([ 0.4151,  0.2169,  1.21  ])),
      (('10RP', 1.0, 8.0), arra...
  - constant-name: colour.notation.datasets.munsell.MUNSELL_COLOURS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Munsell Colours All'': (((''2.5GY'', 0.2, 2.0), array([
      0.713,  1.414,  0.237])), ((''5GY'', 0.2, 2.0), array([ 0.449,  1.145,  0.237])),
      ((''7.5GY'', 0.2, 2.0), array([ 0.262,  0.837,  0....'
  - constant-name: colour.notation.datasets.munsell.all.MUNSELL_COLOURS_ALL
    type-name: tuple
    value: ((('2.5GY', 0.2, 2.0), array([ 0.713,  1.414,  0.237])), (('5GY', 0.2,
      2.0), array([ 0.449,  1.145,  0.237])), (('7.5GY', 0.2, 2.0), array([ 0.262,  0.837,  0.237])),
      (('7.5GY', 0.2, 4.0), array([-0.0...
  - constant-name: colour.notation.datasets.munsell.experimental.MUNSELL_COLOURS_1929
    type-name: tuple
    value: ((('10RP', 2.0, 2.0), array([ 0.3532,  0.2957,  3.126 ])), (('10RP', 2.0,
      4.0), array([ 0.385 ,  0.2778,  3.126 ])), (('10RP', 2.0, 6.0), array([ 0.4139,  0.2608,  3.126
      ])), (('10RP', 2.0, 8.0), arra...
  - constant-name: colour.notation.datasets.munsell.real.MUNSELL_COLOURS_REAL
    type-name: tuple
    value: ((('10RP', 1.0, 2.0), array([ 0.3629,  0.271 ,  1.21  ])), (('10RP', 1.0,
      4.0), array([ 0.392 ,  0.2423,  1.21  ])), (('10RP', 1.0, 6.0), array([ 0.4151,  0.2169,  1.21  ])),
      (('10RP', 1.0, 8.0), arra...
  - constant-name: colour.notation.munsell.MUNSELL_GRAY_PATTERN
    type-name: str
    value: '''N(?P<value>[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)'''
  - constant-name: colour.notation.munsell.MUNSELL_COLOUR_PATTERN
    type-name: str
    value: '''(?P<hue>[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)\\s*(?P<letter>BG|GY|YR|RP|PB|B|G|Y|R|P)\\s*(?P<value>[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)\\s*\\/\\s*(?P<chroma>[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)'''
  - constant-name: colour.notation.munsell.MUNSELL_GRAY_FORMAT
    type-name: str
    value: '''N{0}'''
  - constant-name: colour.notation.munsell.MUNSELL_COLOUR_FORMAT
    type-name: str
    value: '''{0} {1}/{2}'''
  - constant-name: colour.notation.munsell.MUNSELL_GRAY_EXTENDED_FORMAT
    type-name: str
    value: '''N{0:.{1}f}'''
  - constant-name: colour.notation.munsell.MUNSELL_COLOUR_EXTENDED_FORMAT
    type-name: str
    value: '''{0:.{1}f}{2} {3:.{4}f}/{5:.{6}f}'''
  - constant-name: colour.notation.munsell.MUNSELL_HUE_LETTER_CODES
    type-name: Lookup
    value: '{''BG'': 2, ''GY'': 4, ''YR'': 6, ''RP'': 8, ''PB'': 10, ''B'': 1, ''G'':
      3, ''Y'': 5, ''R'': 7, ''P'': 9}'
  - constant-name: colour.notation.munsell.ILLUMINANT_NAME_MUNSELL
    type-name: str
    value: '''C'''
  - constant-name: colour.notation.munsell.CCS_ILLUMINANT_MUNSELL
    type-name: ndarray
    value: array([ 0.31006,  0.31616])
  - constant-name: colour.notation.munsell.MUNSELL_VALUE_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Priest 1920'': <function munsell_value_Priest1920
      at 0x7b934919ade0>, ''Munsell 1933'': <function munsell_value_Munsell1933 at
      0x7b934919ae80>, ''Moon 1943'': <function munsell_value_Moo...'
  - constant-name: colour.phenomena.rayleigh.CONSTANT_STANDARD_AIR_TEMPERATURE
    type-name: float
    value: '288.15'
  - constant-name: colour.phenomena.rayleigh.CONSTANT_STANDARD_CO2_CONCENTRATION
    type-name: int
    value: '300'
  - constant-name: colour.phenomena.rayleigh.CONSTANT_AVERAGE_PRESSURE_MEAN_SEA_LEVEL
    type-name: int
    value: '101325'
  - constant-name: colour.phenomena.rayleigh.CONSTANT_DEFAULT_LATITUDE
    type-name: int
    value: '0'
  - constant-name: colour.phenomena.rayleigh.CONSTANT_DEFAULT_ALTITUDE
    type-name: int
    value: '0'
  - constant-name: colour.plotting.SD_ASTMG173_ETR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   8.20000000e-02],
                            [  2.80500000e+02,   9.90000000e-02],
                            [  2.81000000e+02,   1.50000000e-01],
                          ...
  - constant-name: colour.plotting.SD_ASTMG173_GLOBAL_TILT
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   4.73090000e-23],
                            [  2.80500000e+02,   1.23070000e-21],
                            [  2.81000000e+02,   5.68950000e-21],
                          ...
  - constant-name: colour.plotting.SD_ASTMG173_DIRECT_CIRCUMSOLAR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   2.53610000e-26],
                            [  2.80500000e+02,   1.09170000e-24],
                            [  2.81000000e+02,   6.12530000e-24],
                          ...
  - constant-name: colour.plotting.CONSTANTS_COLOUR_STYLE
    type-name: Structure
    value: '{''colour'': {''darkest'': ''#111111'', ''darker'': ''#222222'', ''dark'':
      ''#333333'', ''dim'': ''#505050'', ''average'': ''#808080'', ''light'': ''#D5D5D5'',
      ''bright'': ''#EEEEEE'', ''brighter'': ''#F0F0F0'', ''brightest'': ''#F5F5F5''...'
  - constant-name: colour.plotting.CONSTANTS_ARROW_STYLE
    type-name: Structure
    value: '{''color'': ''#333333'', ''headwidth'': 4, ''headlength'': 5, ''width'':
      0.5, ''shrink'': 0.1, ''connectionstyle'': ''arc3,rad=-0.2''}'
  - constant-name: colour.plotting.METHODS_CHROMATICITY_DIAGRAM
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931'': {''XYZ_to_ij'': <function <lambda> at
      0x7b934919a5c0>, ''ij_to_XYZ'': <function <lambda> at 0x7b93491998a0>, ''xy_to_ij'':
      <function <lambda> at 0x7b9349174720>, ''uv_to_ij'': <f...'
  - constant-name: colour.plotting.LABELS_CHROMATICITY_DIAGRAM_DEFAULT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931'': (390, 460, 470, 480, 490, 500, 510, 520,
      540, 560, 580, 600, 620, 700), ''CIE 1960 UCS'': (420, 440, 450, 460, 470, 480,
      490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 5...'
  - constant-name: colour.plotting.LABELS_PLANCKIAN_LOCUS_DEFAULT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Default'': (1666.6666666666667, 2000, 2500, 3000,
      4000, 6000, 10000.0), ''Mireds'': (0, 100, 200, 300, 400, 500, 600, 700, 800,
      900, 1000)})'
  - constant-name: colour.plotting.common.CONSTANTS_COLOUR_STYLE
    type-name: Structure
    value: '{''colour'': {''darkest'': ''#111111'', ''darker'': ''#222222'', ''dark'':
      ''#333333'', ''dim'': ''#505050'', ''average'': ''#808080'', ''light'': ''#D5D5D5'',
      ''bright'': ''#EEEEEE'', ''brighter'': ''#F0F0F0'', ''brightest'': ''#F5F5F5''...'
  - constant-name: colour.plotting.common.CONSTANTS_ARROW_STYLE
    type-name: Structure
    value: '{''color'': ''#333333'', ''headwidth'': 4, ''headlength'': 5, ''width'':
      0.5, ''shrink'': 0.1, ''connectionstyle'': ''arc3,rad=-0.2''}'
  - constant-name: colour.plotting.datasets.SD_ASTMG173_ETR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   8.20000000e-02],
                            [  2.80500000e+02,   9.90000000e-02],
                            [  2.81000000e+02,   1.50000000e-01],
                          ...
  - constant-name: colour.plotting.datasets.SD_ASTMG173_GLOBAL_TILT
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   4.73090000e-23],
                            [  2.80500000e+02,   1.23070000e-21],
                            [  2.81000000e+02,   5.68950000e-21],
                          ...
  - constant-name: colour.plotting.datasets.SD_ASTMG173_DIRECT_CIRCUMSOLAR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   2.53610000e-26],
                            [  2.80500000e+02,   1.09170000e-24],
                            [  2.81000000e+02,   6.12530000e-24],
                          ...
  - constant-name: colour.plotting.datasets.astm_g_173.DATA_ASTMG173_ETR
    type-name: dict
    value: '{280.0: 0.082, 280.5: 0.099, 281.0: 0.15, 281.5: 0.212, 282.0: 0.267,
      282.5: 0.303, 283.0: 0.325, 283.5: 0.323, 284.0: 0.299, 284.5: 0.25024, 285.0:
      0.17589, 285.5: 0.155, 286.0: 0.242, 286.5: 0.333, ...'
  - constant-name: colour.plotting.datasets.astm_g_173.DATA_ASTMG173_GLOBAL_TILT
    type-name: dict
    value: '{280.0: 4.7309e-23, 280.5: 1.2307e-21, 281.0: 5.6895e-21, 281.5: 1.5662e-19,
      282.0: 1.1946e-18, 282.5: 4.5436e-18, 283.0: 1.8452e-17, 283.5: 3.536e-17, 284.0:
      7.267e-16, 284.5: 2.4856e-15, 285.0: 8.01...'
  - constant-name: colour.plotting.datasets.astm_g_173.DATA_ASTMG173_DIRECT_CIRCUMSOLAR
    type-name: dict
    value: '{280.0: 2.5361e-26, 280.5: 1.0917e-24, 281.0: 6.1253e-24, 281.5: 2.7479e-22,
      282.0: 2.8346e-21, 282.5: 1.3271e-20, 283.0: 6.7646e-20, 283.5: 1.4614e-19,
      284.0: 4.9838e-18, 284.5: 2.1624e-17, 285.0: 8....'
  - constant-name: colour.plotting.datasets.astm_g_173.SD_ASTMG173_ETR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   8.20000000e-02],
                            [  2.80500000e+02,   9.90000000e-02],
                            [  2.81000000e+02,   1.50000000e-01],
                          ...
  - constant-name: colour.plotting.datasets.astm_g_173.SD_ASTMG173_GLOBAL_TILT
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   4.73090000e-23],
                            [  2.80500000e+02,   1.23070000e-21],
                            [  2.81000000e+02,   5.68950000e-21],
                          ...
  - constant-name: colour.plotting.datasets.astm_g_173.SD_ASTMG173_DIRECT_CIRCUMSOLAR
    type-name: SpectralDistribution
    value: |-
      SpectralDistribution([[  2.80000000e+02,   2.53610000e-26],
                            [  2.80500000e+02,   1.09170000e-24],
                            [  2.81000000e+02,   6.12530000e-24],
                          ...
  - constant-name: colour.plotting.diagrams.METHODS_CHROMATICITY_DIAGRAM
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931'': {''XYZ_to_ij'': <function <lambda> at
      0x7b934919a5c0>, ''ij_to_XYZ'': <function <lambda> at 0x7b93491998a0>, ''xy_to_ij'':
      <function <lambda> at 0x7b9349174720>, ''uv_to_ij'': <f...'
  - constant-name: colour.plotting.diagrams.LABELS_CHROMATICITY_DIAGRAM_DEFAULT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 1931'': (390, 460, 470, 480, 490, 500, 510, 520,
      540, 560, 580, 600, 620, 700), ''CIE 1960 UCS'': (420, 440, 450, 460, 470, 480,
      490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 5...'
  - constant-name: colour.plotting.models.COLOURSPACE_MODELS_AXIS_ORDER
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CAM02LCD'': (1, 2, 0), ''CAM02SCD'': (1, 2, 0), ''CAM02UCS'':
      (1, 2, 0), ''CAM16LCD'': (1, 2, 0), ''CAM16SCD'': (1, 2, 0), ''CAM16UCS'': (1,
      2, 0), ''CIE 1931'': (0, 1, 2), ''CIE 1960 UCS'': (0, 1...'
  - constant-name: colour.plotting.section.MAPPING_AXIS_TO_PLANE
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''+x'': (1, 2), ''+y'': (0, 2), ''+z'': (0, 1)})'
  - constant-name: colour.plotting.temperature.LABELS_PLANCKIAN_LOCUS_DEFAULT
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Default'': (1666.6666666666667, 2000, 2500, 3000,
      4000, 6000, 10000.0), ''Mireds'': (0, 100, 200, 300, 400, 500, 600, 700, 800,
      900, 1000)})'
  - constant-name: colour.plotting.tm3018.components.ROOT_RESOURCES_ANSIIESTM3018
    type-name: str
    value: '''/home/amadeus/.pyenv/versions/3.13.5/lib/python3.13/site-packages/colour/plotting/tm3018/resources'''
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_SIZE_FULL
    type-name: tuple
    value: (8.27, 11.69)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_ROW_HEIGHT_RATIOS_FULL
    type-name: tuple
    value: (1, 2, 24, 3, 1)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_PADDING_FULL
    type-name: dict
    value: '{''w_pad'': 0.2, ''h_pad'': 0.1, ''hspace'': 0, ''wspace'': 0}'
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_SIZE_INTERMEDIATE
    type-name: tuple
    value: (8.27, 4.974468085106382)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_ROW_HEIGHT_RATIOS_INTERMEDIATE
    type-name: tuple
    value: (1, 8, 1)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_PADDING_INTERMEDIATE
    type-name: dict
    value: '{''w_pad'': 0.2, ''h_pad'': 0.1, ''hspace'': 0, ''wspace'': 0}'
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_SIZE_SIMPLE
    type-name: tuple
    value: (8.27, 8.27)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_ROW_HEIGHT_RATIOS_SIMPLE
    type-name: tuple
    value: (1, 8, 1)
  - constant-name: colour.plotting.tm3018.report.CONSTANT_REPORT_PADDING_SIMPLE
    type-name: dict
    value: '{''w_pad'': 0.2, ''h_pad'': 0.1, ''hspace'': 0, ''wspace'': 0}'
  - constant-name: colour.plotting.tm3018.report.CONSTANTS_REPORT_STYLE
    type-name: dict
    value: '{''axes.grid'': False, ''axes.labelpad'': 3, ''axes.labelsize'': ''x-small'',
      ''axes.labelweight'': ''bold'', ''legend.frameon'': False, ''xtick.labelsize'':
      ''x-small'', ''ytick.labelsize'': ''x-small'', ''xtick.direction''...'
  - constant-name: colour.plotting.tm3018.report.CONTENT_REPORT_HEADER
    type-name: str
    value: '''IES TM-30-18 Colour Rendition Report'''
  - constant-name: colour.plotting.tm3018.report.CONTENT_REPORT_FOOTER
    type-name: str
    value: '''Colours are for visual orientation purposes only. Created with Colour{0}'''
  - constant-name: colour.quality.SDS_TCS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'TCS01': SpectralDistribution([[  3.60000000e+02,   1.16000000e-01],
                            [  3.65000000e+02,   1.36000000e-01],
                            [  3.70000000e+02,   1.59000000...
  - constant-name: colour.quality.SDS_VS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'NIST CQS 7.4': {'VS1': SpectralDistribution([[  3.80000000e+02,   1.08600000e-01],
                            [  3.85000000e+02,   1.38000000e-01],
                            [  3.90000000e+0...
  - constant-name: colour.quality.COLOUR_QUALITY_SCALE_METHODS
    type-name: tuple
    value: ('NIST CQS 7.4', 'NIST CQS 9.0')
  - constant-name: colour.quality.COLOUR_FIDELITY_INDEX_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE 2017'': <function colour_fidelity_index_CIE2017
      at 0x7b9348e81a80>, ''ANSI/IES TM-30-18'': <function colour_fidelity_index_ANSIIESTM3018
      at 0x7b9348ee0d60>})'
  - constant-name: colour.quality.cfi2017.SPECTRAL_SHAPE_CIE2017
    type-name: SpectralShape
    value: SpectralShape(380, 780, 1)
  - constant-name: colour.quality.cfi2017.ROOT_RESOURCES_CIE2017
    type-name: str
    value: '''/home/amadeus/.pyenv/versions/3.13.5/lib/python3.13/site-packages/colour/quality/datasets'''
  - constant-name: colour.quality.cqs.GAMUT_AREA_D65
    type-name: int
    value: '8210'
  - constant-name: colour.quality.cqs.COLOUR_QUALITY_SCALE_METHODS
    type-name: tuple
    value: ('NIST CQS 7.4', 'NIST CQS 9.0')
  - constant-name: colour.quality.datasets.SDS_TCS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'TCS01': SpectralDistribution([[  3.60000000e+02,   1.16000000e-01],
                            [  3.65000000e+02,   1.36000000e-01],
                            [  3.70000000e+02,   1.59000000...
  - constant-name: colour.quality.datasets.SDS_VS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'NIST CQS 7.4': {'VS1': SpectralDistribution([[  3.80000000e+02,   1.08600000e-01],
                            [  3.85000000e+02,   1.38000000e-01],
                            [  3.90000000e+0...
  - constant-name: colour.quality.datasets.tcs.INDEXES_TO_NAMES_TCS
    type-name: dict
    value: '{1: ''TCS01'', 2: ''TCS02'', 3: ''TCS03'', 4: ''TCS04'', 5: ''TCS05'',
      6: ''TCS06'', 7: ''TCS07'', 8: ''TCS08'', 9: ''TCS09'', 10: ''TCS10'', 11: ''TCS11'',
      12: ''TCS12'', 13: ''TCS13'', 14: ''TCS14''}'
  - constant-name: colour.quality.datasets.tcs.APPROXIMATE_MUNSELL_NOTATIONS_TCS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''TCS01'': ''7.5 R 6/4'', ''TCS02'': ''5 Y 6/4'', ''TCS03'':
      ''5 GY 6/8'', ''TCS04'': ''2.5 G 6/6'', ''TCS05'': ''10 BG 6/4'', ''TCS06'':
      ''5 PB 6/8'', ''TCS07'': ''2.5 P 6/8'', ''TCS08'': ''10 P 6/8'', ''TCS09'':
      ''4...'
  - constant-name: colour.quality.datasets.tcs.DATA_TCS
    type-name: dict
    value: '{''TCS01'': {360: 0.116, 365: 0.136, 370: 0.159, 375: 0.19, 380: 0.219,
      385: 0.239, 390: 0.252, 395: 0.256, 400: 0.256, 405: 0.254, 410: 0.252, 415:
      0.248, 420: 0.244, 425: 0.24, 430: 0.237, 435: 0.232,...'
  - constant-name: colour.quality.datasets.tcs.SDS_TCS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'TCS01': SpectralDistribution([[  3.60000000e+02,   1.16000000e-01],
                            [  3.65000000e+02,   1.36000000e-01],
                            [  3.70000000e+02,   1.59000000...
  - constant-name: colour.quality.datasets.vs.INDEXES_TO_NAMES_VS
    type-name: dict
    value: '{1: ''VS1'', 2: ''VS2'', 3: ''VS3'', 4: ''VS4'', 5: ''VS5'', 6: ''VS6'',
      7: ''VS7'', 8: ''VS8'', 9: ''VS9'', 10: ''VS10'', 11: ''VS11'', 12: ''VS12'',
      13: ''VS13'', 14: ''VS14'', 15: ''VS15''}'
  - constant-name: colour.quality.datasets.vs.APPROXIMATE_MUNSELL_NOTATIONS_VS_NISTCQS74
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''VS1'': ''7.5P 4/10'', ''VS2'': ''10PB 4/10'', ''VS3'':
      ''5PB 4/2'', ''VS4'': ''7.5B 5/10'', ''VS5'': ''10B G6/8'', ''VS6'': ''2.5BG
      6/10'', ''VS7'': ''2.5G 6/12'', ''VS8'': ''7.5GY 7/10'', ''VS9'': ''2.5GY 8/10'',
      ''V...'
  - constant-name: colour.quality.datasets.vs.APPROXIMATE_MUNSELL_NOTATIONS_VS_NISTCQS90
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''VS1'': ''5R 4/14'', ''VS2'': ''10R 6/12'', ''VS3'':
      ''7.5YR 7/12'', ''VS4'': ''5Y 8-12'', ''VS5'': ''2.5GY 8/10'', ''VS6'': ''7.5GY
      7/10'', ''VS7'': ''2.5G 6/12'', ''VS8'': ''2.5BG 6/10'', ''VS9'': ''10BG 6/8'',
      ''VS1...'
  - constant-name: colour.quality.datasets.vs.DATA_VS
    type-name: dict
    value: '{''NIST CQS 7.4'': {''VS1'': {380: 0.1086, 385: 0.138, 390: 0.1729, 395:
      0.2167, 400: 0.2539, 405: 0.2785, 410: 0.2853, 415: 0.2883, 420: 0.286, 425:
      0.2761, 430: 0.2674, 435: 0.2565, 440: 0.2422, 445: 0....'
  - constant-name: colour.quality.datasets.vs.SDS_VS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'NIST CQS 7.4': {'VS1': SpectralDistribution([[  3.80000000e+02,   1.08600000e-01],
                            [  3.85000000e+02,   1.38000000e-01],
                            [  3.90000000e+0...
  - constant-name: colour.quality.ssi.SPECTRAL_SHAPE_SSI
    type-name: SpectralShape
    value: SpectralShape(375, 675, 1)
  - constant-name: colour.recovery.SPECTRAL_SHAPE_BASIS_FUNCTIONS_DYER2017
    type-name: SpectralShape
    value: SpectralShape(400, 700, 10)
  - constant-name: colour.recovery.BASIS_FUNCTIONS_DYER2017
    type-name: ndarray
    value: |-
      array([[[  7.05658023e-03,   4.26051045e-03,   1.20056186e-02],
              [  1.13814968e-02,   6.32121769e-03,   4.50279691e-02],
              [  2.77797866e-02,   2.49750816e-02,   1.88574571e-01],
              ...
  - constant-name: colour.recovery.SPECTRAL_SHAPE_OTSU2018
    type-name: SpectralShape
    value: SpectralShape(380, 730, 10)
  - constant-name: colour.recovery.BASIS_FUNCTIONS_OTSU2018
    type-name: ndarray
    value: |-
      array([[[ 0.03335979,  0.06981677,  0.14585866,  0.20858775,  0.22504578,
                0.23026047,  0.23468649,  0.23747913,  0.23792275,  0.23574334,
                0.23063697,  0.22486802,  0.22053885,  0.2...
  - constant-name: colour.recovery.CLUSTER_MEANS_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.10085069,  0.14557836,  0.21618956,  0.26241761,  0.2753966 ,
               0.28531384,  0.29863774,  0.3085517 ,  0.31710717,  0.32332277,
               0.32056881,  0.30730465,  0.29085635,  0.2697...
  - constant-name: colour.recovery.SELECTOR_ARRAY_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.33344497,  1.        , -3.        , -1.        ],
             [ 0.42855683,  0.        ,  1.        , -2.        ],
             [ 0.36834358,  1.        ,  5.        ,  7.        ],
             [ 0.389059...
  - constant-name: colour.recovery.SDS_SMITS1999
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'white': SpectralDistribution([[ 380.    ,    1.    ],
                            [ 417.7778,    1.    ],
                            [ 455.5556,    0.9999],
                            [ 493.3333,  ...
  - constant-name: colour.recovery.XYZ_TO_SD_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Jakob 2019'': <function XYZ_to_sd_Jakob2019 at 0x7b9348b70180>,
      ''Mallett 2019'': <function RGB_to_sd_Mallett2019 at 0x7b9348b70d60>, ''Meng
      2015'': <function XYZ_to_sd_Meng2015 at 0x7b9...'
  - constant-name: colour.recovery.datasets.SPECTRAL_SHAPE_BASIS_FUNCTIONS_DYER2017
    type-name: SpectralShape
    value: SpectralShape(400, 700, 10)
  - constant-name: colour.recovery.datasets.BASIS_FUNCTIONS_DYER2017
    type-name: ndarray
    value: |-
      array([[[  7.05658023e-03,   4.26051045e-03,   1.20056186e-02],
              [  1.13814968e-02,   6.32121769e-03,   4.50279691e-02],
              [  2.77797866e-02,   2.49750816e-02,   1.88574571e-01],
              ...
  - constant-name: colour.recovery.datasets.SPECTRAL_SHAPE_OTSU2018
    type-name: SpectralShape
    value: SpectralShape(380, 730, 10)
  - constant-name: colour.recovery.datasets.BASIS_FUNCTIONS_OTSU2018
    type-name: ndarray
    value: |-
      array([[[ 0.03335979,  0.06981677,  0.14585866,  0.20858775,  0.22504578,
                0.23026047,  0.23468649,  0.23747913,  0.23792275,  0.23574334,
                0.23063697,  0.22486802,  0.22053885,  0.2...
  - constant-name: colour.recovery.datasets.CLUSTER_MEANS_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.10085069,  0.14557836,  0.21618956,  0.26241761,  0.2753966 ,
               0.28531384,  0.29863774,  0.3085517 ,  0.31710717,  0.32332277,
               0.32056881,  0.30730465,  0.29085635,  0.2697...
  - constant-name: colour.recovery.datasets.SELECTOR_ARRAY_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.33344497,  1.        , -3.        , -1.        ],
             [ 0.42855683,  0.        ,  1.        , -2.        ],
             [ 0.36834358,  1.        ,  5.        ,  7.        ],
             [ 0.389059...
  - constant-name: colour.recovery.datasets.SDS_SMITS1999
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'white': SpectralDistribution([[ 380.    ,    1.    ],
                            [ 417.7778,    1.    ],
                            [ 455.5556,    0.9999],
                            [ 493.3333,  ...
  - constant-name: colour.recovery.datasets.dyer2017.SPECTRAL_SHAPE_BASIS_FUNCTIONS_DYER2017
    type-name: SpectralShape
    value: SpectralShape(400, 700, 10)
  - constant-name: colour.recovery.datasets.dyer2017.BASIS_FUNCTIONS_DYER2017
    type-name: ndarray
    value: |-
      array([[[  7.05658023e-03,   4.26051045e-03,   1.20056186e-02],
              [  1.13814968e-02,   6.32121769e-03,   4.50279691e-02],
              [  2.77797866e-02,   2.49750816e-02,   1.88574571e-01],
              ...
  - constant-name: colour.recovery.datasets.otsu2018.SPECTRAL_SHAPE_OTSU2018
    type-name: SpectralShape
    value: SpectralShape(380, 730, 10)
  - constant-name: colour.recovery.datasets.otsu2018.BASIS_FUNCTIONS_OTSU2018
    type-name: ndarray
    value: |-
      array([[[ 0.03335979,  0.06981677,  0.14585866,  0.20858775,  0.22504578,
                0.23026047,  0.23468649,  0.23747913,  0.23792275,  0.23574334,
                0.23063697,  0.22486802,  0.22053885,  0.2...
  - constant-name: colour.recovery.datasets.otsu2018.CLUSTER_MEANS_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.10085069,  0.14557836,  0.21618956,  0.26241761,  0.2753966 ,
               0.28531384,  0.29863774,  0.3085517 ,  0.31710717,  0.32332277,
               0.32056881,  0.30730465,  0.29085635,  0.2697...
  - constant-name: colour.recovery.datasets.otsu2018.SELECTOR_ARRAY_OTSU2018
    type-name: ndarray
    value: |-
      array([[ 0.33344497,  1.        , -3.        , -1.        ],
             [ 0.42855683,  0.        ,  1.        , -2.        ],
             [ 0.36834358,  1.        ,  5.        ,  7.        ],
             [ 0.389059...
  - constant-name: colour.recovery.datasets.smits1999.DATA_SMITS1999
    type-name: dict
    value: '{''white'': {380.0: 1.0, 417.7778: 1.0, 455.5556: 0.9999, 493.3333: 0.9993,
      531.1111: 0.9992, 568.8889: 0.9998, 606.6667: 1.0, 644.4444: 1.0, 682.2222:
      1.0, 720.0: 1.0}, ''cyan'': {380.0: 0.971, 417.7778:...'
  - constant-name: colour.recovery.datasets.smits1999.SDS_SMITS1999
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'white': SpectralDistribution([[ 380.    ,    1.    ],
                            [ 417.7778,    1.    ],
                            [ 455.5556,    0.9999],
                            [ 493.3333,  ...
  - constant-name: colour.recovery.jakob2019.SPECTRAL_SHAPE_JAKOB2019
    type-name: SpectralShape
    value: SpectralShape(360, 780, 5)
  - constant-name: colour.recovery.meng2015.SPECTRAL_SHAPE_MENG2015
    type-name: SpectralShape
    value: SpectralShape(360, 780, 5)
  - constant-name: colour.recovery.otsu2018.DATASET_REFERENCE_OTSU2018
    type-name: Dataset_Otsu2018
    value: <colour.recovery.otsu2018.Dataset_Otsu2018 object at 0x7b9348d2bcb0>
  - constant-name: colour.recovery.smits1999.PRIMARIES_SMITS1999
    type-name: ndarray
    value: |-
      array([[ 0.64,  0.33],
             [ 0.3 ,  0.6 ],
             [ 0.15,  0.06]])
  - constant-name: colour.recovery.smits1999.WHITEPOINT_NAME_SMITS1999
    type-name: str
    value: '''E'''
  - constant-name: colour.recovery.smits1999.CCS_WHITEPOINT_SMITS1999
    type-name: ndarray
    value: array([ 0.33333333,  0.33333333])
  - constant-name: colour.recovery.smits1999.RGB_COLOURSPACE_SMITS1999
    type-name: RGB_Colourspace
    value: |-
      RGB_Colourspace('Smits 1999',
                      [[ 0.64,  0.33],
                       [ 0.3 ,  0.6 ],
                       [ 0.15,  0.06]],
                      [ 0.33333333,  0.33333333],
                      'E',
           ...
  - constant-name: colour.temperature.UV_TO_CCT_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Krystek 1985'': <function uv_to_CCT_Krystek1985 at
      0x7b93491807c0>, ''Ohno 2013'': <function uv_to_CCT_Ohno2013 at 0x7b9349180e00>,
      ''Planck 1900'': <function uv_to_CCT_Planck1900 at 0x7...'
  - constant-name: colour.temperature.CCT_TO_UV_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''Krystek 1985'': <function CCT_to_uv_Krystek1985 at
      0x7b9349180860>, ''Ohno 2013'': <function CCT_to_uv_Ohno2013 at 0x7b9349180ea0>,
      ''Planck 1900'': <function CCT_to_uv_Planck1900 at 0x7...'
  - constant-name: colour.temperature.XY_TO_CCT_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE Illuminant D Series'': <function xy_to_CCT_CIE_D
      at 0x7b9349180220>, ''Hernandez 1999'': <function xy_to_CCT_Hernandez1999 at
      0x7b9349180400>, ''Kang 2002'': <function xy_to_CCT_Kang...'
  - constant-name: colour.temperature.CCT_TO_XY_METHODS
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''CIE Illuminant D Series'': <function CCT_to_xy_CIE_D
      at 0x7b93491802c0>, ''Hernandez 1999'': <function CCT_to_xy_Hernandez1999 at
      0x7b93491804a0>, ''Kang 2002'': <function CCT_to_xy_Kang...'
  - constant-name: colour.temperature.ohno2013.CCT_MINIMAL_OHNO2013
    type-name: int
    value: '1000'
  - constant-name: colour.temperature.ohno2013.CCT_MAXIMAL_OHNO2013
    type-name: int
    value: '100000'
  - constant-name: colour.temperature.ohno2013.CCT_DEFAULT_SPACING_OHNO2013
    type-name: float
    value: '1.001'
  - constant-name: colour.temperature.robertson1968.DATA_ISOTEMPERATURE_LINES_ROBERTSON1968
    type-name: tuple
    value: ((0, 0.18006, 0.26352, -0.24341), (10, 0.18066, 0.26589, -0.25479), (20,
      0.18133, 0.26846, -0.26876), (30, 0.18208, 0.27119, -0.28539), (40, 0.18293,
      0.27407, -0.3047), (50, 0.18388, 0.27709, -0.32675...
  - constant-name: colour.temperature.robertson1968.ISOTEMPERATURE_LINES_ROBERTSON1968
    type-name: list
    value: '[ISOTemperatureLine_Specification_Robertson1968(r=0, u=0.18006, v=0.26352,
      t=-0.24341), ISOTemperatureLine_Specification_Robertson1968(r=10, u=0.18066,
      v=0.26589, t=-0.25479), ISOTemperatureLine_Speci...'
  - constant-name: colour.utilities.ANCILLARY_COLOUR_SCIENCE_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.ANCILLARY_RUNTIME_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.ANCILLARY_DEVELOPMENT_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.ANCILLARY_EXTRAS_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.CACHE_REGISTRY
    type-name: CacheRegistry
    value: <colour.utilities.common.CacheRegistry object at 0x7b9367142f90>
  - constant-name: colour.utilities.common.CACHE_REGISTRY
    type-name: CacheRegistry
    value: <colour.utilities.common.CacheRegistry object at 0x7b9367142f90>
  - constant-name: colour.utilities.requirements.REQUIREMENTS_TO_CALLABLE
    type-name: CanonicalMapping
    value: 'CanonicalMapping({''ctlrender'': <function is_ctlrender_installed at 0x7b936715b560>,
      ''Matplotlib'': <function is_matplotlib_installed at 0x7b936715b6a0>, ''NetworkX'':
      <function is_networkx_installed at 0...'
  - constant-name: colour.utilities.verbose.LOGGER
    type-name: Logger
    value: <Logger colour.utilities.verbose (WARNING)>
  - constant-name: colour.utilities.verbose.ANCILLARY_COLOUR_SCIENCE_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.verbose.ANCILLARY_RUNTIME_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.verbose.ANCILLARY_DEVELOPMENT_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.utilities.verbose.ANCILLARY_EXTRAS_PACKAGES
    type-name: dict
    value: '{}'
  - constant-name: colour.volume.OPTIMAL_COLOUR_STIMULI_ILLUMINANTS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'A': array([[  1.12000000e-01,   1.98500000e-01,   1.00000000e+01],
             [  8.59000000e-02,   2.95700000e-01,   1.00000000e+01],
             [  5.49000000e-02,   4.59300000e-01,   1.000...
  - constant-name: colour.volume.datasets.OPTIMAL_COLOUR_STIMULI_ILLUMINANTS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'A': array([[  1.12000000e-01,   1.98500000e-01,   1.00000000e+01],
             [  8.59000000e-02,   2.95700000e-01,   1.00000000e+01],
             [  5.49000000e-02,   4.59300000e-01,   1.000...
  - constant-name: colour.volume.datasets.optimal_colour_stimuli.OPTIMAL_COLOUR_STIMULI_A
    type-name: ndarray
    value: |-
      array([[  1.12000000e-01,   1.98500000e-01,   1.00000000e+01],
             [  8.59000000e-02,   2.95700000e-01,   1.00000000e+01],
             [  5.49000000e-02,   4.59300000e-01,   1.00000000e+01],
             [  4...
  - constant-name: colour.volume.datasets.optimal_colour_stimuli.OPTIMAL_COLOUR_STIMULI_C
    type-name: ndarray
    value: |-
      array([[  1.36300000e-01,   6.92000000e-02,   1.00000000e+01],
             [  1.30800000e-01,   7.92000000e-02,   1.00000000e+01],
             [  8.08000000e-02,   2.13200000e-01,   1.00000000e+01],
             [  3...
  - constant-name: colour.volume.datasets.optimal_colour_stimuli.OPTIMAL_COLOUR_STIMULI_D65
    type-name: ndarray
    value: |-
      array([[  1.34600000e-01,   7.47000000e-02,   1.00000000e+01],
             [  9.90000000e-02,   1.60700000e-01,   1.00000000e+01],
             [  7.51000000e-02,   2.40300000e-01,   1.00000000e+01],
             [  3...
  - constant-name: colour.volume.datasets.optimal_colour_stimuli.OPTIMAL_COLOUR_STIMULI_ILLUMINANTS
    type-name: CanonicalMapping
    value: |-
      CanonicalMapping({'A': array([[  1.12000000e-01,   1.98500000e-01,   1.00000000e+01],
             [  8.59000000e-02,   2.95700000e-01,   1.00000000e+01],
             [  5.49000000e-02,   4.59300000e-01,   1.000...
  - constant-name: colour.volume.spectrum.SPECTRAL_SHAPE_OUTER_SURFACE_XYZ
    type-name: SpectralShape
    value: SpectralShape(360, 780, 5)
  enums:
  - enum-name: colour.models.rgb.itut_h_273.FFmpegConstantsColourPrimaries_ITUTH273
    enum-type: IntEnum
    members:
    - member-name: AVCOL_PRI_RESERVED0
      value: '0'
    - member-name: AVCOL_PRI_BT709
      value: '1'
    - member-name: AVCOL_PRI_UNSPECIFIED
      value: '2'
    - member-name: AVCOL_PRI_RESERVED
      value: '3'
    - member-name: AVCOL_PRI_BT470M
      value: '4'
    - member-name: AVCOL_PRI_BT470BG
      value: '5'
    - member-name: AVCOL_PRI_SMPTE170M
      value: '6'
    - member-name: AVCOL_PRI_SMPTE240M
      value: '7'
    - member-name: AVCOL_PRI_FILM
      value: '8'
    - member-name: AVCOL_PRI_BT2020
      value: '9'
    - member-name: AVCOL_PRI_SMPTE428
      value: '10'
    - member-name: AVCOL_PRI_SMPTE431
      value: '11'
    - member-name: AVCOL_PRI_SMPTE432
      value: '12'
    - member-name: AVCOL_PRI_EBU3213
      value: '22'
    - member-name: AVCOL_PRI_NB
      value: '23'
  - enum-name: colour.models.rgb.itut_h_273.FFmpegConstantsTransferCharacteristics_ITUTH273
    enum-type: IntEnum
    members:
    - member-name: AVCOL_TRC_RESERVED0
      value: '0'
    - member-name: AVCOL_TRC_BT709
      value: '1'
    - member-name: AVCOL_TRC_UNSPECIFIED
      value: '2'
    - member-name: AVCOL_TRC_RESERVED
      value: '3'
    - member-name: AVCOL_TRC_GAMMA22
      value: '4'
    - member-name: AVCOL_TRC_GAMMA28
      value: '5'
    - member-name: AVCOL_TRC_SMPTE170M
      value: '6'
    - member-name: AVCOL_TRC_SMPTE240M
      value: '7'
    - member-name: AVCOL_TRC_LINEAR
      value: '8'
    - member-name: AVCOL_TRC_LOG
      value: '9'
    - member-name: AVCOL_TRC_LOG_SQRT
      value: '10'
    - member-name: AVCOL_TRC_IEC61966_2_4
      value: '11'
    - member-name: AVCOL_TRC_BT1361_ECG
      value: '12'
    - member-name: AVCOL_TRC_IEC61966_2_1
      value: '13'
    - member-name: AVCOL_TRC_BT2020_10
      value: '14'
    - member-name: AVCOL_TRC_BT2020_12
      value: '15'
    - member-name: AVCOL_TRC_SMPTE2084
      value: '16'
    - member-name: AVCOL_TRC_SMPTE428
      value: '17'
    - member-name: AVCOL_TRC_ARIB_STD_B67
      value: '18'
    - member-name: AVCOL_TRC_NB
      value: '19'
  - enum-name: colour.models.rgb.itut_h_273.FFmpegConstantsMatrixCoefficients_ITUTH273
    enum-type: IntEnum
    members:
    - member-name: AVCOL_SPC_RGB
      value: '0'
    - member-name: AVCOL_SPC_BT709
      value: '1'
    - member-name: AVCOL_SPC_UNSPECIFIED
      value: '2'
    - member-name: AVCOL_SPC_RESERVED
      value: '3'
    - member-name: AVCOL_SPC_FCC
      value: '4'
    - member-name: AVCOL_SPC_BT470BG
      value: '5'
    - member-name: AVCOL_SPC_SMPTE170M
      value: '6'
    - member-name: AVCOL_SPC_SMPTE240M
      value: '7'
    - member-name: AVCOL_SPC_YCGCO
      value: '8'
    - member-name: AVCOL_SPC_BT2020_NCL
      value: '9'
    - member-name: AVCOL_SPC_BT2020_CL
      value: '10'
    - member-name: AVCOL_SPC_SMPTE2085
      value: '11'
    - member-name: AVCOL_SPC_CHROMA_DERIVED_NCL
      value: '12'
    - member-name: AVCOL_SPC_CHROMA_DERIVED_CL
      value: '13'
    - member-name: AVCOL_SPC_ICTCP
      value: '14'
    - member-name: AVCOL_SPC_NB
      value: '15'
  functions:
  - function-name: colour.adaptation.matrix_chromatic_adaptation_VonKries
    signature: '(XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'', transform: ''LiteralChromaticAdaptationTransform
      | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_VonKries
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      transform: ''LiteralChromaticAdaptationTransform | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_Fairchild1990
    signature: '(XYZ_1: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r: ''ArrayLike'',
      Y_n: ''ArrayLike'', discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.matrix_chromatic_adaptation_vk20
    signature: '(XYZ_p: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r: ''ArrayLike''
      = array([ 0.97941176,  1.        ,  1.73235294]), transform: "Literal[''Bianco
      2010'', ''Bianco PC 2010'', ''Bradford'', ''CAT02 Brill 2008'', ''CAT02'', ''CAT16'',
      ''CMCCAT2000'', ''CMCCAT97'', ''Fairchild'', ''Sharp'', ''Von Kries'', ''XYZ
      Scaling''] | str" = ''CAT02'', coefficients: ''Coefficients_DegreeOfAdaptation_vK20''
      = Coefficients_DegreeOfAdaptation_vK20(D_n=0.7, D_r=0.3, D_p=0)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_vK20
    signature: '(XYZ: ''ArrayLike'', XYZ_p: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r:
      ''ArrayLike'' = array([ 0.97941176,  1.        ,  1.73235294]), transform: "Literal[''Bianco
      2010'', ''Bianco PC 2010'', ''Bradford'', ''CAT02 Brill 2008'', ''CAT02'', ''CAT16'',
      ''CMCCAT2000'', ''CMCCAT97'', ''Fairchild'', ''Sharp'', ''Von Kries'', ''XYZ
      Scaling''] | str" = ''CAT02'', coefficients: ''Coefficients_DegreeOfAdaptation_vK20''
      = Coefficients_DegreeOfAdaptation_vK20(D_n=0.7, D_r=0.3, D_p=0)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_forward_CMCCAT2000
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_inverse_CMCCAT2000
    signature: '(XYZ_c: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_CMCCAT2000
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1), direction: "Literal[''Forward'', ''Inverse'']
      | str" = ''Forward'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_CIE1994
    signature: '(XYZ_1: ''ArrayLike'', xy_o1: ''ArrayLike'', xy_o2: ''ArrayLike'',
      Y_o: ''ArrayLike'', E_o1: ''ArrayLike'', E_o2: ''ArrayLike'', n: ''ArrayLike''
      = 1) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.chromatic_adaptation_Zhai2018
    signature: '(XYZ_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_wb: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_wd: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], D_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = 1, D_d: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = 1, XYZ_wo: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = array([1, 1, 1]), transform: Union[Literal[''CAT02'', ''CAT16''],
      str] = ''CAT02'') -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.adaptation.chromatic_adaptation
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      method: "Literal[''CIE 1994'', ''CMCCAT2000'', ''Fairchild 1990'', ''Von Kries'',
      ''Zhai 2018'', ''vK20''] | str" = ''Von Kries'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.chromatic_adaptation_CIE1994
    signature: '(XYZ_1: ''ArrayLike'', xy_o1: ''ArrayLike'', xy_o2: ''ArrayLike'',
      Y_o: ''ArrayLike'', E_o1: ''ArrayLike'', E_o2: ''ArrayLike'', n: ''ArrayLike''
      = 1) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.XYZ_to_RGB_CIE1994
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.RGB_to_XYZ_CIE1994
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.intermediate_values
    signature: '(xy_o: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.effective_adapting_responses
    signature: '(xez: ''ArrayLike'', Y_o: ''ArrayLike'', E_o: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.beta_1
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.beta_2
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.exponential_factors
    signature: '(RGB_o: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.K_coefficient
    signature: '(xez_1: ''ArrayLike'', xez_2: ''ArrayLike'', bRGB_o1: ''ArrayLike'',
      bRGB_o2: ''ArrayLike'', Y_o: ''ArrayLike'', n: ''ArrayLike'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cie1994.corresponding_colour
    signature: '(RGB_1: ''ArrayLike'', xez_1: ''ArrayLike'', xez_2: ''ArrayLike'',
      bRGB_o1: ''ArrayLike'', bRGB_o2: ''ArrayLike'', Y_o: ''ArrayLike'', K: ''ArrayLike'',
      n: ''ArrayLike'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cmccat2000.chromatic_adaptation_forward_CMCCAT2000
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cmccat2000.chromatic_adaptation_inverse_CMCCAT2000
    signature: '(XYZ_c: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.cmccat2000.chromatic_adaptation_CMCCAT2000
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      L_A1: ''ArrayLike'', L_A2: ''ArrayLike'', surround: ''InductionFactors_CMCCAT2000''
      = InductionFactors_CMCCAT2000(F=1), direction: "Literal[''Forward'', ''Inverse'']
      | str" = ''Forward'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild1990.chromatic_adaptation_Fairchild1990
    signature: '(XYZ_1: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r: ''ArrayLike'',
      Y_n: ''ArrayLike'', discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild1990.XYZ_to_RGB_Fairchild1990
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild1990.RGB_to_XYZ_Fairchild1990
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild1990.degrees_of_adaptation
    signature: '(LMS: ''ArrayLike'', Y_n: ''ArrayLike'', v: ''ArrayLike'' = 0.3333333333333333,
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild2020.matrix_chromatic_adaptation_vk20
    signature: '(XYZ_p: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r: ''ArrayLike''
      = array([ 0.97941176,  1.        ,  1.73235294]), transform: "Literal[''Bianco
      2010'', ''Bianco PC 2010'', ''Bradford'', ''CAT02 Brill 2008'', ''CAT02'', ''CAT16'',
      ''CMCCAT2000'', ''CMCCAT97'', ''Fairchild'', ''Sharp'', ''Von Kries'', ''XYZ
      Scaling''] | str" = ''CAT02'', coefficients: ''Coefficients_DegreeOfAdaptation_vK20''
      = Coefficients_DegreeOfAdaptation_vK20(D_n=0.7, D_r=0.3, D_p=0)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.fairchild2020.chromatic_adaptation_vK20
    signature: '(XYZ: ''ArrayLike'', XYZ_p: ''ArrayLike'', XYZ_n: ''ArrayLike'', XYZ_r:
      ''ArrayLike'' = array([ 0.97941176,  1.        ,  1.73235294]), transform: "Literal[''Bianco
      2010'', ''Bianco PC 2010'', ''Bradford'', ''CAT02 Brill 2008'', ''CAT02'', ''CAT16'',
      ''CMCCAT2000'', ''CMCCAT97'', ''Fairchild'', ''Sharp'', ''Von Kries'', ''XYZ
      Scaling''] | str" = ''CAT02'', coefficients: ''Coefficients_DegreeOfAdaptation_vK20''
      = Coefficients_DegreeOfAdaptation_vK20(D_n=0.7, D_r=0.3, D_p=0)) -> ''NDArrayFloat'''
  - function-name: colour.adaptation.vonkries.matrix_chromatic_adaptation_VonKries
    signature: '(XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'', transform: ''LiteralChromaticAdaptationTransform
      | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.vonkries.chromatic_adaptation_VonKries
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_wr: ''ArrayLike'',
      transform: ''LiteralChromaticAdaptationTransform | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.adaptation.zhai2018.chromatic_adaptation_Zhai2018
    signature: '(XYZ_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_wb: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_wd: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], D_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = 1, D_d: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = 1, XYZ_wo: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = array([1, 1, 1]), transform: Union[Literal[''CAT02'', ''CAT16''],
      str] = ''CAT02'') -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.algebra.get_sdiv_mode
    signature: () -> "Literal['Numpy', 'Ignore', 'Warning', 'Raise', 'Ignore Zero
      Conversion', 'Warning Zero Conversion', 'Ignore Limit Conversion', 'Warning
      Limit Conversion']"
  - function-name: colour.algebra.set_sdiv_mode
    signature: '(mode: "Literal[''Numpy'', ''Ignore'', ''Warning'', ''Raise'', ''Ignore
      Zero Conversion'', ''Warning Zero Conversion'', ''Ignore Limit Conversion'',
      ''Warning Limit Conversion''] | str")'
  - function-name: colour.algebra.sdiv
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.is_spow_enabled
    signature: () -> 'bool'
  - function-name: colour.algebra.set_spow_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.algebra.spow
    signature: '(a: ''ArrayLike'', p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.normalise_vector
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.normalise_maximum
    signature: '(a: ''ArrayLike'', axis: ''int | None'' = None, factor: ''float''
      = 1, clip: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.algebra.vecmul
    signature: '(m: ''ArrayLike'', v: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.euclidean_distance
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.manhattan_distance
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.linear_conversion
    signature: '(a: ''ArrayLike'', old_range: ''ArrayLike'', new_range: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.algebra.linstep_function
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.lerp
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.smoothstep_function
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.smooth
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.is_identity
    signature: '(a: ''ArrayLike'') -> ''bool'''
  - function-name: colour.algebra.eigen_decomposition
    signature: '(a: ''ArrayLike'', eigen_w_v_count: ''int | None'' = None, descending_order:
      ''bool'' = True, covariance_matrix: ''bool'' = False) -> ''Tuple[NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.algebra.cartesian_to_spherical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.spherical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.cartesian_to_polar
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.polar_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.cartesian_to_cylindrical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.cylindrical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.kernel_nearest_neighbour
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.kernel_linear
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.kernel_sinc
    signature: '(x: ''ArrayLike'', a: ''float'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.algebra.kernel_lanczos
    signature: '(x: ''ArrayLike'', a: ''float'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.algebra.kernel_cardinal_spline
    signature: '(x: ''ArrayLike'', a: ''float'' = 0.5, b: ''float'' = 0.0) -> ''NDArrayFloat'''
  - function-name: colour.algebra.lagrange_coefficients
    signature: '(r: ''float'', n: ''int'' = 4) -> ''NDArrayFloat'''
  - function-name: colour.algebra.table_interpolation_trilinear
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.table_interpolation_tetrahedral
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.table_interpolation
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'', method: "Literal[''Trilinear'',
      ''Tetrahedral''] | str" = ''Trilinear'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.random_triplet_generator
    signature: |-
      (size: 'int', limits: 'ArrayLike' = array([[0, 1],
             [0, 1],
             [0, 1]]), random_state: 'np.random.RandomState' = RandomState(MT19937) at 0x7B93671D1840) -> 'NDArrayFloat'
  - function-name: colour.algebra.least_square_mapping_MoorePenrose
    signature: '(y: ''ArrayLike'', x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.get_sdiv_mode
    signature: () -> "Literal['Numpy', 'Ignore', 'Warning', 'Raise', 'Ignore Zero
      Conversion', 'Warning Zero Conversion', 'Ignore Limit Conversion', 'Warning
      Limit Conversion']"
  - function-name: colour.algebra.common.set_sdiv_mode
    signature: '(mode: "Literal[''Numpy'', ''Ignore'', ''Warning'', ''Raise'', ''Ignore
      Zero Conversion'', ''Warning Zero Conversion'', ''Ignore Limit Conversion'',
      ''Warning Limit Conversion''] | str")'
  - function-name: colour.algebra.common.sdiv
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.is_spow_enabled
    signature: () -> 'bool'
  - function-name: colour.algebra.common.set_spow_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.algebra.common.spow
    signature: '(a: ''ArrayLike'', p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.normalise_vector
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.normalise_maximum
    signature: '(a: ''ArrayLike'', axis: ''int | None'' = None, factor: ''float''
      = 1, clip: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.vecmul
    signature: '(m: ''ArrayLike'', v: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.euclidean_distance
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.manhattan_distance
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.linear_conversion
    signature: '(a: ''ArrayLike'', old_range: ''ArrayLike'', new_range: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.linstep_function
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.lerp
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.smoothstep_function
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.smooth
    signature: '(x: ''ArrayLike'', a: ''ArrayLike'' = 0, b: ''ArrayLike'' = 1, clip:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.algebra.common.is_identity
    signature: '(a: ''ArrayLike'') -> ''bool'''
  - function-name: colour.algebra.common.eigen_decomposition
    signature: '(a: ''ArrayLike'', eigen_w_v_count: ''int | None'' = None, descending_order:
      ''bool'' = True, covariance_matrix: ''bool'' = False) -> ''Tuple[NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.algebra.coordinates.cartesian_to_spherical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.spherical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.cartesian_to_polar
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.polar_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.cartesian_to_cylindrical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.cylindrical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.cartesian_to_spherical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.spherical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.cartesian_to_polar
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.polar_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.cartesian_to_cylindrical
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.coordinates.transformations.cylindrical_to_cartesian
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.kernel_nearest_neighbour
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.kernel_linear
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.kernel_sinc
    signature: '(x: ''ArrayLike'', a: ''float'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.kernel_lanczos
    signature: '(x: ''ArrayLike'', a: ''float'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.kernel_cardinal_spline
    signature: '(x: ''ArrayLike'', a: ''float'' = 0.5, b: ''float'' = 0.0) -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.lagrange_coefficients
    signature: '(r: ''float'', n: ''int'' = 4) -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.vertices_and_relative_coordinates
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'') -> ''Tuple[NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.algebra.interpolation.table_interpolation_trilinear
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.table_interpolation_tetrahedral
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.interpolation.table_interpolation
    signature: '(V_xyz: ''ArrayLike'', table: ''ArrayLike'', method: "Literal[''Trilinear'',
      ''Tetrahedral''] | str" = ''Trilinear'') -> ''NDArrayFloat'''
  - function-name: colour.algebra.prng.random_triplet_generator
    signature: |-
      (size: 'int', limits: 'ArrayLike' = array([[0, 1],
             [0, 1],
             [0, 1]]), random_state: 'np.random.RandomState' = RandomState(MT19937) at 0x7B93671D1840) -> 'NDArrayFloat'
  - function-name: colour.algebra.regression.least_square_mapping_MoorePenrose
    signature: '(y: ''ArrayLike'', x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_Hunt
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_b: ''ArrayLike'', L_A:
      ''ArrayLike'', surround: ''InductionFactors_Hunt'' = InductionFactors_Hunt(N_c=1,
      N_b=75, N_cb=None, N_bb=None), L_AS: ''ArrayLike | None'' = None, CCT_w: ''ArrayLike
      | None'' = None, XYZ_p: ''ArrayLike | None'' = None, p: ''ArrayLike | None''
      = None, S: ''ArrayLike | None'' = None, S_w: ''ArrayLike | None'' = None, helson_judd_effect:
      ''bool'' = False, discount_illuminant: ''bool'' = True) -> ''CAM_Specification_Hunt'''
  - function-name: colour.appearance.XYZ_to_ATD95
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'', Y_0: ''ArrayLike'', k_1:
      ''ArrayLike'', k_2: ''ArrayLike'', sigma: ''ArrayLike'' = 300) -> ''CAM_Specification_ATD95'''
  - function-name: colour.appearance.XYZ_to_CIECAM02
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02'' = InductionFactors_CIECAM02(F=1,
      c=0.69, N_c=1), discount_illuminant: ''bool'' = False, compute_H: ''bool'' =
      True) -> ''CAM_Specification_CIECAM02'''
  - function-name: colour.appearance.CIECAM02_to_XYZ
    signature: '(specification: ''CAM_Specification_CIECAM02'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_CAM16
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_CAM16''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_CAM16'''
  - function-name: colour.appearance.CAM16_to_XYZ
    signature: '(specification: ''CAM_Specification_CAM16'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_CAM16'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_CIECAM16
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_CIECAM16''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_CIECAM16'''
  - function-name: colour.appearance.CIECAM16_to_XYZ
    signature: '(specification: ''CAM_Specification_CIECAM16'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_CIECAM16'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_Hellwig2022
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_Hellwig2022''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_Hellwig2022'''
  - function-name: colour.appearance.Hellwig2022_to_XYZ
    signature: '(specification: ''CAM_Specification_Hellwig2022'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_Hellwig2022'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.HelmholtzKohlrausch_effect_object_Nayatani1997
    signature: '(uv: ''ArrayLike'', uv_c: ''ArrayLike'', L_a: ''ArrayLike'', method:
      "Literal[''VAC'', ''VCC''] | str" = ''VCC'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.HelmholtzKohlrausch_effect_luminous_Nayatani1997
    signature: '(uv: ''ArrayLike'', uv_c: ''ArrayLike'', L_a: ''ArrayLike'', method:
      "Literal[''VAC'', ''VCC''] | str" = ''VCC'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.coefficient_q_Nayatani1997
    signature: '(theta: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.coefficient_K_Br_Nayatani1997
    signature: '(L_a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_Kim2009
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', media:
      ''MediaParameters_Kim2009'' = MediaParameters_Kim2009(E=1.4572), surround: ''InductionFactors_Kim2009''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), n_c: ''float'' = 0.57, discount_illuminant:
      ''bool'' = False, compute_H: ''bool'' = True) -> ''CAM_Specification_Kim2009'''
  - function-name: colour.appearance.Kim2009_to_XYZ
    signature: '(specification: ''CAM_Specification_Kim2009'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', media: ''MediaParameters_Kim2009'' = MediaParameters_Kim2009(E=1.4572),
      surround: ''InductionFactors_Kim2009'' = InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), n_c: ''float'' = 0.57, discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.XYZ_to_LLAB
    signature: '(XYZ: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_0: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], Y_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], surround: colour.appearance.llab.InductionFactors_LLAB = InductionFactors_LLAB(D=1,
      F_S=3, F_L=1, F_C=1)) -> colour.appearance.llab.CAM_Specification_LLAB'
  - function-name: colour.appearance.XYZ_to_Nayatani95
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'', Y_o: ''ArrayLike'', E_o:
      ''ArrayLike'', E_or: ''ArrayLike'', n: ''ArrayLike'' = 1) -> ''CAM_Specification_Nayatani95'''
  - function-name: colour.appearance.XYZ_to_RLAB
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'', Y_n: ''ArrayLike'', sigma:
      ''ArrayLike'' = 0.4347826086956522, D: ''ArrayLike'' = 1) -> ''CAM_Specification_RLAB'''
  - function-name: colour.appearance.XYZ_to_ZCAM
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_ZCAM'' = InductionFactors_ZCAM(F_s=0.69,
      F=1, c=0.69, N_c=1), discount_illuminant: ''bool'' = False, compute_H: ''bool''
      = True) -> ''CAM_Specification_ZCAM'''
  - function-name: colour.appearance.ZCAM_to_XYZ
    signature: '(specification: ''CAM_Specification_ZCAM'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_ZCAM''
      = InductionFactors_ZCAM(F_s=0.69, F=1, c=0.69, N_c=1), discount_illuminant:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.atd95.XYZ_to_ATD95
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'', Y_0: ''ArrayLike'', k_1:
      ''ArrayLike'', k_2: ''ArrayLike'', sigma: ''ArrayLike'' = 300) -> ''CAM_Specification_ATD95'''
  - function-name: colour.appearance.atd95.luminance_to_retinal_illuminance
    signature: '(XYZ: ''ArrayLike'', Y_c: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.atd95.XYZ_to_LMS_ATD95
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.atd95.opponent_colour_dimensions
    signature: '(LMS_g: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.atd95.final_response
    signature: '(value: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.cam16.XYZ_to_CAM16
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_CAM16''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_CAM16'''
  - function-name: colour.appearance.cam16.CAM16_to_XYZ
    signature: '(specification: ''CAM_Specification_CAM16'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_CAM16'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.XYZ_to_CIECAM02
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02'' = InductionFactors_CIECAM02(F=1,
      c=0.69, N_c=1), discount_illuminant: ''bool'' = False, compute_H: ''bool'' =
      True) -> ''CAM_Specification_CIECAM02'''
  - function-name: colour.appearance.ciecam02.CIECAM02_to_XYZ
    signature: '(specification: ''CAM_Specification_CIECAM02'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.chromatic_induction_factors
    signature: '(n: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.base_exponential_non_linearity
    signature: '(n: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.viewing_conditions_dependent_parameters
    signature: '(Y_b: ''ArrayLike'', Y_w: ''ArrayLike'', L_A: ''ArrayLike'') -> ''Tuple[NDArrayFloat,
      NDArrayFloat, NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.appearance.ciecam02.degree_of_adaptation
    signature: '(F: ''ArrayLike'', L_A: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.full_chromatic_adaptation_forward
    signature: '(RGB: ''ArrayLike'', RGB_w: ''ArrayLike'', Y_w: ''ArrayLike'', D:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.full_chromatic_adaptation_inverse
    signature: '(RGB: ''ArrayLike'', RGB_w: ''ArrayLike'', Y_w: ''ArrayLike'', D:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.RGB_to_rgb
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.rgb_to_RGB
    signature: '(rgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.post_adaptation_non_linear_response_compression_forward
    signature: '(RGB: ''ArrayLike'', F_L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.post_adaptation_non_linear_response_compression_inverse
    signature: '(RGB: ''ArrayLike'', F_L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.opponent_colour_dimensions_forward
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.opponent_colour_dimensions_inverse
    signature: '(P_n: ''ArrayLike'', h: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.hue_angle
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.hue_quadrature
    signature: '(h: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.eccentricity_factor
    signature: '(h: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.achromatic_response_forward
    signature: '(RGB: ''ArrayLike'', N_bb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.achromatic_response_inverse
    signature: '(A_w: ''ArrayLike'', J: ''ArrayLike'', c: ''ArrayLike'', z: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.lightness_correlate
    signature: '(A: ''ArrayLike'', A_w: ''ArrayLike'', c: ''ArrayLike'', z: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.brightness_correlate
    signature: '(c: ''ArrayLike'', J: ''ArrayLike'', A_w: ''ArrayLike'', F_L: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.temporary_magnitude_quantity_forward
    signature: '(N_c: ''ArrayLike'', N_cb: ''ArrayLike'', e_t: ''ArrayLike'', a: ''ArrayLike'',
      b: ''ArrayLike'', RGB_a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.temporary_magnitude_quantity_inverse
    signature: '(C: ''ArrayLike'', J: ''ArrayLike'', n: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.chroma_correlate
    signature: '(J: ''ArrayLike'', n: ''ArrayLike'', N_c: ''ArrayLike'', N_cb: ''ArrayLike'',
      e_t: ''ArrayLike'', a: ''ArrayLike'', b: ''ArrayLike'', RGB_a: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.colourfulness_correlate
    signature: '(C: ''ArrayLike'', F_L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.saturation_correlate
    signature: '(M: ''ArrayLike'', Q: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.P
    signature: '(N_c: ''ArrayLike'', N_cb: ''ArrayLike'', e_t: ''ArrayLike'', t: ''ArrayLike'',
      A: ''ArrayLike'', N_bb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam02.matrix_post_adaptation_non_linear_response_compression
    signature: '(P_2: ''ArrayLike'', a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam16.XYZ_to_CIECAM16
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_CIECAM16''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_CIECAM16'''
  - function-name: colour.appearance.ciecam16.CIECAM16_to_XYZ
    signature: '(specification: ''CAM_Specification_CIECAM16'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_CIECAM16'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam16.f_e_forward
    signature: '(RGB_c: ''ArrayLike'', F_L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam16.f_e_inverse
    signature: '(RGB_a: ''ArrayLike'', F_L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam16.f_q
    signature: '(F_L: ''ArrayLike'', q: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.ciecam16.d_f_q
    signature: '(F_L: ''ArrayLike'', q: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.XYZ_to_Hellwig2022
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_CIECAM02 | InductionFactors_Hellwig2022''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), discount_illuminant: ''bool''
      = False, compute_H: ''bool'' = True) -> ''CAM_Specification_Hellwig2022'''
  - function-name: colour.appearance.hellwig2022.Hellwig2022_to_XYZ
    signature: '(specification: ''CAM_Specification_Hellwig2022'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_CIECAM02
      | InductionFactors_Hellwig2022'' = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1),
      discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.viewing_conditions_dependent_parameters
    signature: '(Y_b: ''ArrayLike'', Y_w: ''ArrayLike'', L_A: ''ArrayLike'') -> ''Tuple[NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.appearance.hellwig2022.achromatic_response_forward
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.opponent_colour_dimensions_inverse
    signature: '(P_p_1: ''ArrayLike'', h: ''ArrayLike'', M: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.eccentricity_factor
    signature: '(h: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.brightness_correlate
    signature: '(c: ''ArrayLike'', J: ''ArrayLike'', A_w: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.colourfulness_correlate
    signature: '(N_c: ''ArrayLike'', e_t: ''ArrayLike'', a: ''ArrayLike'', b: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.chroma_correlate
    signature: '(M: ''ArrayLike'', A_w: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.saturation_correlate
    signature: '(M: ''ArrayLike'', Q: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.P_p
    signature: '(N_c: ''ArrayLike'', e_t: ''ArrayLike'', A: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hellwig2022.hue_angle_dependency_Hellwig2022
    signature: '(h: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hke.HelmholtzKohlrausch_effect_object_Nayatani1997
    signature: '(uv: ''ArrayLike'', uv_c: ''ArrayLike'', L_a: ''ArrayLike'', method:
      "Literal[''VAC'', ''VCC''] | str" = ''VCC'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hke.HelmholtzKohlrausch_effect_luminous_Nayatani1997
    signature: '(uv: ''ArrayLike'', uv_c: ''ArrayLike'', L_a: ''ArrayLike'', method:
      "Literal[''VAC'', ''VCC''] | str" = ''VCC'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hke.coefficient_q_Nayatani1997
    signature: '(theta: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hke.coefficient_K_Br_Nayatani1997
    signature: '(L_a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.XYZ_to_Hunt
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_b: ''ArrayLike'', L_A:
      ''ArrayLike'', surround: ''InductionFactors_Hunt'' = InductionFactors_Hunt(N_c=1,
      N_b=75, N_cb=None, N_bb=None), L_AS: ''ArrayLike | None'' = None, CCT_w: ''ArrayLike
      | None'' = None, XYZ_p: ''ArrayLike | None'' = None, p: ''ArrayLike | None''
      = None, S: ''ArrayLike | None'' = None, S_w: ''ArrayLike | None'' = None, helson_judd_effect:
      ''bool'' = False, discount_illuminant: ''bool'' = True) -> ''CAM_Specification_Hunt'''
  - function-name: colour.appearance.hunt.luminance_level_adaptation_factor
    signature: '(L_A: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.illuminant_scotopic_luminance
    signature: '(L_A: ''ArrayLike'', CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.XYZ_to_rgb
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.f_n
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.chromatic_adaptation
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', XYZ_b: ''ArrayLike'', L_A,
      F_L, XYZ_p: ''ArrayLike | None'' = None, p: ''ArrayLike | None'' = None, helson_judd_effect:
      ''bool'' = False, discount_illuminant: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.adjusted_reference_white_signals
    signature: '(rgb_p: ''ArrayLike'', rgb_b: ''ArrayLike'', rgb_w: ''ArrayLike'',
      p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.achromatic_post_adaptation_signal
    signature: '(rgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.colour_difference_signals
    signature: '(rgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.hue_angle
    signature: '(C: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.eccentricity_factor
    signature: '(hue: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.low_luminance_tritanopia_factor
    signature: '(L_A: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.yellowness_blueness_response
    signature: '(C: ''ArrayLike'', e_s: ''ArrayLike'', N_c: ''ArrayLike'', N_cb: ''ArrayLike'',
      F_t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.redness_greenness_response
    signature: '(C: ''ArrayLike'', e_s: ''ArrayLike'', N_c: ''ArrayLike'', N_cb: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.overall_chromatic_response
    signature: '(M_yb: ''ArrayLike'', M_rg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.saturation_correlate
    signature: '(M: ''ArrayLike'', rgb_a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.achromatic_signal
    signature: '(L_AS: ''ArrayLike'', S: ''ArrayLike'', S_w: ''ArrayLike'', N_bb:
      ''ArrayLike'', A_a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.brightness_correlate
    signature: '(A: ''ArrayLike'', A_w: ''ArrayLike'', M: ''ArrayLike'', N_b: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.lightness_correlate
    signature: '(Y_b: ''ArrayLike'', Y_w: ''ArrayLike'', Q: ''ArrayLike'', Q_w: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.chroma_correlate
    signature: '(s: ''ArrayLike'', Y_b: ''ArrayLike'', Y_w: ''ArrayLike'', Q: ''ArrayLike'',
      Q_w: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.hunt.colourfulness_correlate
    signature: '(F_L: ''ArrayLike'', C_94: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.kim2009.XYZ_to_Kim2009
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', media:
      ''MediaParameters_Kim2009'' = MediaParameters_Kim2009(E=1.4572), surround: ''InductionFactors_Kim2009''
      = InductionFactors_CIECAM02(F=1, c=0.69, N_c=1), n_c: ''float'' = 0.57, discount_illuminant:
      ''bool'' = False, compute_H: ''bool'' = True) -> ''CAM_Specification_Kim2009'''
  - function-name: colour.appearance.kim2009.Kim2009_to_XYZ
    signature: '(specification: ''CAM_Specification_Kim2009'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', media: ''MediaParameters_Kim2009'' = MediaParameters_Kim2009(E=1.4572),
      surround: ''InductionFactors_Kim2009'' = InductionFactors_CIECAM02(F=1, c=0.69,
      N_c=1), n_c: ''float'' = 0.57, discount_illuminant: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.appearance.llab.XYZ_to_LLAB
    signature: '(XYZ: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], XYZ_0: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], Y_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], surround: colour.appearance.llab.InductionFactors_LLAB = InductionFactors_LLAB(D=1,
      F_S=3, F_L=1, F_C=1)) -> colour.appearance.llab.CAM_Specification_LLAB'
  - function-name: colour.appearance.llab.XYZ_to_RGB_LLAB
    signature: '(XYZ: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.chromatic_adaptation
    signature: '(RGB: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], RGB_0: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], RGB_0r: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], Y: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], D: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]] = 1) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.f
    signature: '(x: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], F_S: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.opponent_colour_dimensions
    signature: '(XYZ: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], Y_b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], F_S: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], F_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.hue_angle
    signature: '(a: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.chroma_correlate
    signature: '(a: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], b: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.colourfulness_correlate
    signature: '(L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], L_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], Ch_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], F_C: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.saturation_correlate
    signature: '(Ch_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], L_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.llab.final_opponent_signals
    signature: '(C_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], h_L: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]]) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.appearance.nayatani95.XYZ_to_Nayatani95
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'', Y_o: ''ArrayLike'', E_o:
      ''ArrayLike'', E_or: ''ArrayLike'', n: ''ArrayLike'' = 1) -> ''CAM_Specification_Nayatani95'''
  - function-name: colour.appearance.nayatani95.illuminance_to_luminance
    signature: '(E: ''ArrayLike'', Y_f: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.XYZ_to_RGB_Nayatani95
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.scaling_coefficient
    signature: '(x: ''ArrayLike'', y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.achromatic_response
    signature: '(RGB: ''ArrayLike'', bRGB_o: ''ArrayLike'', xez: ''ArrayLike'', bL_or:
      ''ArrayLike'', eR: ''ArrayLike'', eG: ''ArrayLike'', n: ''ArrayLike'' = 1) ->
      ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.tritanopic_response
    signature: '(RGB: ''ArrayLike'', bRGB_o: ''ArrayLike'', xez: ''ArrayLike'', n:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.protanopic_response
    signature: '(RGB: ''ArrayLike'', bRGB_o: ''ArrayLike'', xez: ''ArrayLike'', n:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.brightness_correlate
    signature: '(bRGB_o: ''ArrayLike'', bL_or: ''ArrayLike'', Q: ''ArrayLike'') ->
      ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.ideal_white_brightness_correlate
    signature: '(bRGB_o: ''ArrayLike'', xez: ''ArrayLike'', bL_or: ''ArrayLike'',
      n: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.achromatic_lightness_correlate
    signature: '(Q: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.normalised_achromatic_lightness_correlate
    signature: '(B_r: ''ArrayLike'', B_rw: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.hue_angle
    signature: '(p: ''ArrayLike'', t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.saturation_components
    signature: '(h: ''ArrayLike'', bL_or: ''ArrayLike'', t: ''ArrayLike'', p: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.saturation_correlate
    signature: '(S_RG: ''ArrayLike'', S_YB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.chroma_components
    signature: '(L_star_P: ''ArrayLike'', S_RG: ''ArrayLike'', S_YB: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.chroma_correlate
    signature: '(L_star_P: ''ArrayLike'', S: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.colourfulness_components
    signature: '(C_RG: ''ArrayLike'', C_YB: ''ArrayLike'', B_rw: ''ArrayLike'') ->
      ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.colourfulness_correlate
    signature: '(C: ''ArrayLike'', B_rw: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.nayatani95.chromatic_strength_function
    signature: '(theta: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.appearance.rlab.XYZ_to_RLAB
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'', Y_n: ''ArrayLike'', sigma:
      ''ArrayLike'' = 0.4347826086956522, D: ''ArrayLike'' = 1) -> ''CAM_Specification_RLAB'''
  - function-name: colour.appearance.zcam.XYZ_to_ZCAM
    signature: '(XYZ: ''ArrayLike'', XYZ_w: ''ArrayLike'', L_A: ''ArrayLike'', Y_b:
      ''ArrayLike'', surround: ''InductionFactors_ZCAM'' = InductionFactors_ZCAM(F_s=0.69,
      F=1, c=0.69, N_c=1), discount_illuminant: ''bool'' = False, compute_H: ''bool''
      = True) -> ''CAM_Specification_ZCAM'''
  - function-name: colour.appearance.zcam.ZCAM_to_XYZ
    signature: '(specification: ''CAM_Specification_ZCAM'', XYZ_w: ''ArrayLike'',
      L_A: ''ArrayLike'', Y_b: ''ArrayLike'', surround: ''InductionFactors_ZCAM''
      = InductionFactors_ZCAM(F_s=0.69, F=1, c=0.69, N_c=1), discount_illuminant:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.reaction_rate_MichaelisMenten
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', method:
      "Literal[''Michaelis 1913'', ''Abebe 2017''] | str" = ''Michaelis 1913'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.substrate_concentration_MichaelisMenten
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', method:
      "Literal[''Michaelis 1913'', ''Abebe 2017''] | str" = ''Michaelis 1913'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.reaction_rate_MichaelisMenten_Michaelis1913
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.substrate_concentration_MichaelisMenten_Michaelis1913
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.reaction_rate_MichaelisMenten_Abebe2017
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', b_m:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.substrate_concentration_MichaelisMenten_Abebe2017
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', b_m:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.reaction_rate_MichaelisMenten_Michaelis1913
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.reaction_rate_MichaelisMenten_Abebe2017
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', b_m:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.reaction_rate_MichaelisMenten
    signature: '(S: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', method:
      "Literal[''Michaelis 1913'', ''Abebe 2017''] | str" = ''Michaelis 1913'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.substrate_concentration_MichaelisMenten_Michaelis1913
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.substrate_concentration_MichaelisMenten_Abebe2017
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', b_m:
      ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.biochemistry.michaelis_menten.substrate_concentration_MichaelisMenten
    signature: '(v: ''ArrayLike'', V_max: ''ArrayLike'', K_m: ''ArrayLike'', method:
      "Literal[''Michaelis 1913'', ''Abebe 2017''] | str" = ''Michaelis 1913'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.blindness.msds_cmfs_anomalous_trichromacy_Machado2009
    signature: '(cmfs: ''LMS_ConeFundamentals'', d_LMS: ''ArrayLike'') -> ''LMS_ConeFundamentals'''
  - function-name: colour.blindness.matrix_anomalous_trichromacy_Machado2009
    signature: '(cmfs: ''LMS_ConeFundamentals'', primaries: ''RGB_DisplayPrimaries'',
      d_LMS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.blindness.matrix_cvd_Machado2009
    signature: '(deficiency: "Literal[''Deuteranomaly'', ''Protanomaly'', ''Tritanomaly'']
      | str", severity: ''float'') -> ''NDArrayFloat'''
  - function-name: colour.blindness.machado2009.matrix_RGB_to_WSYBRG
    signature: '(cmfs: ''LMS_ConeFundamentals'', primaries: ''RGB_DisplayPrimaries'')
      -> ''NDArrayFloat'''
  - function-name: colour.blindness.machado2009.msds_cmfs_anomalous_trichromacy_Machado2009
    signature: '(cmfs: ''LMS_ConeFundamentals'', d_LMS: ''ArrayLike'') -> ''LMS_ConeFundamentals'''
  - function-name: colour.blindness.machado2009.matrix_anomalous_trichromacy_Machado2009
    signature: '(cmfs: ''LMS_ConeFundamentals'', primaries: ''RGB_DisplayPrimaries'',
      d_LMS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.blindness.machado2009.matrix_cvd_Machado2009
    signature: '(deficiency: "Literal[''Deuteranomaly'', ''Protanomaly'', ''Tritanomaly'']
      | str", severity: ''float'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.matrix_augmented_Cheung2004
    signature: '(RGB: ''ArrayLike'', terms: ''Literal[3, 4, 5, 7, 8, 10, 11, 14, 16,
      17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.polynomial_expansion_Finlayson2015
    signature: '(RGB: ''ArrayLike'', degree: ''Literal[1, 2, 3, 4]'' = 1, root_polynomial_expansion:
      ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.polynomial_expansion_Vandermonde
    signature: '(a: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.polynomial_expansion
    signature: '(a: ''ArrayLike'', method: "Literal[''Cheung 2004'', ''Finlayson 2015'',
      ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.matrix_colour_correction_Cheung2004
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', terms: ''Literal[3, 4, 5,
      7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.matrix_colour_correction_Finlayson2015
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree: ''Literal[1, 2, 3,
      4]'' = 1, root_polynomial_expansion: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.matrix_colour_correction_Vandermonde
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.matrix_colour_correction
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', method: "Literal[''Cheung
      2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.apply_matrix_colour_correction_Cheung2004
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', terms: ''Literal[3, 4, 5,
      7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.apply_matrix_colour_correction_Finlayson2015
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', degree: ''Literal[1, 2, 3,
      4]'' = 1, root_polynomial_expansion: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.apply_matrix_colour_correction_Vandermonde
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.apply_matrix_colour_correction
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', method: "Literal[''Cheung
      2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.colour_correction_Cheung2004
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', terms:
      ''Literal[3, 4, 5, 7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.colour_correction_Finlayson2015
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree:
      ''Literal[1, 2, 3, 4]'' = 1, root_polynomial_expansion: ''bool'' = True) ->
      ''NDArrayFloat'''
  - function-name: colour.characterisation.colour_correction_Vandermonde
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree:
      ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.colour_correction
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', method:
      "Literal[''Cheung 2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung
      2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.sd_to_aces_relative_exposure_values
    signature: '(sd: ''SpectralDistribution'', illuminant: ''SpectralDistribution
      | None'' = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'', **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.sd_to_ACES2065_1
    signature: '(sd: ''SpectralDistribution'', illuminant: ''SpectralDistribution
      | None'' = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'', **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.read_training_data_rawtoaces_v1
    signature: () -> 'MultiSpectralDistributions'
  - function-name: colour.characterisation.generate_illuminants_rawtoaces_v1
    signature: () -> 'CanonicalMapping'
  - function-name: colour.characterisation.white_balance_multipliers
    signature: '(sensitivities: ''RGB_CameraSensitivities'', illuminant: ''SpectralDistribution'')
      -> ''NDArrayFloat'''
  - function-name: colour.characterisation.best_illuminant
    signature: '(RGB_w: ''ArrayLike'', sensitivities: ''RGB_CameraSensitivities'',
      illuminants: ''Mapping'') -> ''SpectralDistribution'''
  - function-name: colour.characterisation.normalise_illuminant
    signature: '(illuminant: ''SpectralDistribution'', sensitivities: ''RGB_CameraSensitivities'')
      -> ''SpectralDistribution'''
  - function-name: colour.characterisation.training_data_sds_to_RGB
    signature: '(training_data: ''MultiSpectralDistributions'', sensitivities: ''RGB_CameraSensitivities'',
      illuminant: ''SpectralDistribution'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.characterisation.training_data_sds_to_XYZ
    signature: '(training_data: ''MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions'',
      illuminant: ''SpectralDistribution'', chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.whitepoint_preserving_matrix
    signature: '(M: ''ArrayLike'', RGB_w: ''ArrayLike'' = array([ 1.,  1.,  1.]))
      -> ''NDArrayFloat'''
  - function-name: colour.characterisation.optimisation_factory_rawtoaces_v1
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.optimisation_factory_Jzazbz
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.optimisation_factory_Oklab_15
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.matrix_idt
    signature: '(sensitivities: ''RGB_CameraSensitivities'', illuminant: ''SpectralDistribution'',
      training_data: ''MultiSpectralDistributions | None'' = None, cmfs: ''MultiSpectralDistributions
      | None'' = None, optimisation_factory: ''Callable'' = <function optimisation_factory_rawtoaces_v1
      at 0x7b9349181f80>, optimisation_kwargs: ''dict | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', additional_data:
      ''bool'' = False) -> ''Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat, NDArrayFloat]
      | Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.characterisation.camera_RGB_to_ACES2065_1
    signature: '(RGB: ''ArrayLike'', B: ''ArrayLike'', b: ''ArrayLike'', k: ''ArrayLike''
      = array([ 1.,  1.,  1.]), clip: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.sd_to_aces_relative_exposure_values
    signature: '(sd: ''SpectralDistribution'', illuminant: ''SpectralDistribution
      | None'' = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'', **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.sd_to_ACES2065_1
    signature: '(sd: ''SpectralDistribution'', illuminant: ''SpectralDistribution
      | None'' = None, chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'', **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.read_training_data_rawtoaces_v1
    signature: () -> 'MultiSpectralDistributions'
  - function-name: colour.characterisation.aces_it.generate_illuminants_rawtoaces_v1
    signature: () -> 'CanonicalMapping'
  - function-name: colour.characterisation.aces_it.white_balance_multipliers
    signature: '(sensitivities: ''RGB_CameraSensitivities'', illuminant: ''SpectralDistribution'')
      -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.best_illuminant
    signature: '(RGB_w: ''ArrayLike'', sensitivities: ''RGB_CameraSensitivities'',
      illuminants: ''Mapping'') -> ''SpectralDistribution'''
  - function-name: colour.characterisation.aces_it.normalise_illuminant
    signature: '(illuminant: ''SpectralDistribution'', sensitivities: ''RGB_CameraSensitivities'')
      -> ''SpectralDistribution'''
  - function-name: colour.characterisation.aces_it.training_data_sds_to_RGB
    signature: '(training_data: ''MultiSpectralDistributions'', sensitivities: ''RGB_CameraSensitivities'',
      illuminant: ''SpectralDistribution'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.characterisation.aces_it.training_data_sds_to_XYZ
    signature: '(training_data: ''MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions'',
      illuminant: ''SpectralDistribution'', chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str | None'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.whitepoint_preserving_matrix
    signature: '(M: ''ArrayLike'', RGB_w: ''ArrayLike'' = array([ 1.,  1.,  1.]))
      -> ''NDArrayFloat'''
  - function-name: colour.characterisation.aces_it.optimisation_factory_rawtoaces_v1
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.aces_it.optimisation_factory_Jzazbz
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.aces_it.optimisation_factory_Oklab_15
    signature: () -> 'Tuple[NDArrayFloat, Callable, Callable, Callable]'
  - function-name: colour.characterisation.aces_it.matrix_idt
    signature: '(sensitivities: ''RGB_CameraSensitivities'', illuminant: ''SpectralDistribution'',
      training_data: ''MultiSpectralDistributions | None'' = None, cmfs: ''MultiSpectralDistributions
      | None'' = None, optimisation_factory: ''Callable'' = <function optimisation_factory_rawtoaces_v1
      at 0x7b9349181f80>, optimisation_kwargs: ''dict | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', additional_data:
      ''bool'' = False) -> ''Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat, NDArrayFloat]
      | Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.characterisation.aces_it.camera_RGB_to_ACES2065_1
    signature: '(RGB: ''ArrayLike'', B: ''ArrayLike'', b: ''ArrayLike'', k: ''ArrayLike''
      = array([ 1.,  1.,  1.]), clip: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.matrix_augmented_Cheung2004
    signature: '(RGB: ''ArrayLike'', terms: ''Literal[3, 4, 5, 7, 8, 10, 11, 14, 16,
      17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.polynomial_expansion_Finlayson2015
    signature: '(RGB: ''ArrayLike'', degree: ''Literal[1, 2, 3, 4]'' = 1, root_polynomial_expansion:
      ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.polynomial_expansion_Vandermonde
    signature: '(a: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.polynomial_expansion
    signature: '(a: ''ArrayLike'', method: "Literal[''Cheung 2004'', ''Finlayson 2015'',
      ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.matrix_colour_correction_Cheung2004
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', terms: ''Literal[3, 4, 5,
      7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.matrix_colour_correction_Finlayson2015
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree: ''Literal[1, 2, 3,
      4]'' = 1, root_polynomial_expansion: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.matrix_colour_correction_Vandermonde
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.matrix_colour_correction
    signature: '(M_T: ''ArrayLike'', M_R: ''ArrayLike'', method: "Literal[''Cheung
      2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.apply_matrix_colour_correction_Cheung2004
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', terms: ''Literal[3, 4, 5,
      7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.apply_matrix_colour_correction_Finlayson2015
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', degree: ''Literal[1, 2, 3,
      4]'' = 1, root_polynomial_expansion: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.apply_matrix_colour_correction_Vandermonde
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', degree: ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.apply_matrix_colour_correction
    signature: '(RGB: ''ArrayLike'', CCM: ''ArrayLike'', method: "Literal[''Cheung
      2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung 2004'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.colour_correction_Cheung2004
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', terms:
      ''Literal[3, 4, 5, 7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 35]'' = 3) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.colour_correction_Finlayson2015
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree:
      ''Literal[1, 2, 3, 4]'' = 1, root_polynomial_expansion: ''bool'' = True) ->
      ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.colour_correction_Vandermonde
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', degree:
      ''int'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.characterisation.correction.colour_correction
    signature: '(RGB: ''ArrayLike'', M_T: ''ArrayLike'', M_R: ''ArrayLike'', method:
      "Literal[''Cheung 2004'', ''Finlayson 2015'', ''Vandermonde''] | str" = ''Cheung
      2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.reshape_sd
    signature: '(sd: ''TypeSpectralDistribution'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Align'', ''Extrapolate'', ''Interpolate'', ''Trim'']
      | str" = ''Align'', copy: ''bool'' = True, **kwargs: ''Any'') -> ''TypeSpectralDistribution'''
  - function-name: colour.colorimetry.reshape_msds
    signature: '(msds: ''TypeMultiSpectralDistributions'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), method: "Literal[''Align'', ''Extrapolate'', ''Interpolate'',
      ''Trim''] | str" = ''Align'', copy: ''bool'' = True, **kwargs: ''Any'') -> ''TypeMultiSpectralDistributions'''
  - function-name: colour.colorimetry.sds_and_msds_to_sds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'') -> ''List[SpectralDistribution]'''
  - function-name: colour.colorimetry.sds_and_msds_to_msds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.planck_law
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'', c1: ''float''
      = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.blackbody_spectral_radiance
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'', c1: ''float''
      = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_blackbody
    signature: '(temperature: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), c1: ''float'' = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float''
      = 1) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.rayleigh_jeans_law
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_rayleigh_jeans
    signature: '(temperature: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1)) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_constant
    signature: '(k: ''float'', shape: ''SpectralShape'' = SpectralShape(360, 780,
      1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_zeros
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs:
      ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_ones
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs:
      ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.msds_constant
    signature: '(k: ''float'', labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.msds_zeros
    signature: '(labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.msds_ones
    signature: '(labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.sd_gaussian
    signature: '(mu_peak_wavelength: ''float'', sigma_fwhm: ''float'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), method: "Literal[''Normal'', ''FWHM''] | str"
      = ''Normal'', **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_gaussian_normal
    signature: '(mu: ''float'', sigma: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_gaussian_fwhm
    signature: '(peak_wavelength: ''float'', fwhm: ''float'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_single_led
    signature: '(peak_wavelength: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Ohno 2005''] | str" = ''Ohno 2005'', **kwargs: ''Any'')
      -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_single_led_Ohno2005
    signature: '(peak_wavelength: ''float'', half_spectral_width: ''float'', shape:
      ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_multi_leds
    signature: '(peak_wavelengths: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Ohno 2005''] | str" = ''Ohno 2005'', **kwargs: ''Any'')
      -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_multi_leds_Ohno2005
    signature: '(peak_wavelengths: ''ArrayLike'', half_spectral_widths: ''ArrayLike'',
      peak_power_ratios: ''ArrayLike | None'' = None, shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_to_XYZ
    signature: '(sd: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, method: "Literal[''ASTM E308'',
      ''Integration''] | str" = ''ASTM E308'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.msds_to_XYZ
    signature: '(msds: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, method: "Literal[''ASTM E308'',
      ''Integration''] | str" = ''ASTM E308'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.handle_spectral_arguments
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, cmfs_default: ''str'' = ''CIE 1931 2 Degree Standard Observer'',
      illuminant_default: ''str'' = ''D65'', shape_default: ''SpectralShape'' = SpectralShape(360,
      780, 1), issue_runtime_warnings: ''bool'' = True) -> ''Tuple[MultiSpectralDistributions,
      SpectralDistribution]'''
  - function-name: colour.colorimetry.lagrange_coefficients_ASTME2022
    signature: '(interval: ''int'' = 10, interval_type: "Literal[''Boundary'', ''Inner'']
      | str" = ''Inner'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_weighting_factors_ASTME2022
    signature: '(cmfs: ''MultiSpectralDistributions'', illuminant: ''SpectralDistribution'',
      shape: ''SpectralShape'', k: ''Real | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.adjust_tristimulus_weighting_factors_ASTME308
    signature: '(W: ''ArrayLike'', shape_r: ''SpectralShape'', shape_t: ''SpectralShape'')
      -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_to_XYZ_integration
    signature: '(sd: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, shape: ''SpectralShape | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_to_XYZ_tristimulus_weighting_factors_ASTME308
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, k: ''Real
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_to_XYZ_ASTME308
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, use_practice_range:
      ''bool'' = True, mi_5nm_omission_method: ''bool'' = True, mi_20nm_interpolation_method:
      ''bool'' = True, k: ''Real | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.msds_to_XYZ_integration
    signature: '(msds: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, shape: ''SpectralShape | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.msds_to_XYZ_ASTME308
    signature: '(msds: ''MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, k: ''Real
      | None'' = None, use_practice_range: ''bool'' = True, mi_5nm_omission_method:
      ''bool'' = True, mi_20nm_interpolation_method: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.wavelength_to_XYZ
    signature: '(wavelength: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.spectral_uniformity
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', use_second_order_derivatives:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.bandpass_correction
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''Stearns 1988'']
      | str" = ''Stearns 1988'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.bandpass_correction_Stearns1988
    signature: '(sd: ''SpectralDistribution'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_CIE_standard_illuminant_A
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1)) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.sd_CIE_illuminant_D_series
    signature: '(xy: ''ArrayLike'', M1_M2_rounding: ''bool'' = True, shape: ''SpectralShape
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.daylight_locus_function
    signature: '(x_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.sd_mesopic_luminous_efficiency_function
    signature: '(L_p: ''float'', source: "Literal[''Blue Heavy'', ''Red Heavy''] |
      str" = ''Blue Heavy'', method: "Literal[''MOVE'', ''LRC''] | str" = ''MOVE'',
      photopic_lef: ''SpectralDistribution | None'' = None, scotopic_lef: ''SpectralDistribution
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.mesopic_weighting_function
    signature: '(wavelength: ''ArrayLike'', L_p: ''float'', source: "Literal[''Blue
      Heavy'', ''Red Heavy''] | str" = ''Blue Heavy'', method: "Literal[''MOVE'',
      ''LRC''] | str" = ''MOVE'', photopic_lef: ''SpectralDistribution | None'' =
      None, scotopic_lef: ''SpectralDistribution | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness
    signature: '(Y: ''ArrayLike'', method: "Literal[''Abebe 2017'', ''CIE 1976'',
      ''Glasser 1958'', ''Fairchild 2010'', ''Fairchild 2011'', ''Wyszecki 1963'']
      | str" = ''CIE 1976'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_Glasser1958
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_Wyszecki1963
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_CIE1976
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_Fairchild2010
    signature: '(Y: ''ArrayLike'', epsilon: ''ArrayLike'' = 1.836) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_Fairchild2011
    signature: '(Y: ''ArrayLike'', epsilon: ''ArrayLike'' = 0.474, method: "Literal[''hdr-CIELAB'',
      ''hdr-IPT''] | str" = ''hdr-CIELAB'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness_Abebe2017
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100, method: "Literal[''Michaelis-Menten'',
      ''Stevens''] | str" = ''Michaelis-Menten'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.intermediate_lightness_function_CIE1976
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance
    signature: '(LV: ''ArrayLike'', method: "Literal[''Abebe 2017'', ''CIE 1976'',
      ''Glasser 1958'', ''Fairchild 2010'', ''Fairchild 2011'', ''Wyszecki 1963'']
      | str" = ''CIE 1976'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_Newhall1943
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_ASTMD1535
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_CIE1976
    signature: '(L_star: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_Fairchild2010
    signature: '(L_hdr: ''ArrayLike'', epsilon: ''ArrayLike'' = 1.836) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_Fairchild2011
    signature: '(L_hdr: ''ArrayLike'', epsilon: ''ArrayLike'' = 0.474, method: "Literal[''hdr-CIELAB'',
      ''hdr-IPT''] | str" = ''hdr-CIELAB'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance_Abebe2017
    signature: '(L: ''ArrayLike'', Y_n: ''ArrayLike'' = 100, method: "Literal[''Michaelis-Menten'',
      ''Stevens''] | str" = ''Michaelis-Menten'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.intermediate_luminance_function_CIE1976
    signature: '(f_Y_Y_n: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.dominant_wavelength
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None, inverse: ''bool'' = False) -> ''Tuple[NDArrayFloat, NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.colorimetry.complementary_wavelength
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.colorimetry.excitation_purity
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.colorimetric_purity
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminous_flux
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None, K_m: ''float'' = 683) -> ''float'''
  - function-name: colour.colorimetry.luminous_efficiency
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None) -> ''float'''
  - function-name: colour.colorimetry.luminous_efficacy
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None) -> ''float'''
  - function-name: colour.colorimetry.RGB_10_degree_cmfs_to_LMS_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.RGB_2_degree_cmfs_to_XYZ_2_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.RGB_10_degree_cmfs_to_XYZ_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.LMS_2_degree_cmfs_to_XYZ_2_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.LMS_10_degree_cmfs_to_XYZ_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'', method: "Literal[''ASTM
      E313'', ''CIE 2004'', ''Berger 1959'', ''Ganz 1979'', ''Stensby 1968'', ''Taube
      1960''] | str" = ''CIE 2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_Berger1959
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_Taube1960
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_Stensby1968
    signature: '(Lab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_ASTME313
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_Ganz1979
    signature: '(xy: ''ArrayLike'', Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness_CIE2004
    signature: '(xy: ''ArrayLike'', Y: ''ArrayLike'', xy_n: ''ArrayLike'', observer:
      "Literal[''CIE 1931 2 Degree Standard Observer'', ''CIE 1964 10 Degree Standard
      Observer'']" = ''CIE 1931 2 Degree Standard Observer'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness
    signature: '(XYZ: ''ArrayLike'', method: "Literal[''ASTM D1925'', ''ASTM E313'',
      ''ASTM E313 Alternative''] | str" = ''ASTM E313'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness_ASTMD1925
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness_ASTME313_alternative
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness_ASTME313
    signature: '(XYZ: ''ArrayLike'', C_XZ: ''ArrayLike'' = array([ 1.2985,  1.1335]))
      -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.blackbody.planck_law
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'', c1: ''float''
      = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.blackbody.blackbody_spectral_radiance
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'', c1: ''float''
      = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.blackbody.sd_blackbody
    signature: '(temperature: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), c1: ''float'' = 3.741771e-16, c2: ''float'' = 0.014388, n: ''float''
      = 1) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.blackbody.rayleigh_jeans_law
    signature: '(wavelength: ''ArrayLike'', temperature: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.blackbody.sd_rayleigh_jeans
    signature: '(temperature: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1)) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.correction.bandpass_correction_Stearns1988
    signature: '(sd: ''SpectralDistribution'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.correction.bandpass_correction
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''Stearns 1988'']
      | str" = ''Stearns 1988'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.dominant.closest_spectral_locus_wavelength
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', xy_s: ''ArrayLike'', inverse:
      ''bool'' = False) -> ''Tuple[NDArrayInt, NDArrayFloat]'''
  - function-name: colour.colorimetry.dominant.dominant_wavelength
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None, inverse: ''bool'' = False) -> ''Tuple[NDArrayFloat, NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.colorimetry.dominant.complementary_wavelength
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.colorimetry.dominant.excitation_purity
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.dominant.colorimetric_purity
    signature: '(xy: ''ArrayLike'', xy_n: ''ArrayLike'', cmfs: ''MultiSpectralDistributions
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.generation.sd_constant
    signature: '(k: ''float'', shape: ''SpectralShape'' = SpectralShape(360, 780,
      1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_zeros
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs:
      ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_ones
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs:
      ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.msds_constant
    signature: '(k: ''float'', labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.generation.msds_zeros
    signature: '(labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.generation.msds_ones
    signature: '(labels: ''Sequence'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.generation.sd_gaussian_normal
    signature: '(mu: ''float'', sigma: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_gaussian_fwhm
    signature: '(peak_wavelength: ''float'', fwhm: ''float'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_gaussian
    signature: '(mu_peak_wavelength: ''float'', sigma_fwhm: ''float'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), method: "Literal[''Normal'', ''FWHM''] | str"
      = ''Normal'', **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_single_led_Ohno2005
    signature: '(peak_wavelength: ''float'', half_spectral_width: ''float'', shape:
      ''SpectralShape'' = SpectralShape(360, 780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_single_led
    signature: '(peak_wavelength: ''float'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Ohno 2005''] | str" = ''Ohno 2005'', **kwargs: ''Any'')
      -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_multi_leds_Ohno2005
    signature: '(peak_wavelengths: ''ArrayLike'', half_spectral_widths: ''ArrayLike'',
      peak_power_ratios: ''ArrayLike | None'' = None, shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), **kwargs: ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.generation.sd_multi_leds
    signature: '(peak_wavelengths: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Ohno 2005''] | str" = ''Ohno 2005'', **kwargs: ''Any'')
      -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.illuminants.sd_CIE_standard_illuminant_A
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1)) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.illuminants.sd_CIE_illuminant_D_series
    signature: '(xy: ''ArrayLike'', M1_M2_rounding: ''bool'' = True, shape: ''SpectralShape
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.illuminants.daylight_locus_function
    signature: '(x_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lefs.mesopic_weighting_function
    signature: '(wavelength: ''ArrayLike'', L_p: ''float'', source: "Literal[''Blue
      Heavy'', ''Red Heavy''] | str" = ''Blue Heavy'', method: "Literal[''MOVE'',
      ''LRC''] | str" = ''MOVE'', photopic_lef: ''SpectralDistribution | None'' =
      None, scotopic_lef: ''SpectralDistribution | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lefs.sd_mesopic_luminous_efficiency_function
    signature: '(L_p: ''float'', source: "Literal[''Blue Heavy'', ''Red Heavy''] |
      str" = ''Blue Heavy'', method: "Literal[''MOVE'', ''LRC''] | str" = ''MOVE'',
      photopic_lef: ''SpectralDistribution | None'' = None, scotopic_lef: ''SpectralDistribution
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.colorimetry.lightness.lightness_Glasser1958
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness_Wyszecki1963
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.intermediate_lightness_function_CIE1976
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness_CIE1976
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness_Fairchild2010
    signature: '(Y: ''ArrayLike'', epsilon: ''ArrayLike'' = 1.836) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness_Fairchild2011
    signature: '(Y: ''ArrayLike'', epsilon: ''ArrayLike'' = 0.474, method: "Literal[''hdr-CIELAB'',
      ''hdr-IPT''] | str" = ''hdr-CIELAB'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness_Abebe2017
    signature: '(Y: ''ArrayLike'', Y_n: ''ArrayLike'' = 100, method: "Literal[''Michaelis-Menten'',
      ''Stevens''] | str" = ''Michaelis-Menten'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.lightness.lightness
    signature: '(Y: ''ArrayLike'', method: "Literal[''Abebe 2017'', ''CIE 1976'',
      ''Glasser 1958'', ''Fairchild 2010'', ''Fairchild 2011'', ''Wyszecki 1963'']
      | str" = ''CIE 1976'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_Newhall1943
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_ASTMD1535
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.intermediate_luminance_function_CIE1976
    signature: '(f_Y_Y_n: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_CIE1976
    signature: '(L_star: ''ArrayLike'', Y_n: ''ArrayLike'' = 100) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_Fairchild2010
    signature: '(L_hdr: ''ArrayLike'', epsilon: ''ArrayLike'' = 1.836) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_Fairchild2011
    signature: '(L_hdr: ''ArrayLike'', epsilon: ''ArrayLike'' = 0.474, method: "Literal[''hdr-CIELAB'',
      ''hdr-IPT''] | str" = ''hdr-CIELAB'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance_Abebe2017
    signature: '(L: ''ArrayLike'', Y_n: ''ArrayLike'' = 100, method: "Literal[''Michaelis-Menten'',
      ''Stevens''] | str" = ''Michaelis-Menten'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.luminance.luminance
    signature: '(LV: ''ArrayLike'', method: "Literal[''Abebe 2017'', ''CIE 1976'',
      ''Glasser 1958'', ''Fairchild 2010'', ''Fairchild 2011'', ''Wyszecki 1963'']
      | str" = ''CIE 1976'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.photometry.luminous_flux
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None, K_m: ''float'' = 683) -> ''float'''
  - function-name: colour.colorimetry.photometry.luminous_efficiency
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None) -> ''float'''
  - function-name: colour.colorimetry.photometry.luminous_efficacy
    signature: '(sd: ''SpectralDistribution'', lef: ''SpectralDistribution | None''
      = None) -> ''float'''
  - function-name: colour.colorimetry.spectrum.reshape_sd
    signature: '(sd: ''TypeSpectralDistribution'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 1), method: "Literal[''Align'', ''Extrapolate'', ''Interpolate'', ''Trim'']
      | str" = ''Align'', copy: ''bool'' = True, **kwargs: ''Any'') -> ''TypeSpectralDistribution'''
  - function-name: colour.colorimetry.spectrum.reshape_msds
    signature: '(msds: ''TypeMultiSpectralDistributions'', shape: ''SpectralShape''
      = SpectralShape(360, 780, 1), method: "Literal[''Align'', ''Extrapolate'', ''Interpolate'',
      ''Trim''] | str" = ''Align'', copy: ''bool'' = True, **kwargs: ''Any'') -> ''TypeMultiSpectralDistributions'''
  - function-name: colour.colorimetry.spectrum.sds_and_msds_to_sds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'') -> ''List[SpectralDistribution]'''
  - function-name: colour.colorimetry.spectrum.sds_and_msds_to_msds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'') -> ''MultiSpectralDistributions'''
  - function-name: colour.colorimetry.transformations.RGB_2_degree_cmfs_to_XYZ_2_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.transformations.RGB_10_degree_cmfs_to_XYZ_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.transformations.RGB_10_degree_cmfs_to_LMS_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.transformations.LMS_2_degree_cmfs_to_XYZ_2_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.transformations.LMS_10_degree_cmfs_to_XYZ_10_degree_cmfs
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.handle_spectral_arguments
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, cmfs_default: ''str'' = ''CIE 1931 2 Degree Standard Observer'',
      illuminant_default: ''str'' = ''D65'', shape_default: ''SpectralShape'' = SpectralShape(360,
      780, 1), issue_runtime_warnings: ''bool'' = True) -> ''Tuple[MultiSpectralDistributions,
      SpectralDistribution]'''
  - function-name: colour.colorimetry.tristimulus_values.lagrange_coefficients_ASTME2022
    signature: '(interval: ''int'' = 10, interval_type: "Literal[''Boundary'', ''Inner'']
      | str" = ''Inner'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.tristimulus_weighting_factors_ASTME2022
    signature: '(cmfs: ''MultiSpectralDistributions'', illuminant: ''SpectralDistribution'',
      shape: ''SpectralShape'', k: ''Real | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.adjust_tristimulus_weighting_factors_ASTME308
    signature: '(W: ''ArrayLike'', shape_r: ''SpectralShape'', shape_t: ''SpectralShape'')
      -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.sd_to_XYZ_integration
    signature: '(sd: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, shape: ''SpectralShape | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.sd_to_XYZ_tristimulus_weighting_factors_ASTME308
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, k: ''Real
      | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.sd_to_XYZ_ASTME308
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, use_practice_range:
      ''bool'' = True, mi_5nm_omission_method: ''bool'' = True, mi_20nm_interpolation_method:
      ''bool'' = True, k: ''Real | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.sd_to_XYZ
    signature: '(sd: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, method: "Literal[''ASTM E308'',
      ''Integration''] | str" = ''ASTM E308'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.msds_to_XYZ_integration
    signature: '(msds: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, shape: ''SpectralShape | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.msds_to_XYZ_ASTME308
    signature: '(msds: ''MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, k: ''Real
      | None'' = None, use_practice_range: ''bool'' = True, mi_5nm_omission_method:
      ''bool'' = True, mi_20nm_interpolation_method: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.msds_to_XYZ
    signature: '(msds: ''ArrayLike | SpectralDistribution | MultiSpectralDistributions'',
      cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, k: ''Real | None'' = None, method: "Literal[''ASTM E308'',
      ''Integration''] | str" = ''ASTM E308'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.tristimulus_values.wavelength_to_XYZ
    signature: '(wavelength: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.uniformity.spectral_uniformity
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', use_second_order_derivatives:
      ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_Berger1959
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_Taube1960
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_Stensby1968
    signature: '(Lab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_ASTME313
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_Ganz1979
    signature: '(xy: ''ArrayLike'', Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness_CIE2004
    signature: '(xy: ''ArrayLike'', Y: ''ArrayLike'', xy_n: ''ArrayLike'', observer:
      "Literal[''CIE 1931 2 Degree Standard Observer'', ''CIE 1964 10 Degree Standard
      Observer'']" = ''CIE 1931 2 Degree Standard Observer'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.whiteness.whiteness
    signature: '(XYZ: ''ArrayLike'', XYZ_0: ''ArrayLike'', method: "Literal[''ASTM
      E313'', ''CIE 2004'', ''Berger 1959'', ''Ganz 1979'', ''Stensby 1968'', ''Taube
      1960''] | str" = ''CIE 2004'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness.yellowness_ASTMD1925
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness.yellowness_ASTME313_alternative
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness.yellowness_ASTME313
    signature: '(XYZ: ''ArrayLike'', C_XZ: ''ArrayLike'' = array([ 1.2985,  1.1335]))
      -> ''NDArrayFloat'''
  - function-name: colour.colorimetry.yellowness.yellowness
    signature: '(XYZ: ''ArrayLike'', method: "Literal[''ASTM D1925'', ''ASTM E313'',
      ''ASTM E313 Alternative''] | str" = ''ASTM E313'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.contrast.optical_MTF_Barten1999
    signature: '(u: ''ArrayLike'', sigma: ''ArrayLike'' = 0.01) -> ''NDArrayFloat'''
  - function-name: colour.contrast.pupil_diameter_Barten1999
    signature: '(L: ''ArrayLike'', X_0: ''ArrayLike'' = 60, Y_0: ''ArrayLike | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.contrast.sigma_Barten1999
    signature: '(sigma_0: ''ArrayLike'' = 0.008333333333333333, C_ab: ''ArrayLike''
      = 0.0013333333333333333, d: ''ArrayLike'' = 2.1) -> ''NDArrayFloat'''
  - function-name: colour.contrast.retinal_illuminance_Barten1999
    signature: '(L: ''ArrayLike'', d: ''ArrayLike'' = 2.1, apply_stiles_crawford_effect_correction:
      ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.contrast.maximum_angular_size_Barten1999
    signature: '(u: ''ArrayLike'', X_0: ''ArrayLike'' = 60, X_max: ''ArrayLike'' =
      12, N_max: ''ArrayLike'' = 15) -> ''NDArrayFloat'''
  - function-name: colour.contrast.contrast_sensitivity_function_Barten1999
    signature: '(u: ''ArrayLike'', sigma: ''ArrayLike'' = 0.0087911571732306338, k:
      ''ArrayLike'' = 3.0, T: ''ArrayLike'' = 0.1, X_0: ''ArrayLike'' = 60, Y_0: ''ArrayLike
      | None'' = None, X_max: ''ArrayLike'' = 12, Y_max: ''ArrayLike | None'' = None,
      N_max: ''ArrayLike'' = 15, n: ''ArrayLike'' = 0.03, p: ''ArrayLike'' = 1227400.0,
      E: ''ArrayLike'' = 66.082316060529919, phi_0: ''ArrayLike'' = 3.0000000000000004e-08,
      u_0: ''ArrayLike'' = 7) -> ''NDArrayFloat'''
  - function-name: colour.contrast.contrast_sensitivity_function
    signature: '(method: "Literal[''Barten 1999''] | str" = ''Barten 1999'', **kwargs)
      -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.optical_MTF_Barten1999
    signature: '(u: ''ArrayLike'', sigma: ''ArrayLike'' = 0.01) -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.pupil_diameter_Barten1999
    signature: '(L: ''ArrayLike'', X_0: ''ArrayLike'' = 60, Y_0: ''ArrayLike | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.sigma_Barten1999
    signature: '(sigma_0: ''ArrayLike'' = 0.008333333333333333, C_ab: ''ArrayLike''
      = 0.0013333333333333333, d: ''ArrayLike'' = 2.1) -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.retinal_illuminance_Barten1999
    signature: '(L: ''ArrayLike'', d: ''ArrayLike'' = 2.1, apply_stiles_crawford_effect_correction:
      ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.maximum_angular_size_Barten1999
    signature: '(u: ''ArrayLike'', X_0: ''ArrayLike'' = 60, X_max: ''ArrayLike'' =
      12, N_max: ''ArrayLike'' = 15) -> ''NDArrayFloat'''
  - function-name: colour.contrast.barten1999.contrast_sensitivity_function_Barten1999
    signature: '(u: ''ArrayLike'', sigma: ''ArrayLike'' = 0.0087911571732306338, k:
      ''ArrayLike'' = 3.0, T: ''ArrayLike'' = 0.1, X_0: ''ArrayLike'' = 60, Y_0: ''ArrayLike
      | None'' = None, X_max: ''ArrayLike'' = 12, Y_max: ''ArrayLike | None'' = None,
      N_max: ''ArrayLike'' = 15, n: ''ArrayLike'' = 0.03, p: ''ArrayLike'' = 1227400.0,
      E: ''ArrayLike'' = 66.082316060529919, phi_0: ''ArrayLike'' = 3.0000000000000004e-08,
      u_0: ''ArrayLike'' = 7) -> ''NDArrayFloat'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction_CIE1994
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction_CMCCAT2000
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction_Fairchild1990
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction_VonKries
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, transform: ''LiteralChromaticAdaptationTransform | str'' = ''CAT02'') ->
      ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction_Zhai2018
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, D_b: ''ArrayLike'' = 1, D_d: ''ArrayLike'' = 1, XYZ_wo: ''ArrayLike'' =
      array([1, 1, 1]), transform: "Literal[''CAT02'', ''CAT16''] | str" = ''CAT02'')
      -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.corresponding_chromaticities_prediction
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, model: "Literal[''CIE 1994'', ''CMCCAT2000'', ''Fairchild 1990'', ''Von
      Kries'', ''Zhai 2018''] | str" = ''Von Kries'', **kwargs: ''Any'') -> ''Tuple[CorrespondingChromaticitiesPrediction,
      ...]'''
  - function-name: colour.corresponding.prediction.convert_experiment_results_Breneman1987
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12]'') -> ''CorrespondingColourDataset'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction_Fairchild1990
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction_CIE1994
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction_CMCCAT2000
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1) -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction_VonKries
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, transform: ''LiteralChromaticAdaptationTransform | str'' = ''CAT02'') ->
      ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction_Zhai2018
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, D_b: ''ArrayLike'' = 1, D_d: ''ArrayLike'' = 1, XYZ_wo: ''ArrayLike'' =
      array([1, 1, 1]), transform: "Literal[''CAT02'', ''CAT16''] | str" = ''CAT02'')
      -> ''Tuple[CorrespondingChromaticitiesPrediction, ...]'''
  - function-name: colour.corresponding.prediction.corresponding_chromaticities_prediction
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, model: "Literal[''CIE 1994'', ''CMCCAT2000'', ''Fairchild 1990'', ''Von
      Kries'', ''Zhai 2018''] | str" = ''Von Kries'', **kwargs: ''Any'') -> ''Tuple[CorrespondingChromaticitiesPrediction,
      ...]'''
  - function-name: colour.difference.delta_E_CAM02LCD
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CAM02SCD
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CAM02UCS
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CAM16LCD
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.delta_E_CAM16SCD
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.delta_E_CAM16UCS
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.delta_E_CIE1976
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CIE1994
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CIE2000
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_CMC
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', l: ''float'' = 2, c:
      ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_ITP
    signature: '(ICtCp_1: ''ArrayLike'', ICtCp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E_DIN99
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.power_function_Huang2015
    signature: '(d_E: ''ArrayLike'', coefficients: "Literal[''CIE 1976'', ''CIE 1994'',
      ''CIE 2000'', ''CMC'', ''CAM02-LCD'', ''CAM02-SCD'', ''CAM16-UCS'', ''DIN99d'',
      ''OSA'', ''OSA-GP-Euclidean'', ''ULAB''] | str" = ''CIE 2000'') -> ''NDArrayFloat'''
  - function-name: colour.difference.index_stress_Garcia2007
    signature: '(d_E: ''ArrayLike'', d_V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.index_stress
    signature: '(d_E: ''ArrayLike'', d_V: ''ArrayLike'', method: "Literal[''Garcia
      2007''] | str" = ''Garcia 2007'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_E
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', method: "Literal[''CIE 1976'',
      ''CIE 1994'', ''CIE 2000'', ''CMC'', ''ITP'', ''CAM02-LCD'', ''CAM02-SCD'',
      ''CAM02-UCS'', ''CAM16-LCD'', ''CAM16-SCD'', ''CAM16-UCS'', ''DIN99''] | str"
      = ''CIE 2000'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.difference.cam02_ucs.delta_E_Luo2006
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'', coefficients: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.difference.cam02_ucs.delta_E_CAM02LCD
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.cam02_ucs.delta_E_CAM02SCD
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.cam02_ucs.delta_E_CAM02UCS
    signature: '(Jpapbp_1: ''ArrayLike'', Jpapbp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.cam16_ucs.delta_E_Li2017
    signature: (Jpapbp_1, Jpapbp_2, coefficients)
  - function-name: colour.difference.cam16_ucs.delta_E_CAM16LCD
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.cam16_ucs.delta_E_CAM16SCD
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.cam16_ucs.delta_E_CAM16UCS
    signature: (Jpapbp_1, Jpapbp_2)
  - function-name: colour.difference.delta_e.delta_E_CIE1976
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_e.delta_E_CIE1994
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_e.delta_E_CIE2000
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_e.delta_E_CMC
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', l: ''float'' = 2, c:
      ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.difference.delta_e.delta_E_ITP
    signature: '(ICtCp_1: ''ArrayLike'', ICtCp_2: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.din99.delta_E_DIN99
    signature: '(Lab_1: ''ArrayLike'', Lab_2: ''ArrayLike'', textiles: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.difference.huang2015.power_function_Huang2015
    signature: '(d_E: ''ArrayLike'', coefficients: "Literal[''CIE 1976'', ''CIE 1994'',
      ''CIE 2000'', ''CMC'', ''CAM02-LCD'', ''CAM02-SCD'', ''CAM16-UCS'', ''DIN99d'',
      ''OSA'', ''OSA-GP-Euclidean'', ''ULAB''] | str" = ''CIE 2000'') -> ''NDArrayFloat'''
  - function-name: colour.difference.stress.index_stress_Garcia2007
    signature: '(d_E: ''ArrayLike'', d_V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.difference.stress.index_stress
    signature: '(d_E: ''ArrayLike'', d_V: ''ArrayLike'', method: "Literal[''Garcia
      2007''] | str" = ''Garcia 2007'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse_coefficients_general_form
    signature: '(coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse_coefficients_canonical_form
    signature: '(coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.point_at_angle_on_ellipse
    signature: '(phi: ''ArrayLike'', coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse_fitting_Halir1998
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse_fitting
    signature: '(a: ''ArrayLike'', method: "Literal[''Halir 1998''] | str" = ''Halir
      1998'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.extend_line_segment
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', distance: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.geometry.intersect_line_segments
    signature: '(l_1: ''ArrayLike'', l_2: ''ArrayLike'') -> ''LineSegmentsIntersections_Specification'''
  - function-name: colour.geometry.primitive_grid
    signature: '(width: ''float'' = 1, height: ''float'' = 1, width_segments: ''int''
      = 1, height_segments: ''int'' = 1, axis: "Literal[''-x'', ''+x'', ''-y'', ''+y'',
      ''-z'', ''+z'', ''xy'', ''xz'', ''yz'', ''yx'', ''zx'', ''zy'']" = ''+z'', dtype_vertices:
      ''Type[DTypeFloat] | None'' = None, dtype_indexes: ''Type[DTypeInt] | None''
      = None) -> ''Tuple[NDArray, NDArray, NDArray]'''
  - function-name: colour.geometry.primitive_cube
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 1,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, depth_segments: ''int''
      = 1, planes: "Literal[''-x'', ''+x'', ''-y'', ''+y'', ''-z'', ''+z'', ''xy'',
      ''xz'', ''yz'', ''yx'', ''zx'', ''zy''] | None" = None, dtype_vertices: ''Type[DTypeFloat]
      | None'' = None, dtype_indexes: ''Type[DTypeInt] | None'' = None) -> ''Tuple[NDArray,
      NDArray, NDArray]'''
  - function-name: colour.geometry.hull_section
    signature: '(hull: ''trimesh.Trimesh'', axis: "Literal[''+z'', ''+x'', ''+y'']
      | str" = ''+z'', origin: ''float'' = 0.5, normalise: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.geometry.primitive
    signature: '(method: "Literal[''Cube'', ''Grid''] | str" = ''Cube'', **kwargs:
      ''Any'') -> ''Tuple[NDArray, NDArray, NDArray]'''
  - function-name: colour.geometry.primitive_vertices_quad_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 0,
      origin: ''ArrayLike'' = array([0, 0]), axis: "Literal[''+z'', ''+x'', ''+y'',
      ''yz'', ''xz'', ''xy''] | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.primitive_vertices_grid_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 0,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, origin: ''ArrayLike''
      = array([0, 0]), axis: "Literal[''+z'', ''+x'', ''+y'', ''yz'', ''xz'', ''xy'']
      | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.primitive_vertices_cube_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 1,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, depth_segments: ''int''
      = 1, origin: ''ArrayLike'' = array([0, 0, 0]), planes: "Literal[''-x'', ''+x'',
      ''-y'', ''+y'', ''-z'', ''+z'', ''xy'', ''xz'', ''yz'', ''yx'', ''zx'', ''zy'']
      | None" = None) -> ''NDArrayFloat'''
  - function-name: colour.geometry.primitive_vertices_sphere
    signature: '(radius: ''float'' = 0.5, segments: ''int'' = 8, intermediate: ''bool''
      = False, origin: ''ArrayLike'' = array([0, 0, 0]), axis: "Literal[''+z'', ''+x'',
      ''+y'', ''yz'', ''xz'', ''xy''] | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.primitive_vertices
    signature: '(method: "Literal[''Cube MPL'', ''Quad MPL'', ''Grid MPL'', ''Sphere'']
      | str" = ''Cube MPL'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse.ellipse_coefficients_general_form
    signature: '(coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse.ellipse_coefficients_canonical_form
    signature: '(coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse.point_at_angle_on_ellipse
    signature: '(phi: ''ArrayLike'', coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse.ellipse_fitting_Halir1998
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.ellipse.ellipse_fitting
    signature: '(a: ''ArrayLike'', method: "Literal[''Halir 1998''] | str" = ''Halir
      1998'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.intersection.extend_line_segment
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', distance: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.geometry.intersection.intersect_line_segments
    signature: '(l_1: ''ArrayLike'', l_2: ''ArrayLike'') -> ''LineSegmentsIntersections_Specification'''
  - function-name: colour.geometry.primitives.primitive_grid
    signature: '(width: ''float'' = 1, height: ''float'' = 1, width_segments: ''int''
      = 1, height_segments: ''int'' = 1, axis: "Literal[''-x'', ''+x'', ''-y'', ''+y'',
      ''-z'', ''+z'', ''xy'', ''xz'', ''yz'', ''yx'', ''zx'', ''zy'']" = ''+z'', dtype_vertices:
      ''Type[DTypeFloat] | None'' = None, dtype_indexes: ''Type[DTypeInt] | None''
      = None) -> ''Tuple[NDArray, NDArray, NDArray]'''
  - function-name: colour.geometry.primitives.primitive_cube
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 1,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, depth_segments: ''int''
      = 1, planes: "Literal[''-x'', ''+x'', ''-y'', ''+y'', ''-z'', ''+z'', ''xy'',
      ''xz'', ''yz'', ''yx'', ''zx'', ''zy''] | None" = None, dtype_vertices: ''Type[DTypeFloat]
      | None'' = None, dtype_indexes: ''Type[DTypeInt] | None'' = None) -> ''Tuple[NDArray,
      NDArray, NDArray]'''
  - function-name: colour.geometry.primitives.primitive
    signature: '(method: "Literal[''Cube'', ''Grid''] | str" = ''Cube'', **kwargs:
      ''Any'') -> ''Tuple[NDArray, NDArray, NDArray]'''
  - function-name: colour.geometry.section.edges_to_chord
    signature: '(edges: ''ArrayLike'', index: ''int'' = 0) -> ''NDArrayFloat'''
  - function-name: colour.geometry.section.unique_vertices
    signature: '(vertices: ''ArrayLike'', decimals: ''int'' = 14) -> ''NDArrayFloat'''
  - function-name: colour.geometry.section.close_chord
    signature: '(vertices: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.section.hull_section
    signature: '(hull: ''trimesh.Trimesh'', axis: "Literal[''+z'', ''+x'', ''+y'']
      | str" = ''+z'', origin: ''float'' = 0.5, normalise: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.geometry.vertices.primitive_vertices_quad_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 0,
      origin: ''ArrayLike'' = array([0, 0]), axis: "Literal[''+z'', ''+x'', ''+y'',
      ''yz'', ''xz'', ''xy''] | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.vertices.primitive_vertices_grid_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 0,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, origin: ''ArrayLike''
      = array([0, 0]), axis: "Literal[''+z'', ''+x'', ''+y'', ''yz'', ''xz'', ''xy'']
      | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.vertices.primitive_vertices_cube_mpl
    signature: '(width: ''float'' = 1, height: ''float'' = 1, depth: ''float'' = 1,
      width_segments: ''int'' = 1, height_segments: ''int'' = 1, depth_segments: ''int''
      = 1, origin: ''ArrayLike'' = array([0, 0, 0]), planes: "Literal[''-x'', ''+x'',
      ''-y'', ''+y'', ''-z'', ''+z'', ''xy'', ''xz'', ''yz'', ''yx'', ''zx'', ''zy'']
      | None" = None) -> ''NDArrayFloat'''
  - function-name: colour.geometry.vertices.primitive_vertices_sphere
    signature: '(radius: ''float'' = 0.5, segments: ''int'' = 8, intermediate: ''bool''
      = False, origin: ''ArrayLike'' = array([0, 0, 0]), axis: "Literal[''+z'', ''+x'',
      ''+y'', ''yz'', ''xz'', ''xy''] | str" = ''+z'') -> ''NDArrayFloat'''
  - function-name: colour.geometry.vertices.primitive_vertices
    signature: '(method: "Literal[''Cube MPL'', ''Quad MPL'', ''Grid MPL'', ''Sphere'']
      | str" = ''Cube MPL'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.graph.describe_conversion_path
    signature: '(source: ''str'', target: ''str'', mode: "Literal[''Short'', ''Long'',
      ''Extended''] | str" = ''Short'', width: ''int'' = 79, padding: ''int'' = 3,
      print_callable: ''Callable'' = <built-in function print>, **kwargs: ''Any'')'
  - function-name: colour.graph.convert
    signature: '(a: ''Any'', source: ''str'', target: ''str'', **kwargs: ''Any'')
      -> ''Any'''
  - function-name: colour.graph.conversion.CIECAM02_to_JMh_CIECAM02
    signature: '(specification: ''CAM_Specification_CIECAM02'') -> ''NDArrayFloat'''
  - function-name: colour.graph.conversion.JMh_CIECAM02_to_CIECAM02
    signature: '(JMh: ''ArrayLike'') -> ''CAM_Specification_CIECAM02'''
  - function-name: colour.graph.conversion.CAM16_to_JMh_CAM16
    signature: (specification) -> 'NDArrayFloat'
  - function-name: colour.graph.conversion.JMh_CAM16_to_CAM16
    signature: '(JMh: ''ArrayLike'') -> ''CAM_Specification_CAM16'''
  - function-name: colour.graph.conversion.Hellwig2022_to_JMh_Hellwig2022
    signature: (specification) -> 'NDArrayFloat'
  - function-name: colour.graph.conversion.JMh_Hellwig2022_to_Hellwig2022
    signature: '(JMh: ''ArrayLike'') -> ''CAM_Specification_Hellwig2022'''
  - function-name: colour.graph.conversion.XYZ_to_luminance
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.graph.conversion.RGB_luminance_to_RGB
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.graph.conversion.CCT_D_uv_to_mired
    signature: '(CCT_D_uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.graph.conversion.mired_to_CCT_D_uv
    signature: '(mired: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.graph.conversion.describe_conversion_path
    signature: '(source: ''str'', target: ''str'', mode: "Literal[''Short'', ''Long'',
      ''Extended''] | str" = ''Short'', width: ''int'' = 79, padding: ''int'' = 3,
      print_callable: ''Callable'' = <built-in function print>, **kwargs: ''Any'')'
  - function-name: colour.graph.conversion.convert
    signature: '(a: ''Any'', source: ''str'', target: ''str'', **kwargs: ''Any'')
      -> ''Any'''
  - function-name: colour.hints.TypedDict
    signature: (typename, fields=<sentinel>, /, *, total=True)
  - function-name: colour.hints.cast
    signature: (typ, val)
  - function-name: colour.hints.overload
    signature: (func)
  - function-name: colour.hints.runtime_checkable
    signature: (cls)
  - function-name: colour.io.LUT_to_LUT
    signature: '(LUT, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' = False,
      **kwargs: ''Any'') -> ''AbstractLUT'''
  - function-name: colour.io.read_LUT_IridasCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D'''
  - function-name: colour.io.write_LUT_IridasCube
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.read_LUT_ResolveCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.write_LUT_ResolveCube
    signature: '(LUT: ''LUT1D | LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'',
      decimals: ''int'' = 7) -> ''bool'''
  - function-name: colour.io.read_LUT_SonySPI1D
    signature: '(path: ''str | Path'') -> ''LUT1D | LUT3x1D'''
  - function-name: colour.io.write_LUT_SonySPI1D
    signature: '(LUT: ''LUT1D | LUT3x1D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.read_LUT_SonySPI3D
    signature: '(path: ''str | Path'') -> ''LUT3D'''
  - function-name: colour.io.write_LUT_SonySPI3D
    signature: '(LUT: ''LUT3D | LUTSequence'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.read_LUT_SonySPImtx
    signature: '(path: ''str | Path'') -> ''LUTOperatorMatrix'''
  - function-name: colour.io.write_LUT_SonySPImtx
    signature: '(LUT: ''LUTOperatorMatrix'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.read_LUT_Cinespace
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.write_LUT_Cinespace
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.read_LUT
    signature: '(path: ''str | Path'', method: ''LiteralLUTReadMethod | str | None''
      = None, **kwargs: ''Any'') -> ''LUT1D | LUT3x1D | LUT3D | LUTSequence | LUTOperatorMatrix'''
  - function-name: colour.io.write_LUT
    signature: '(LUT: ''LUT1D | LUT3x1D | LUT3D | LUTSequence | LUTOperatorMatrix'',
      path: ''str | Path'', decimals: ''int'' = 7, method: ''LiteralLUTWriteMethod
      | str | None'' = None, **kwargs: ''Any'') -> ''bool'''
  - function-name: colour.io.image_specification_OpenImageIO
    signature: '(width: ''int'', height: ''int'', channels: ''int'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      attributes: ''Sequence | None'' = None) -> ''ImageSpec'''
  - function-name: colour.io.convert_bit_depth
    signature: '(a: ''ArrayLike'', bit_depth: "Literal[''uint8'', ''uint16'', ''float16'',
      ''float32'', ''float64'', ''float128'']" = ''float32'') -> ''NDArrayReal'''
  - function-name: colour.io.read_image_OpenImageIO
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', additional_data:
      ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayReal | Tuple[NDArrayReal, list]'''
  - function-name: colour.io.write_image_OpenImageIO
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      attributes: ''Sequence | None'' = None) -> ''bool'''
  - function-name: colour.io.read_image_Imageio
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', **kwargs:
      ''Any'') -> ''NDArrayReal'''
  - function-name: colour.io.write_image_Imageio
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      **kwargs: ''Any'') -> ''bytes | None'''
  - function-name: colour.io.read_image
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', method:
      "Literal[''Imageio'', ''OpenImageIO''] | str" = ''OpenImageIO'', **kwargs: ''Any'')
      -> ''NDArrayReal'''
  - function-name: colour.io.write_image
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      method: "Literal[''Imageio'', ''OpenImageIO''] | str" = ''OpenImageIO'', **kwargs:
      ''Any'') -> ''bool'''
  - function-name: colour.io.ctl_render
    signature: '(path_input: ''str | Path'', path_output: ''str | Path'', ctl_transforms:
      ''Sequence[str] | Dict[str, Sequence[str]]'', *args: ''Any'', **kwargs: ''Any'')
      -> ''subprocess.CompletedProcess'''
  - function-name: colour.io.process_image_ctl
    signature: '(a: ''ArrayLike'', ctl_transforms: ''Sequence[str] | Dict[str, Sequence[str]]'',
      *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.io.template_ctl_transform_float
    signature: '(R_function: ''str'', G_function: ''str | None'' = None, B_function:
      ''str | None'' = None, description: ''str | None'' = None, parameters: ''Sequence[str]
      | None'' = None, imports: ''Sequence[str] | None'' = None, header: ''str | None''
      = None) -> ''str'''
  - function-name: colour.io.template_ctl_transform_float3
    signature: '(RGB_function: ''str'', description: ''str | None'' = None, parameters:
      ''Sequence[str] | None'' = None, imports: ''Sequence[str] | None'' = None, header:
      ''str | None'' = None) -> ''str'''
  - function-name: colour.io.as_3_channels_image
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.io.sd_to_spectrum_attribute_Fichet2021
    signature: '(sd: ''SpectralDistribution'', decimals: ''int'' = 7) -> ''str'''
  - function-name: colour.io.spectrum_attribute_to_sd_Fichet2021
    signature: '(spectrum_attribute: ''str'') -> ''SpectralDistribution'''
  - function-name: colour.io.read_spectral_image_Fichet2021
    signature: '(path: ''str | Path'', bit_depth: "Literal[''float16'', ''float32'']"
      = ''float32'', additional_data: ''bool'' = False) -> ''ComponentsFichet2021
      | Tuple[ComponentsFichet2021, Specification_Fichet2021]'''
  - function-name: colour.io.write_spectral_image_Fichet2021
    signature: '(components: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions | ComponentsFichet2021'',
      path: ''str | Path'', bit_depth: "Literal[''float16'', ''float32'']" = ''float32'',
      specification: ''Specification_Fichet2021'' = Specification_Fichet2021(path=None,
      components=defaultdict(<class ''dict''>, {}), is_emissive=False, is_polarised=False,
      is_bispectral=False, attributes=None), components_to_RGB_callable: ''Callable''
      = <function components_to_sRGB_Fichet2021 at 0x7b93492e5d00>, **kwargs)'
  - function-name: colour.io.process_image_OpenColorIO
    signature: '(a: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.io.read_spectral_data_from_csv_file
    signature: '(path: ''str | Path'', **kwargs: ''Any'') -> ''Dict[str, NDArrayFloat]'''
  - function-name: colour.io.read_sds_from_csv_file
    signature: '(path: ''str | Path'', **kwargs: ''Any'') -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.io.write_sds_to_csv_file
    signature: '(sds: ''Dict[str, SpectralDistribution]'', path: ''str | Path'') ->
      ''bool'''
  - function-name: colour.io.read_sds_from_xrite_file
    signature: '(path: ''str | Path'') -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.io.ctl.ctl_render
    signature: '(path_input: ''str | Path'', path_output: ''str | Path'', ctl_transforms:
      ''Sequence[str] | Dict[str, Sequence[str]]'', *args: ''Any'', **kwargs: ''Any'')
      -> ''subprocess.CompletedProcess'''
  - function-name: colour.io.ctl.process_image_ctl
    signature: '(a: ''ArrayLike'', ctl_transforms: ''Sequence[str] | Dict[str, Sequence[str]]'',
      *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.io.ctl.template_ctl_transform_float
    signature: '(R_function: ''str'', G_function: ''str | None'' = None, B_function:
      ''str | None'' = None, description: ''str | None'' = None, parameters: ''Sequence[str]
      | None'' = None, imports: ''Sequence[str] | None'' = None, header: ''str | None''
      = None) -> ''str'''
  - function-name: colour.io.ctl.template_ctl_transform_float3
    signature: '(RGB_function: ''str'', description: ''str | None'' = None, parameters:
      ''Sequence[str] | None'' = None, imports: ''Sequence[str] | None'' = None, header:
      ''str | None'' = None) -> ''str'''
  - function-name: colour.io.fichet2021.match_groups_to_nm
    signature: '(number: ''str'', multiplier: "Literal[''Y'', ''Z'', ''E'', ''P'',
      ''T'', ''G'', ''M'', ''k'', ''h'', ''da'', '''', ''d'', ''c'', ''m'', ''u'',
      ''n'', ''p''] | str", units: "Literal[''m'', ''Hz''] | str") -> ''float'''
  - function-name: colour.io.fichet2021.sd_to_spectrum_attribute_Fichet2021
    signature: '(sd: ''SpectralDistribution'', decimals: ''int'' = 7) -> ''str'''
  - function-name: colour.io.fichet2021.spectrum_attribute_to_sd_Fichet2021
    signature: '(spectrum_attribute: ''str'') -> ''SpectralDistribution'''
  - function-name: colour.io.fichet2021.read_spectral_image_Fichet2021
    signature: '(path: ''str | Path'', bit_depth: "Literal[''float16'', ''float32'']"
      = ''float32'', additional_data: ''bool'' = False) -> ''ComponentsFichet2021
      | Tuple[ComponentsFichet2021, Specification_Fichet2021]'''
  - function-name: colour.io.fichet2021.sds_and_msds_to_components_Fichet2021
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', specification: ''Specification_Fichet2021''
      = Specification_Fichet2021(path=None, components=defaultdict(<class ''dict''>,
      {}), is_emissive=False, is_polarised=False, is_bispectral=False, attributes=None),
      **kwargs) -> ''ComponentsFichet2021'''
  - function-name: colour.io.fichet2021.components_to_sRGB_Fichet2021
    signature: '(components: ''ComponentsFichet2021'', specification: ''Specification_Fichet2021''
      = Specification_Fichet2021(path=None, components=defaultdict(<class ''dict''>,
      {}), is_emissive=False, is_polarised=False, is_bispectral=False, attributes=None))
      -> ''Tuple[NDArrayFloat | None, Sequence[Image_Specification_Attribute]]'''
  - function-name: colour.io.fichet2021.write_spectral_image_Fichet2021
    signature: '(components: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions | ComponentsFichet2021'',
      path: ''str | Path'', bit_depth: "Literal[''float16'', ''float32'']" = ''float32'',
      specification: ''Specification_Fichet2021'' = Specification_Fichet2021(path=None,
      components=defaultdict(<class ''dict''>, {}), is_emissive=False, is_polarised=False,
      is_bispectral=False, attributes=None), components_to_RGB_callable: ''Callable''
      = <function components_to_sRGB_Fichet2021 at 0x7b93492e5d00>, **kwargs)'
  - function-name: colour.io.image.add_attributes_to_image_specification_OpenImageIO
    signature: '(image_specification: ''ImageSpec'', attributes: ''Sequence'')'
  - function-name: colour.io.image.image_specification_OpenImageIO
    signature: '(width: ''int'', height: ''int'', channels: ''int'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      attributes: ''Sequence | None'' = None) -> ''ImageSpec'''
  - function-name: colour.io.image.convert_bit_depth
    signature: '(a: ''ArrayLike'', bit_depth: "Literal[''uint8'', ''uint16'', ''float16'',
      ''float32'', ''float64'', ''float128'']" = ''float32'') -> ''NDArrayReal'''
  - function-name: colour.io.image.read_image_OpenImageIO
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', additional_data:
      ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayReal | Tuple[NDArrayReal, list]'''
  - function-name: colour.io.image.read_image_Imageio
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', **kwargs:
      ''Any'') -> ''NDArrayReal'''
  - function-name: colour.io.image.read_image
    signature: '(path: ''str | Path'', bit_depth: "Literal[''uint8'', ''uint16'',
      ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'', method:
      "Literal[''Imageio'', ''OpenImageIO''] | str" = ''OpenImageIO'', **kwargs: ''Any'')
      -> ''NDArrayReal'''
  - function-name: colour.io.image.write_image_OpenImageIO
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      attributes: ''Sequence | None'' = None) -> ''bool'''
  - function-name: colour.io.image.write_image_Imageio
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      **kwargs: ''Any'') -> ''bytes | None'''
  - function-name: colour.io.image.write_image
    signature: '(image: ''ArrayLike'', path: ''str | Path'', bit_depth: "Literal[''uint8'',
      ''uint16'', ''float16'', ''float32'', ''float64'', ''float128'']" = ''float32'',
      method: "Literal[''Imageio'', ''OpenImageIO''] | str" = ''OpenImageIO'', **kwargs:
      ''Any'') -> ''bool'''
  - function-name: colour.io.image.as_3_channels_image
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.io.luts.LUT_to_LUT
    signature: '(LUT, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' = False,
      **kwargs: ''Any'') -> ''AbstractLUT'''
  - function-name: colour.io.luts.read_LUT_IridasCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D'''
  - function-name: colour.io.luts.write_LUT_IridasCube
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT_ResolveCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.luts.write_LUT_ResolveCube
    signature: '(LUT: ''LUT1D | LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'',
      decimals: ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT_SonySPI1D
    signature: '(path: ''str | Path'') -> ''LUT1D | LUT3x1D'''
  - function-name: colour.io.luts.write_LUT_SonySPI1D
    signature: '(LUT: ''LUT1D | LUT3x1D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT_SonySPI3D
    signature: '(path: ''str | Path'') -> ''LUT3D'''
  - function-name: colour.io.luts.write_LUT_SonySPI3D
    signature: '(LUT: ''LUT3D | LUTSequence'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT_SonySPImtx
    signature: '(path: ''str | Path'') -> ''LUTOperatorMatrix'''
  - function-name: colour.io.luts.write_LUT_SonySPImtx
    signature: '(LUT: ''LUTOperatorMatrix'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT_Cinespace
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.luts.write_LUT_Cinespace
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.read_LUT
    signature: '(path: ''str | Path'', method: ''LiteralLUTReadMethod | str | None''
      = None, **kwargs: ''Any'') -> ''LUT1D | LUT3x1D | LUT3D | LUTSequence | LUTOperatorMatrix'''
  - function-name: colour.io.luts.write_LUT
    signature: '(LUT: ''LUT1D | LUT3x1D | LUT3D | LUTSequence | LUTOperatorMatrix'',
      path: ''str | Path'', decimals: ''int'' = 7, method: ''LiteralLUTWriteMethod
      | str | None'' = None, **kwargs: ''Any'') -> ''bool'''
  - function-name: colour.io.luts.cinespace_csp.read_LUT_Cinespace
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.luts.cinespace_csp.write_LUT_Cinespace
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.common.path_to_title
    signature: '(path: ''str | Path'') -> ''str'''
  - function-name: colour.io.luts.iridas_cube.read_LUT_IridasCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D'''
  - function-name: colour.io.luts.iridas_cube.write_LUT_IridasCube
    signature: '(LUT: ''LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.lut.LUT_to_LUT
    signature: '(LUT, cls: ''Type[AbstractLUT]'', force_conversion: ''bool'' = False,
      **kwargs: ''Any'') -> ''AbstractLUT'''
  - function-name: colour.io.luts.resolve_cube.read_LUT_ResolveCube
    signature: '(path: ''str | Path'') -> ''LUT3x1D | LUT3D | LUTSequence'''
  - function-name: colour.io.luts.resolve_cube.write_LUT_ResolveCube
    signature: '(LUT: ''LUT1D | LUT3x1D | LUT3D | LUTSequence'', path: ''str | Path'',
      decimals: ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.sony_spi1d.read_LUT_SonySPI1D
    signature: '(path: ''str | Path'') -> ''LUT1D | LUT3x1D'''
  - function-name: colour.io.luts.sony_spi1d.write_LUT_SonySPI1D
    signature: '(LUT: ''LUT1D | LUT3x1D | LUTSequence'', path: ''str | Path'', decimals:
      ''int'' = 7) -> ''bool'''
  - function-name: colour.io.luts.sony_spi3d.read_LUT_SonySPI3D
    signature: '(path: ''str | Path'') -> ''LUT3D'''
  - function-name: colour.io.luts.sony_spi3d.write_LUT_SonySPI3D
    signature: '(LUT: ''LUT3D | LUTSequence'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.luts.sony_spimtx.read_LUT_SonySPImtx
    signature: '(path: ''str | Path'') -> ''LUTOperatorMatrix'''
  - function-name: colour.io.luts.sony_spimtx.write_LUT_SonySPImtx
    signature: '(LUT: ''LUTOperatorMatrix'', path: ''str | Path'', decimals: ''int''
      = 7) -> ''bool'''
  - function-name: colour.io.ocio.process_image_OpenColorIO
    signature: '(a: ''ArrayLike'', *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.io.tabular.read_spectral_data_from_csv_file
    signature: '(path: ''str | Path'', **kwargs: ''Any'') -> ''Dict[str, NDArrayFloat]'''
  - function-name: colour.io.tabular.read_sds_from_csv_file
    signature: '(path: ''str | Path'', **kwargs: ''Any'') -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.io.tabular.write_sds_to_csv_file
    signature: '(sds: ''Dict[str, SpectralDistribution]'', path: ''str | Path'') ->
      ''bool'''
  - function-name: colour.io.xrite.read_sds_from_xrite_file
    signature: '(path: ''str | Path'') -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.models.Lab_to_LCHab
    signature: (Jab)
  - function-name: colour.models.LCHab_to_Lab
    signature: (JCh)
  - function-name: colour.models.Luv_to_LCHuv
    signature: (Jab)
  - function-name: colour.models.LCHuv_to_Luv
    signature: (JCh)
  - function-name: colour.models.hdr_CIELab_to_hdr_CIELCHab
    signature: (Jab)
  - function-name: colour.models.hdr_CIELCHab_to_hdr_CIELab
    signature: (JCh)
  - function-name: colour.models.Hunter_Lab_to_Hunter_LCHab
    signature: (Jab)
  - function-name: colour.models.Hunter_LCHab_to_Hunter_Lab
    signature: (JCh)
  - function-name: colour.models.Hunter_Rdab_to_Hunter_RdCHab
    signature: (Jab)
  - function-name: colour.models.Hunter_RdCHab_to_Hunter_Rdab
    signature: (JCh)
  - function-name: colour.models.ICaCb_to_ICHab
    signature: (Jab)
  - function-name: colour.models.ICHab_to_ICaCb
    signature: (JCh)
  - function-name: colour.models.ICtCp_to_ICHtp
    signature: (Jab)
  - function-name: colour.models.ICHtp_to_ICtCp
    signature: (JCh)
  - function-name: colour.models.IgPgTg_to_IgCHpt
    signature: (Jab)
  - function-name: colour.models.IgCHpt_to_IgPgTg
    signature: (JCh)
  - function-name: colour.models.IPT_to_ICH
    signature: (Jab)
  - function-name: colour.models.ICH_to_IPT
    signature: (JCh)
  - function-name: colour.models.Izazbz_to_IzCHab
    signature: (Jab)
  - function-name: colour.models.IzCHab_to_Izazbz
    signature: (JCh)
  - function-name: colour.models.Jzazbz_to_JzCHab
    signature: (Jab)
  - function-name: colour.models.JzCHab_to_Jzazbz
    signature: (JCh)
  - function-name: colour.models.hdr_IPT_to_hdr_ICH
    signature: (Jab)
  - function-name: colour.models.hdr_ICH_to_hdr_IPT
    signature: (JCh)
  - function-name: colour.models.Oklab_to_Oklch
    signature: (Jab)
  - function-name: colour.models.Oklch_to_Oklab
    signature: (JCh)
  - function-name: colour.models.ProLab_to_ProLCHab
    signature: (Jab)
  - function-name: colour.models.ProLCHab_to_ProLab
    signature: (JCh)
  - function-name: colour.models.IPT_Ragoo2021_to_ICH_Ragoo2021
    signature: (Jab)
  - function-name: colour.models.ICH_Ragoo2021_to_IPT_Ragoo2021
    signature: (JCh)
  - function-name: colour.models.Jab_to_JCh
    signature: '(Jab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.JCh_to_Jab
    signature: '(JCh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Iab
    signature: '(XYZ: ''ArrayLike'', LMS_to_LMS_p_callable: ''Callable'', matrix_XYZ_to_LMS:
      ''ArrayLike'', matrix_LMS_p_to_Iab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.Iab_to_XYZ
    signature: '(Iab: ''ArrayLike'', LMS_p_to_LMS_callable: ''Callable'', matrix_Iab_to_LMS_p:
      ''ArrayLike'', matrix_LMS_to_XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.JMh_CIECAM02_to_CAM02LCD
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02LCD_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.JMh_CIECAM02_to_CAM02SCD
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02SCD_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.JMh_CIECAM02_to_CAM02UCS
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02UCS_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_CAM02LCD
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02LCD_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_CAM02SCD
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02SCD_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_CAM02UCS
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.CAM02UCS_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_xyY
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.xyY_to_XYZ
    signature: '(xyY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.xy_to_xyY
    signature: '(xy: ''ArrayLike'', Y: ''NDArrayFloat'' = array(1)) -> ''NDArrayFloat'''
  - function-name: colour.models.xyY_to_xy
    signature: '(xyY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.xy_to_XYZ
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_xy
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Lab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.Lab_to_XYZ
    signature: '(Lab: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Luv
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.Luv_to_XYZ
    signature: '(Luv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.Luv_to_uv
    signature: '(Luv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.uv_to_Luv
    signature: '(uv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), L: ''NDArrayFloat'' = array(100)) -> ''NDArrayFloat'''
  - function-name: colour.models.Luv_uv_to_xy
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.xy_to_Luv_uv
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_CIE1976UCS
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.CIE1976UCS_to_XYZ
    signature: '(uvL: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.UCS_to_XYZ
    signature: '(UVW: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.UCS_to_uv
    signature: '(UVW: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.uv_to_UCS
    signature: '(uv: ''ArrayLike'', V: ''NDArrayFloat'' = array(1)) -> ''NDArrayFloat'''
  - function-name: colour.models.UCS_uv_to_xy
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.xy_to_UCS_uv
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_CIE1960UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CIE1960UCS_to_XYZ
    signature: '(uvV: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_UVW
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.UVW_to_XYZ
    signature: '(UVW: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.Lab_to_DIN99
    signature: '(Lab: ''ArrayLike'', k_E: ''float'' = 1, k_CH: ''float'' = 1, method:
      "Literal[''ASTMD2244-07'', ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] |
      str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.DIN99_to_Lab
    signature: '(Lab_99: ''ArrayLike'', k_E: ''float'' = 1, k_CH: ''float'' = 1, method:
      "Literal[''ASTMD2244-07'', ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] |
      str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_DIN99
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), k_E: ''float'' = 1, k_CH: ''float'' = 1, method: "Literal[''ASTMD2244-07'',
      ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] | str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.DIN99_to_XYZ
    signature: '(Lab_99: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), k_E: ''float'' = 1, k_CH: ''float'' = 1, method: "Literal[''ASTMD2244-07'',
      ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] | str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_hdr_CIELab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike'' = 100, method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_CIELab_to_XYZ
    signature: '(Lab_hdr: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike'' = 100, method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_K_ab_HunterLab1966
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Hunter_Lab
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.Hunter_Lab_to_XYZ
    signature: '(Lab: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Hunter_Rdab
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Hunter_Rdab
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.Hunter_Rdab_to_XYZ
    signature: '(R_d_ab: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_ICaCb
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ICaCb_to_XYZ
    signature: '(ICaCb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_IgPgTg
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.IgPgTg_to_XYZ
    signature: '(IgPgTg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_IPT
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.IPT_to_XYZ
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.IPT_hue_angle
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Izazbz
    signature: '(XYZ_D65: ''ArrayLike'', constants: ''Structure | None'' = None, method:
      "Literal[''Safdar 2017'', ''Safdar 2021'', ''ZCAM''] | str" = ''Safdar 2017'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Jzazbz
    signature: '(XYZ_D65: ''ArrayLike'', constants: ''Structure'' = {''b'': 1.15,
      ''g'': 0.66, ''d'': -0.56, ''d_0'': 1.6295499532821565e-11, ''m_1'': 0.1593017578125,
      ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'': 18.8515625, ''c_3'':
      18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.Izazbz_to_XYZ
    signature: '(Izazbz: ''ArrayLike'', constants: ''Structure | None'' = None, method:
      "Literal[''Safdar 2017'', ''Safdar 2021'', ''ZCAM''] | str" = ''Safdar 2017'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.Jzazbz_to_XYZ
    signature: '(Jzazbz: ''ArrayLike'', constants: ''Structure'' = {''b'': 1.15, ''g'':
      0.66, ''d'': -0.56, ''d_0'': 1.6295499532821565e-11, ''m_1'': 0.1593017578125,
      ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'': 18.8515625, ''c_3'':
      18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_IPT_Ragoo2021
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.IPT_Ragoo2021_to_XYZ
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.LMS_to_Yrg
    signature: '(LMS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.Yrg_to_LMS
    signature: '(Yrg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Yrg
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.Yrg_to_XYZ
    signature: '(Yrg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_hdr_IPT
    signature: '(XYZ: ''ArrayLike'', Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike''
      = 100, method: "Literal[''Fairchild 2011'', ''Fairchild 2010''] | str" = ''Fairchild
      2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_IPT_to_XYZ
    signature: '(IPT_hdr: ''ArrayLike'', Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike''
      = 100, method: "Literal[''Fairchild 2011'', ''Fairchild 2010''] | str" = ''Fairchild
      2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_Oklab
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.Oklab_to_XYZ
    signature: '(Lab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_OSA_UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.OSA_UCS_to_XYZ
    signature: '(Ljg: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_ProLab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.ProLab_to_XYZ
    signature: '(ProLab: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.normalised_primary_matrix
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.chromatically_adapted_primaries
    signature: '(primaries: ''ArrayLike'', whitepoint_t: ''ArrayLike'', whitepoint_r:
      ''ArrayLike'', chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.primaries_whitepoint
    signature: '(npm: ''ArrayLike'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.models.RGB_luminance_equation
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''str'''
  - function-name: colour.models.RGB_luminance
    signature: '(RGB: ''ArrayLike'', primaries: ''ArrayLike'', whitepoint: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_RGB
    signature: '(XYZ: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_encoding:
      ''bool'' = False, *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_decoding:
      ''bool'' = False, *args, **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.models.matrix_RGB_to_RGB
    signature: '(input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'', chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_RGB
    signature: '(RGB: ''ArrayLike'', input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform | str
      | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = False, apply_cctf_encoding:
      ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.CV_range
    signature: '(bit_depth: ''int'' = 10, is_legal: ''bool'' = False, is_int: ''bool''
      = False) -> ''NDArrayReal'''
  - function-name: colour.models.legal_to_full
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.full_to_legal
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.gamma_function
    signature: '(a: ''ArrayLike'', exponent: ''ArrayLike'' = 1, negative_number_handling:
      "Literal[''Clamp'', ''Indeterminate'', ''Mirror'', ''Preserve''] | str" = ''Indeterminate'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ACESproxy
    signature: '(lin_AP1: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, out_int:
      ''bool'' = False, constants: ''dict'' = {10: {''CV_min'': 64, ''CV_max'': 940,
      ''steps_per_stop'': 50, ''mid_CV_offset'': 425, ''mid_log_offset'': 2.5}, 12:
      {''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'': 200, ''mid_CV_offset'':
      1700, ''mid_log_offset'': 2.5}}) -> ''NDArrayFloat | NDArrayInt'''
  - function-name: colour.models.log_decoding_ACESproxy
    signature: '(ACESproxy: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, in_int:
      ''bool'' = False, constants: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ACEScc
    signature: '(lin_AP1: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_ACEScc
    signature: '(ACEScc: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ACEScct
    signature: '(lin_AP1: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_ACEScct
    signature: '(ACEScct: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_AppleLogProfile
    signature: '(R: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_AppleLogProfile
    signature: '(P: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_ARIBSTDB67
    signature: '(E: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_ARIBSTDB67
    signature: '(E_p: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ARRILogC3
    signature: '(x: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_ARRILogC3
    signature: '(t: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ARRILogC4
    signature: '(E_scene: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_ARRILogC4
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BlackmagicFilmGeneration5
    signature: '(x: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BlackmagicFilmGeneration5
    signature: '(y: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_CanonLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_CanonLog
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_CanonLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_CanonLog2
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_CanonLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_CanonLog3
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Cineon
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Cineon
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_DaVinciIntermediate
    signature: '(L: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_DaVinciIntermediate
    signature: '(V: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_DCDM
    signature: '(XYZ: ''ArrayLike'', out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.eotf_DCDM
    signature: '(XYZ_p: ''ArrayLike'', in_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_DICOMGSDF
    signature: '(L: ''ArrayLike'', out_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayReal'''
  - function-name: colour.models.eotf_DICOMGSDF
    signature: '(J: ''ArrayLike'', in_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_DJIDLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_DJIDLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.exponent_function_basic
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, style: "Literal[''basicFwd'',
      ''basicRev'', ''basicMirrorFwd'', ''basicMirrorRev'', ''basicPassThruFwd'',
      ''basicPassThruRev''] | str" = ''basicFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.exponent_function_monitor_curve
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, offset: ''ArrayLike''
      = 0, style: "Literal[''monCurveFwd'', ''monCurveRev'', ''monCurveMirrorFwd'',
      ''monCurveMirrorRev''] | str" = ''monCurveFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_FilmicPro6
    signature: '(t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_FilmicPro6
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_FilmLightTLog
    signature: '(x: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_FilmLightTLog
    signature: '(t: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Protune
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Protune
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT2020
    signature: '(E: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BT2020
    signature: '(E_p: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT601
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BT601
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT709
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BT709
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT1361
    signature: (L)
  - function-name: colour.models.oetf_inverse_BT1361
    signature: (E_p)
  - function-name: colour.models.eotf_inverse_BT1886
    signature: '(L: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_BT1886
    signature: '(V: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_ST2084
    signature: '(C: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_ST2084
    signature: '(N: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ootf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ootf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_BT2100_HLG
    signature: '(E: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_inverse_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.ootf_BT2100_HLG
    signature: '(E: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.ootf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_H273_Log
    signature: (L_c)
  - function-name: colour.models.oetf_inverse_H273_Log
    signature: (V)
  - function-name: colour.models.oetf_H273_LogSqrt
    signature: (L_c)
  - function-name: colour.models.oetf_inverse_H273_LogSqrt
    signature: (V)
  - function-name: colour.models.oetf_H273_IEC61966_2
    signature: (L_c)
  - function-name: colour.models.oetf_inverse_H273_IEC61966_2
    signature: (V)
  - function-name: colour.models.eotf_H273_ST428_1
    signature: (V)
  - function-name: colour.models.eotf_inverse_H273_ST428_1
    signature: (L_o)
  - function-name: colour.models.linear_function
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.logarithmic_function_basic
    signature: '(x: ''ArrayLike'', style: "Literal[''log10'', ''antiLog10'', ''log2'',
      ''antiLog2'', ''logB'', ''antiLogB''] | str" = ''log2'', base: ''int'' = 2)
      -> ''NDArrayFloat'''
  - function-name: colour.models.logarithmic_function_quasilog
    signature: '(x: ''ArrayLike'', style: "Literal[''linToLog'', ''logToLin''] | str"
      = ''linToLog'', base: ''int'' = 2, log_side_slope: ''float'' = 1, lin_side_slope:
      ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset: ''float'' =
      0) -> ''NDArrayFloat'''
  - function-name: colour.models.logarithmic_function_camera
    signature: '(x: ''ArrayLike'', style: "Literal[''cameraLinToLog'', ''cameraLogToLin'']
      | str" = ''cameraLinToLog'', base: ''int'' = 2, log_side_slope: ''float'' =
      1, lin_side_slope: ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset:
      ''float'' = 0, lin_side_break: ''float'' = 0.005, linear_slope: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Log2
    signature: '(lin: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Log2
    signature: '(log_norm: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Panalog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Panalog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_VLog
    signature: '(L_in: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_VLog
    signature: '(V_out: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_FLog
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_FLog
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_FLog2
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_FLog2
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_LLog
    signature: '(LSR: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_LLog
    signature: '(LLog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_NLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_NLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_PivotedLog
    signature: '(x: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_PivotedLog
    signature: '(y: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_REDLog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_REDLog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_REDLogFilm
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_REDLogFilm
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Log3G10
    signature: '(x: ''ArrayLike'', method: "Literal[''v1'', ''v2'', ''v3''] | str"
      = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Log3G10
    signature: '(y, method: "Literal[''v1'', ''v2'', ''v3''] | str" = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_Log3G12
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_Log3G12
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cctf_encoding_ROMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False)
      -> ''NDArrayReal'''
  - function-name: colour.models.cctf_decoding_ROMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False)
      -> ''NDArrayFloat'''
  - function-name: colour.models.cctf_encoding_ProPhotoRGB
    signature: (X, bit_depth=8, out_int=False)
  - function-name: colour.models.cctf_decoding_ProPhotoRGB
    signature: (X_p, bit_depth=8, in_int=False)
  - function-name: colour.models.cctf_encoding_RIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayReal'''
  - function-name: colour.models.cctf_decoding_RIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ERIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayReal'''
  - function-name: colour.models.log_decoding_ERIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayFloat'''
  - function-name: colour.models.oetf_SMPTE240M
    signature: '(L_c: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_SMPTE240M
    signature: '(V_r: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_SLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_SLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_SLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_SLog2
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_SLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_SLog3
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_inverse_sRGB
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.eotf_sRGB
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding_ViperLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_decoding_ViperLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.log_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> Union[numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.float16,
      numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.int8,
      numpy.int16, numpy.int32, numpy.int64, numpy.uint8, numpy.uint16, numpy.uint32,
      numpy.uint64]]]]'
  - function-name: colour.models.log_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.oetf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''SMPTE 240M''],
      str] = ''ITU-R BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...],
      numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.oetf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt''], str] = ''ITU-R
      BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.eotf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''SMPTE
      240M'', ''ST 2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs: Any) ->
      numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.eotf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''ST
      2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.cctf_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.cctf_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.ootf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.ootf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.XYZ_to_sRGB
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_encoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.sRGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_HSV
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.HSV_to_RGB
    signature: '(HSV: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_HSL
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.HSL_to_RGB
    signature: '(HSL: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_HCL
    signature: '(RGB: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.HCL_to_RGB
    signature: '(HCL: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_CMY
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CMY_to_RGB
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CMY_to_CMYK
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.CMYK_to_CMY
    signature: '(CMYK: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_IHLS
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.IHLS_to_RGB
    signature: '(HYS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_Prismatic
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.Prismatic_to_RGB
    signature: '(Lrgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.matrix_YCbCr
    signature: '(K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]), bits: ''int'' =
      8, is_legal: ''bool'' = False, is_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.offset_YCbCr
    signature: '(bits: ''int'' = 8, is_legal: ''bool'' = False, is_int: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_YCbCr
    signature: '(RGB: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 10, in_legal: ''bool'' = False, in_int: ''bool'' = False,
      out_bits: ''int'' = 8, out_legal: ''bool'' = True, out_int: ''bool'' = False,
      clamp_int: ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.YCbCr_to_RGB
    signature: '(YCbCr: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 8, in_legal: ''bool'' = True, in_int: ''bool'' = False, out_bits:
      ''int'' = 10, out_legal: ''bool'' = False, out_int: ''bool'' = False, clamp_int:
      ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.RGB_to_YcCbcCrc
    signature: '(RGB: ''ArrayLike'', out_bits: ''int'' = 10, out_legal: ''bool'' =
      True, out_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.YcCbcCrc_to_RGB
    signature: '(YcCbcCrc: ''ArrayLike'', in_bits: ''int'' = 10, in_legal: ''bool''
      = True, in_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_YCoCg
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.YCoCg_to_RGB
    signature: '(YCoCg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.RGB_to_ICtCp
    signature: '(RGB: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.ICtCp_to_RGB
    signature: '(ICtCp: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.XYZ_to_ICtCp
    signature: '(XYZ: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.ICtCp_to_XYZ
    signature: '(ICtCp: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.describe_video_signal_colour_primaries
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.describe_video_signal_transfer_characteristics
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.describe_video_signal_matrix_coefficients
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.cam02_ucs.JMh_CIECAM02_to_UCS_Luo2006
    signature: '(JMh: ''ArrayLike'', coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.UCS_Luo2006_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'', coefficients: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.JMh_CIECAM02_to_CAM02LCD
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02LCD_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.JMh_CIECAM02_to_CAM02SCD
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02SCD_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.JMh_CIECAM02_to_CAM02UCS
    signature: '(JMh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02UCS_to_JMh_CIECAM02
    signature: '(Jpapbp: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.XYZ_to_UCS_Luo2006
    signature: '(XYZ: ''ArrayLike'', coefficients: ''ArrayLike'', **kwargs: ''Any'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.UCS_Luo2006_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', coefficients: ''ArrayLike'', **kwargs: ''Any'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.XYZ_to_CAM02LCD
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02LCD_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.XYZ_to_CAM02SCD
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02SCD_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.XYZ_to_CAM02UCS
    signature: '(XYZ: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam02_ucs.CAM02UCS_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.cam16_ucs.JMh_CAM16_to_UCS_Li2017
    signature: (JMh, coefficients)
  - function-name: colour.models.cam16_ucs.UCS_Li2017_to_JMh_CAM16
    signature: (Jpapbp, coefficients)
  - function-name: colour.models.cam16_ucs.XYZ_to_UCS_Li2017
    signature: '(XYZ: ''ArrayLike'', coefficients: ''ArrayLike'', **kwargs: ''Any'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.cam16_ucs.UCS_Li2017_to_XYZ
    signature: '(Jpapbp: ''ArrayLike'', coefficients: ''ArrayLike'', **kwargs: ''Any'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.cie_lab.XYZ_to_Lab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_lab.Lab_to_XYZ
    signature: '(Lab: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.XYZ_to_Luv
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.Luv_to_XYZ
    signature: '(Luv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.Luv_to_uv
    signature: '(Luv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.uv_to_Luv
    signature: '(uv: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), L: ''NDArrayFloat'' = array(100)) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.Luv_uv_to_xy
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.xy_to_Luv_uv
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.XYZ_to_CIE1976UCS
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_luv.CIE1976UCS_to_XYZ
    signature: '(uvL: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.XYZ_to_UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.UCS_to_XYZ
    signature: '(UVW: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.UCS_to_uv
    signature: '(UVW: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.uv_to_UCS
    signature: '(uv: ''ArrayLike'', V: ''NDArrayFloat'' = array(1)) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.UCS_uv_to_xy
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.xy_to_UCS_uv
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.XYZ_to_CIE1960UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_ucs.CIE1960UCS_to_XYZ
    signature: '(uvV: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_uvw.XYZ_to_UVW
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_uvw.UVW_to_XYZ
    signature: '(UVW: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.XYZ_to_xyY
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.xyY_to_XYZ
    signature: '(xyY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.xy_to_xyY
    signature: '(xy: ''ArrayLike'', Y: ''NDArrayFloat'' = array(1)) -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.xyY_to_xy
    signature: '(xyY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.XYZ_to_xy
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.cie_xyy.xy_to_XYZ
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.common.Jab_to_JCh
    signature: '(Jab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.common.JCh_to_Jab
    signature: '(JCh: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.common.XYZ_to_Iab
    signature: '(XYZ: ''ArrayLike'', LMS_to_LMS_p_callable: ''Callable'', matrix_XYZ_to_LMS:
      ''ArrayLike'', matrix_LMS_p_to_Iab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.common.Iab_to_XYZ
    signature: '(Iab: ''ArrayLike'', LMS_p_to_LMS_callable: ''Callable'', matrix_Iab_to_LMS_p:
      ''ArrayLike'', matrix_LMS_to_XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.din99.Lab_to_DIN99
    signature: '(Lab: ''ArrayLike'', k_E: ''float'' = 1, k_CH: ''float'' = 1, method:
      "Literal[''ASTMD2244-07'', ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] |
      str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.din99.DIN99_to_Lab
    signature: '(Lab_99: ''ArrayLike'', k_E: ''float'' = 1, k_CH: ''float'' = 1, method:
      "Literal[''ASTMD2244-07'', ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] |
      str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.din99.XYZ_to_DIN99
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), k_E: ''float'' = 1, k_CH: ''float'' = 1, method: "Literal[''ASTMD2244-07'',
      ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] | str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.din99.DIN99_to_XYZ
    signature: '(Lab_99: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), k_E: ''float'' = 1, k_CH: ''float'' = 1, method: "Literal[''ASTMD2244-07'',
      ''DIN99'', ''DIN99b'', ''DIN99c'', ''DIN99d''] | str" = ''DIN99'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_cie_lab.exponent_hdr_CIELab
    signature: '(Y_s: ''ArrayLike'', Y_abs: ''ArrayLike'', method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_cie_lab.XYZ_to_hdr_CIELab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike'' = 100, method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_cie_lab.hdr_CIELab_to_XYZ
    signature: '(Lab_hdr: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike'' = 100, method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_ipt.exponent_hdr_IPT
    signature: '(Y_s: ''ArrayLike'', Y_abs: ''ArrayLike'', method: "Literal[''Fairchild
      2011'', ''Fairchild 2010''] | str" = ''Fairchild 2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_ipt.XYZ_to_hdr_IPT
    signature: '(XYZ: ''ArrayLike'', Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike''
      = 100, method: "Literal[''Fairchild 2011'', ''Fairchild 2010''] | str" = ''Fairchild
      2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hdr_ipt.hdr_IPT_to_XYZ
    signature: '(IPT_hdr: ''ArrayLike'', Y_s: ''ArrayLike'' = 0.2, Y_abs: ''ArrayLike''
      = 100, method: "Literal[''Fairchild 2011'', ''Fairchild 2010''] | str" = ''Fairchild
      2011'') -> ''NDArrayFloat'''
  - function-name: colour.models.hunter_lab.XYZ_to_K_ab_HunterLab1966
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.hunter_lab.XYZ_to_Hunter_Lab
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.hunter_lab.Hunter_Lab_to_XYZ
    signature: '(Lab: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.hunter_rdab.XYZ_to_Hunter_Rdab
    signature: '(XYZ: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.hunter_rdab.Hunter_Rdab_to_XYZ
    signature: '(R_d_ab: ''ArrayLike'', XYZ_n: ''ArrayLike'' = array([  95.02,  100.  ,  108.82]),
      K_ab: ''ArrayLike'' = array([ 172.3,   67.2])) -> ''NDArrayFloat'''
  - function-name: colour.models.icacb.XYZ_to_ICaCb
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.icacb.ICaCb_to_XYZ
    signature: '(ICaCb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.igpgtg.XYZ_to_IgPgTg
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.igpgtg.IgPgTg_to_XYZ
    signature: '(IgPgTg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ipt.XYZ_to_IPT
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ipt.IPT_to_XYZ
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ipt.IPT_hue_angle
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.jzazbz.XYZ_to_Izazbz
    signature: '(XYZ_D65: ''ArrayLike'', constants: ''Structure | None'' = None, method:
      "Literal[''Safdar 2017'', ''Safdar 2021'', ''ZCAM''] | str" = ''Safdar 2017'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.jzazbz.Izazbz_to_XYZ
    signature: '(Izazbz: ''ArrayLike'', constants: ''Structure | None'' = None, method:
      "Literal[''Safdar 2017'', ''Safdar 2021'', ''ZCAM''] | str" = ''Safdar 2017'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.jzazbz.XYZ_to_Jzazbz
    signature: '(XYZ_D65: ''ArrayLike'', constants: ''Structure'' = {''b'': 1.15,
      ''g'': 0.66, ''d'': -0.56, ''d_0'': 1.6295499532821565e-11, ''m_1'': 0.1593017578125,
      ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'': 18.8515625, ''c_3'':
      18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.jzazbz.Jzazbz_to_XYZ
    signature: '(Jzazbz: ''ArrayLike'', constants: ''Structure'' = {''b'': 1.15, ''g'':
      0.66, ''d'': -0.56, ''d_0'': 1.6295499532821565e-11, ''m_1'': 0.1593017578125,
      ''m_2'': 134.03437499999998, ''c_1'': 0.8359375, ''c_2'': 18.8515625, ''c_3'':
      18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.oklab.XYZ_to_Oklab
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.oklab.Oklab_to_XYZ
    signature: '(Lab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.osa_ucs.XYZ_to_OSA_UCS
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.osa_ucs.OSA_UCS_to_XYZ
    signature: '(Ljg: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.models.prolab.ProLab_to_XYZ
    signature: '(ProLab: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.prolab.XYZ_to_ProLab
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ])) -> ''NDArrayFloat'''
  - function-name: colour.models.ragoo2021.XYZ_to_IPT_Ragoo2021
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.ragoo2021.IPT_Ragoo2021_to_XYZ
    signature: '(IPT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.normalised_primary_matrix
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.chromatically_adapted_primaries
    signature: '(primaries: ''ArrayLike'', whitepoint_t: ''ArrayLike'', whitepoint_r:
      ''ArrayLike'', chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.primaries_whitepoint
    signature: '(npm: ''ArrayLike'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.models.rgb.RGB_luminance_equation
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''str'''
  - function-name: colour.models.rgb.RGB_luminance
    signature: '(RGB: ''ArrayLike'', primaries: ''ArrayLike'', whitepoint: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.XYZ_to_RGB
    signature: '(XYZ: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_encoding:
      ''bool'' = False, *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_decoding:
      ''bool'' = False, *args, **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.matrix_RGB_to_RGB
    signature: '(input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'', chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_RGB
    signature: '(RGB: ''ArrayLike'', input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform | str
      | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = False, apply_cctf_encoding:
      ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.CV_range
    signature: '(bit_depth: ''int'' = 10, is_legal: ''bool'' = False, is_int: ''bool''
      = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.legal_to_full
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.full_to_legal
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.gamma_function
    signature: '(a: ''ArrayLike'', exponent: ''ArrayLike'' = 1, negative_number_handling:
      "Literal[''Clamp'', ''Indeterminate'', ''Mirror'', ''Preserve''] | str" = ''Indeterminate'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ACESproxy
    signature: '(lin_AP1: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, out_int:
      ''bool'' = False, constants: ''dict'' = {10: {''CV_min'': 64, ''CV_max'': 940,
      ''steps_per_stop'': 50, ''mid_CV_offset'': 425, ''mid_log_offset'': 2.5}, 12:
      {''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'': 200, ''mid_CV_offset'':
      1700, ''mid_log_offset'': 2.5}}) -> ''NDArrayFloat | NDArrayInt'''
  - function-name: colour.models.rgb.log_decoding_ACESproxy
    signature: '(ACESproxy: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, in_int:
      ''bool'' = False, constants: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ACEScc
    signature: '(lin_AP1: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_ACEScc
    signature: '(ACEScc: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ACEScct
    signature: '(lin_AP1: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_ACEScct
    signature: '(ACEScct: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_AppleLogProfile
    signature: '(R: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_AppleLogProfile
    signature: '(P: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_ARIBSTDB67
    signature: '(E: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_ARIBSTDB67
    signature: '(E_p: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ARRILogC3
    signature: '(x: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_ARRILogC3
    signature: '(t: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ARRILogC4
    signature: '(E_scene: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_ARRILogC4
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BlackmagicFilmGeneration5
    signature: '(x: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BlackmagicFilmGeneration5
    signature: '(y: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_CanonLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_CanonLog
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_CanonLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_CanonLog2
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_CanonLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_CanonLog3
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Cineon
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Cineon
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_DaVinciIntermediate
    signature: '(L: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_DaVinciIntermediate
    signature: '(V: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_DCDM
    signature: '(XYZ: ''ArrayLike'', out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.eotf_DCDM
    signature: '(XYZ_p: ''ArrayLike'', in_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_DICOMGSDF
    signature: '(L: ''ArrayLike'', out_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.eotf_DICOMGSDF
    signature: '(J: ''ArrayLike'', in_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_DJIDLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_DJIDLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.exponent_function_basic
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, style: "Literal[''basicFwd'',
      ''basicRev'', ''basicMirrorFwd'', ''basicMirrorRev'', ''basicPassThruFwd'',
      ''basicPassThruRev''] | str" = ''basicFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.exponent_function_monitor_curve
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, offset: ''ArrayLike''
      = 0, style: "Literal[''monCurveFwd'', ''monCurveRev'', ''monCurveMirrorFwd'',
      ''monCurveMirrorRev''] | str" = ''monCurveFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_FilmicPro6
    signature: '(t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_FilmicPro6
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_FilmLightTLog
    signature: '(x: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_FilmLightTLog
    signature: '(t: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Protune
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Protune
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT2020
    signature: '(E: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BT2020
    signature: '(E_p: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT601
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BT601
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT709
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BT709
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT1361
    signature: (L)
  - function-name: colour.models.rgb.oetf_inverse_BT1361
    signature: (E_p)
  - function-name: colour.models.rgb.eotf_inverse_BT1886
    signature: '(L: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_BT1886
    signature: '(V: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_ST2084
    signature: '(C: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_ST2084
    signature: '(N: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ootf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ootf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_BT2100_HLG
    signature: '(E: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_inverse_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ootf_BT2100_HLG
    signature: '(E: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ootf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_H273_Log
    signature: (L_c)
  - function-name: colour.models.rgb.oetf_inverse_H273_Log
    signature: (V)
  - function-name: colour.models.rgb.oetf_H273_LogSqrt
    signature: (L_c)
  - function-name: colour.models.rgb.oetf_inverse_H273_LogSqrt
    signature: (V)
  - function-name: colour.models.rgb.oetf_H273_IEC61966_2
    signature: (L_c)
  - function-name: colour.models.rgb.oetf_inverse_H273_IEC61966_2
    signature: (V)
  - function-name: colour.models.rgb.eotf_H273_ST428_1
    signature: (V)
  - function-name: colour.models.rgb.eotf_inverse_H273_ST428_1
    signature: (L_o)
  - function-name: colour.models.rgb.linear_function
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.logarithmic_function_basic
    signature: '(x: ''ArrayLike'', style: "Literal[''log10'', ''antiLog10'', ''log2'',
      ''antiLog2'', ''logB'', ''antiLogB''] | str" = ''log2'', base: ''int'' = 2)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.logarithmic_function_quasilog
    signature: '(x: ''ArrayLike'', style: "Literal[''linToLog'', ''logToLin''] | str"
      = ''linToLog'', base: ''int'' = 2, log_side_slope: ''float'' = 1, lin_side_slope:
      ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset: ''float'' =
      0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.logarithmic_function_camera
    signature: '(x: ''ArrayLike'', style: "Literal[''cameraLinToLog'', ''cameraLogToLin'']
      | str" = ''cameraLinToLog'', base: ''int'' = 2, log_side_slope: ''float'' =
      1, lin_side_slope: ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset:
      ''float'' = 0, lin_side_break: ''float'' = 0.005, linear_slope: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Log2
    signature: '(lin: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Log2
    signature: '(log_norm: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Panalog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Panalog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_VLog
    signature: '(L_in: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_VLog
    signature: '(V_out: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_FLog
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_FLog
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_FLog2
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_FLog2
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_LLog
    signature: '(LSR: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_LLog
    signature: '(LLog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_NLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_NLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_PivotedLog
    signature: '(x: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_PivotedLog
    signature: '(y: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_REDLog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_REDLog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_REDLogFilm
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_REDLogFilm
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Log3G10
    signature: '(x: ''ArrayLike'', method: "Literal[''v1'', ''v2'', ''v3''] | str"
      = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Log3G10
    signature: '(y, method: "Literal[''v1'', ''v2'', ''v3''] | str" = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_Log3G12
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_Log3G12
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cctf_encoding_ROMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False)
      -> ''NDArrayReal'''
  - function-name: colour.models.rgb.cctf_decoding_ROMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cctf_encoding_ProPhotoRGB
    signature: (X, bit_depth=8, out_int=False)
  - function-name: colour.models.rgb.cctf_decoding_ProPhotoRGB
    signature: (X_p, bit_depth=8, in_int=False)
  - function-name: colour.models.rgb.cctf_encoding_RIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.cctf_decoding_RIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ERIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.log_decoding_ERIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.oetf_SMPTE240M
    signature: '(L_c: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_SMPTE240M
    signature: '(V_r: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_SLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_SLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_SLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_SLog2
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_SLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_SLog3
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_inverse_sRGB
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.eotf_sRGB
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding_ViperLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_decoding_ViperLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.log_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> Union[numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.float16,
      numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.int8,
      numpy.int16, numpy.int32, numpy.int64, numpy.uint8, numpy.uint16, numpy.uint32,
      numpy.uint64]]]]'
  - function-name: colour.models.rgb.log_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.oetf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''SMPTE 240M''],
      str] = ''ITU-R BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...],
      numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.oetf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt''], str] = ''ITU-R
      BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.eotf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''SMPTE
      240M'', ''ST 2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs: Any) ->
      numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.eotf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''ST
      2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.rgb.cctf_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.rgb.cctf_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.ootf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.ootf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.XYZ_to_sRGB
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_encoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.sRGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_HSV
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.HSV_to_RGB
    signature: '(HSV: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_HSL
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.HSL_to_RGB
    signature: '(HSL: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_HCL
    signature: '(RGB: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.HCL_to_RGB
    signature: '(HCL: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_CMY
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.CMY_to_RGB
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.CMY_to_CMYK
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.CMYK_to_CMY
    signature: '(CMYK: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_IHLS
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.IHLS_to_RGB
    signature: '(HYS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_Prismatic
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.Prismatic_to_RGB
    signature: '(Lrgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.matrix_YCbCr
    signature: '(K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]), bits: ''int'' =
      8, is_legal: ''bool'' = False, is_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.offset_YCbCr
    signature: '(bits: ''int'' = 8, is_legal: ''bool'' = False, is_int: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_YCbCr
    signature: '(RGB: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 10, in_legal: ''bool'' = False, in_int: ''bool'' = False,
      out_bits: ''int'' = 8, out_legal: ''bool'' = True, out_int: ''bool'' = False,
      clamp_int: ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.YCbCr_to_RGB
    signature: '(YCbCr: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 8, in_legal: ''bool'' = True, in_int: ''bool'' = False, out_bits:
      ''int'' = 10, out_legal: ''bool'' = False, out_int: ''bool'' = False, clamp_int:
      ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.RGB_to_YcCbcCrc
    signature: '(RGB: ''ArrayLike'', out_bits: ''int'' = 10, out_legal: ''bool'' =
      True, out_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.YcCbcCrc_to_RGB
    signature: '(YcCbcCrc: ''ArrayLike'', in_bits: ''int'' = 10, in_legal: ''bool''
      = True, in_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_YCoCg
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.YCoCg_to_RGB
    signature: '(YCoCg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.RGB_to_ICtCp
    signature: '(RGB: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ICtCp_to_RGB
    signature: '(ICtCp: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.XYZ_to_ICtCp
    signature: '(XYZ: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.ICtCp_to_XYZ
    signature: '(ICtCp: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.describe_video_signal_colour_primaries
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.describe_video_signal_transfer_characteristics
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.describe_video_signal_matrix_coefficients
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.cmyk.RGB_to_CMY
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cmyk.CMY_to_RGB
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cmyk.CMY_to_CMYK
    signature: '(CMY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cmyk.CMYK_to_CMY
    signature: '(CMYK: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.common.XYZ_to_sRGB
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_encoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.common.sRGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.RGB_to_HSV
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.HSV_to_RGB
    signature: '(HSV: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.RGB_to_HSL
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.HSL_to_RGB
    signature: '(HSL: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.RGB_to_HCL
    signature: '(RGB: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.cylindrical.HCL_to_RGB
    signature: '(HCL: ''ArrayLike'', gamma: ''float'' = 3, Y_0: ''float'' = 100) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.derivation.xy_to_z
    signature: '(xy: ''ArrayLike'') -> ''float'''
  - function-name: colour.models.rgb.derivation.normalised_primary_matrix
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.derivation.chromatically_adapted_primaries
    signature: '(primaries: ''ArrayLike'', whitepoint_t: ''ArrayLike'', whitepoint_r:
      ''ArrayLike'', chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform
      | str'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.derivation.primaries_whitepoint
    signature: '(npm: ''ArrayLike'') -> ''Tuple[NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.models.rgb.derivation.RGB_luminance_equation
    signature: '(primaries: ''ArrayLike'', whitepoint: ''ArrayLike'') -> ''str'''
  - function-name: colour.models.rgb.derivation.RGB_luminance
    signature: '(RGB: ''ArrayLike'', primaries: ''ArrayLike'', whitepoint: ''ArrayLike'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.hanbury2003.RGB_to_IHLS
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.hanbury2003.IHLS_to_RGB
    signature: '(HYS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ictcp.RGB_to_ICtCp
    signature: '(RGB: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ictcp.ICtCp_to_RGB
    signature: '(ICtCp: ''ArrayLike'', method: "Literal[''Dolby 2016'', ''ITU-R BT.2100-1
      HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'', ''ITU-R BT.2100-2 PQ'']
      | str" = ''Dolby 2016'', L_p: ''float'' = 10000) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ictcp.XYZ_to_ICtCp
    signature: '(XYZ: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.ictcp.ICtCp_to_XYZ
    signature: '(ICtCp: ''ArrayLike'', illuminant=array([ 0.3127,  0.329 ]), chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', method: "Literal[''Dolby
      2016'', ''ITU-R BT.2100-1 HLG'', ''ITU-R BT.2100-1 PQ'', ''ITU-R BT.2100-2 HLG'',
      ''ITU-R BT.2100-2 PQ''] | str" = ''Dolby 2016'', L_p: ''float'' = 10000) ->
      ''NDArrayFloat'''
  - function-name: colour.models.rgb.itut_h_273.describe_video_signal_colour_primaries
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.itut_h_273.describe_video_signal_transfer_characteristics
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.itut_h_273.describe_video_signal_matrix_coefficients
    signature: '(code_point: int, print_description: bool = True, **kwargs) -> str'
  - function-name: colour.models.rgb.prismatic.RGB_to_Prismatic
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.prismatic.Prismatic_to_RGB
    signature: '(Lrgb: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.rgb_colourspace.XYZ_to_RGB
    signature: '(XYZ: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_encoding:
      ''bool'' = False, *args: ''Any'', **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.rgb_colourspace.RGB_to_XYZ
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', illuminant: ''ArrayLike | None'' = None, chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'', apply_cctf_decoding:
      ''bool'' = False, *args, **kwargs) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.rgb_colourspace.matrix_RGB_to_RGB
    signature: '(input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'', chromatic_adaptation_transform:
      ''LiteralChromaticAdaptationTransform | str | None'' = ''CAT02'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.rgb_colourspace.RGB_to_RGB
    signature: '(RGB: ''ArrayLike'', input_colourspace: ''RGB_Colourspace | LiteralRGBColourspace
      | str'', output_colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str'',
      chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform | str
      | None'' = ''CAT02'', apply_cctf_decoding: ''bool'' = False, apply_cctf_encoding:
      ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.CV_range
    signature: '(bit_depth: ''int'' = 10, is_legal: ''bool'' = False, is_int: ''bool''
      = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.legal_to_full
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.full_to_legal
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.gamma_function
    signature: '(a: ''ArrayLike'', exponent: ''ArrayLike'' = 1, negative_number_handling:
      "Literal[''Clamp'', ''Indeterminate'', ''Mirror'', ''Preserve''] | str" = ''Indeterminate'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ACESproxy
    signature: '(lin_AP1: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, out_int:
      ''bool'' = False, constants: ''dict'' = {10: {''CV_min'': 64, ''CV_max'': 940,
      ''steps_per_stop'': 50, ''mid_CV_offset'': 425, ''mid_log_offset'': 2.5}, 12:
      {''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'': 200, ''mid_CV_offset'':
      1700, ''mid_log_offset'': 2.5}}) -> ''NDArrayFloat | NDArrayInt'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ACESproxy
    signature: '(ACESproxy: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, in_int:
      ''bool'' = False, constants: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ACEScc
    signature: '(lin_AP1: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ACEScc
    signature: '(ACEScc: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ACEScct
    signature: '(lin_AP1: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ACEScct
    signature: '(ACEScct: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_AppleLogProfile
    signature: '(R: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_AppleLogProfile
    signature: '(P: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_ARIBSTDB67
    signature: '(E: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_ARIBSTDB67
    signature: '(E_p: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ARRILogC3
    signature: '(x: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ARRILogC3
    signature: '(t: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ARRILogC4
    signature: '(E_scene: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ARRILogC4
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BlackmagicFilmGeneration5
    signature: '(x: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BlackmagicFilmGeneration5
    signature: '(y: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_CanonLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_CanonLog
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_CanonLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_CanonLog2
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_CanonLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_CanonLog3
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Cineon
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Cineon
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_DaVinciIntermediate
    signature: '(L: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_DaVinciIntermediate
    signature: '(V: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_DCDM
    signature: '(XYZ: ''ArrayLike'', out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.eotf_DCDM
    signature: '(XYZ_p: ''ArrayLike'', in_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_DICOMGSDF
    signature: '(L: ''ArrayLike'', out_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.eotf_DICOMGSDF
    signature: '(J: ''ArrayLike'', in_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_DJIDLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_DJIDLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.exponent_function_basic
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, style: "Literal[''basicFwd'',
      ''basicRev'', ''basicMirrorFwd'', ''basicMirrorRev'', ''basicPassThruFwd'',
      ''basicPassThruRev''] | str" = ''basicFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.exponent_function_monitor_curve
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, offset: ''ArrayLike''
      = 0, style: "Literal[''monCurveFwd'', ''monCurveRev'', ''monCurveMirrorFwd'',
      ''monCurveMirrorRev''] | str" = ''monCurveFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_FilmicPro6
    signature: '(t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_FilmicPro6
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_FilmLightTLog
    signature: '(x: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_FilmLightTLog
    signature: '(t: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Protune
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Protune
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT601
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT601
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT709
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT709
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT1361
    signature: (L)
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT1361
    signature: (E_p)
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_BT1886
    signature: '(L: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_BT1886
    signature: '(V: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT2020
    signature: '(E: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT2020
    signature: '(E_p: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_ST2084
    signature: '(C: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_ST2084
    signature: '(N: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.ootf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.ootf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_BT2100_HLG
    signature: '(E: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.ootf_BT2100_HLG
    signature: '(E: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.ootf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_LLog
    signature: '(LSR: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_LLog
    signature: '(LLog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.linear_function
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.logarithmic_function_basic
    signature: '(x: ''ArrayLike'', style: "Literal[''log10'', ''antiLog10'', ''log2'',
      ''antiLog2'', ''logB'', ''antiLogB''] | str" = ''log2'', base: ''int'' = 2)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.logarithmic_function_quasilog
    signature: '(x: ''ArrayLike'', style: "Literal[''linToLog'', ''logToLin''] | str"
      = ''linToLog'', base: ''int'' = 2, log_side_slope: ''float'' = 1, lin_side_slope:
      ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset: ''float'' =
      0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.logarithmic_function_camera
    signature: '(x: ''ArrayLike'', style: "Literal[''cameraLinToLog'', ''cameraLogToLin'']
      | str" = ''cameraLinToLog'', base: ''int'' = 2, log_side_slope: ''float'' =
      1, lin_side_slope: ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset:
      ''float'' = 0, lin_side_break: ''float'' = 0.005, linear_slope: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Log2
    signature: '(lin: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Log2
    signature: '(log_norm: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Panalog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Panalog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_VLog
    signature: '(L_in: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_VLog
    signature: '(V_out: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_FLog
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_FLog
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_FLog2
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_FLog2
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_NLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_NLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_PivotedLog
    signature: '(x: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_PivotedLog
    signature: '(y: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_REDLog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_REDLog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_REDLogFilm
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_REDLogFilm
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Log3G10
    signature: '(x: ''ArrayLike'', method: "Literal[''v1'', ''v2'', ''v3''] | str"
      = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Log3G10
    signature: '(y, method: "Literal[''v1'', ''v2'', ''v3''] | str" = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_Log3G12
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_Log3G12
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.cctf_encoding_ROMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False)
      -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.cctf_decoding_ROMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.cctf_encoding_ProPhotoRGB
    signature: (X, bit_depth=8, out_int=False)
  - function-name: colour.models.rgb.transfer_functions.cctf_decoding_ProPhotoRGB
    signature: (X_p, bit_depth=8, in_int=False)
  - function-name: colour.models.rgb.transfer_functions.cctf_encoding_RIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.cctf_decoding_RIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ERIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ERIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_SMPTE240M
    signature: '(L_c: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_SMPTE240M
    signature: '(V_r: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_SLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_SLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_SLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_SLog2
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_SLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_SLog3
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_sRGB
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.eotf_sRGB
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_encoding_ViperLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log_decoding_ViperLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.oetf_H273_Log
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_H273_Log
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.oetf_H273_LogSqrt
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_H273_LogSqrt
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.oetf_H273_IEC61966_2
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse_H273_IEC61966_2
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse_H273_ST428_1
    signature: (L_o)
  - function-name: colour.models.rgb.transfer_functions.eotf_H273_ST428_1
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.log_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> Union[numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.float16,
      numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any, ...], numpy.dtype[Union[numpy.int8,
      numpy.int16, numpy.int32, numpy.int64, numpy.uint8, numpy.uint16, numpy.uint32,
      numpy.uint64]]]]'
  - function-name: colour.models.rgb.transfer_functions.log_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Canon Log'', ''Canon
      Log 2'', ''Canon Log 3'', ''Cineon'', ''D-Log'', ''ERIMM RGB'', ''F-Log'', ''F-Log2'',
      ''Filmic Pro 6'', ''L-Log'', ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'',
      ''PLog'', ''Panalog'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''S-Log'', ''S-Log2'',
      ''S-Log3'', ''T-Log'', ''V-Log'', ''ViperLog''], str] = ''Cineon'', **kwargs:
      Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.oetf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''SMPTE 240M''],
      str] = ''ITU-R BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...],
      numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.oetf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ARIB STD-B67'', ''Blackmagic Film
      Generation 5'', ''DaVinci Intermediate'', ''ITU-R BT.2020'', ''ITU-R BT.2100
      HLG'', ''ITU-R BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273
      IEC 61966-2'', ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt''], str] = ''ITU-R
      BT.709'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.eotf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''SMPTE
      240M'', ''ST 2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs: Any) ->
      numpy.ndarray[tuple[typing.Any, ...], numpy.dtype[typing.Union[numpy.float16,
      numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.eotf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''DCDM'', ''DICOM GSDF'', ''ITU-R BT.1886'',
      ''ITU-R BT.2100 HLG'', ''ITU-R BT.2100 PQ'', ''ITU-T H.273 ST.428-1'', ''ST
      2084'', ''sRGB''], str] = ''ITU-R BT.1886'', **kwargs) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.rgb.transfer_functions.cctf_encoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> Union[numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.float16, numpy.float32, numpy.float64]]], numpy.ndarray[tuple[Any,
      ...], numpy.dtype[Union[numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint8,
      numpy.uint16, numpy.uint32, numpy.uint64]]]]'
  - function-name: colour.models.rgb.transfer_functions.cctf_decoding
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ACEScc'', ''ACEScct'', ''ACESproxy'',
      ''ARIB STD-B67'', ''ARRI LogC3'', ''ARRI LogC4'', ''Apple Log Profile'', ''Blackmagic
      Film Generation 5'', ''Canon Log'', ''Canon Log 2'', ''Canon Log 3'', ''Cineon'',
      ''D-Log'', ''DCDM'', ''DICOM GSDF'', ''DaVinci Intermediate'', ''ERIMM RGB'',
      ''F-Log'', ''F-Log2'', ''Filmic Pro 6'', ''Gamma 2.2'', ''Gamma 2.4'', ''Gamma
      2.6'', ''ITU-R BT.1886'', ''ITU-R BT.2020'', ''ITU-R BT.2100 HLG'', ''ITU-R
      BT.2100 PQ'', ''ITU-R BT.601'', ''ITU-R BT.709'', ''ITU-T H.273 IEC 61966-2'',
      ''ITU-T H.273 Log'', ''ITU-T H.273 Log Sqrt'', ''ITU-T H.273 ST.428-1'', ''L-Log'',
      ''Log2'', ''Log3G10'', ''Log3G12'', ''N-Log'', ''PLog'', ''Panalog'', ''ProPhoto
      RGB'', ''Protune'', ''REDLog'', ''REDLogFilm'', ''RIMM RGB'', ''ROMM RGB'',
      ''S-Log'', ''S-Log2'', ''S-Log3'', ''SMPTE 240M'', ''ST 2084'', ''T-Log'', ''V-Log'',
      ''ViperLog'', ''sRGB''], str] = ''sRGB'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.ootf
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.ootf_inverse
    signature: '(value: Union[collections.abc.Buffer, numpy._typing._array_like._SupportsArray[numpy.dtype[Any]],
      numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]],
      complex, bytes, str, numpy._typing._nested_sequence._NestedSequence[complex
      | bytes | str]], function: Union[Literal[''ITU-R BT.2100 HLG'', ''ITU-R BT.2100
      PQ''], str] = ''ITU-R BT.2100 PQ'', **kwargs: Any) -> numpy.ndarray[tuple[typing.Any,
      ...], numpy.dtype[typing.Union[numpy.float16, numpy.float32, numpy.float64]]]'
  - function-name: colour.models.rgb.transfer_functions.aces.log_encoding_ACESproxy
    signature: '(lin_AP1: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, out_int:
      ''bool'' = False, constants: ''dict'' = {10: {''CV_min'': 64, ''CV_max'': 940,
      ''steps_per_stop'': 50, ''mid_CV_offset'': 425, ''mid_log_offset'': 2.5}, 12:
      {''CV_min'': 256, ''CV_max'': 3760, ''steps_per_stop'': 200, ''mid_CV_offset'':
      1700, ''mid_log_offset'': 2.5}}) -> ''NDArrayFloat | NDArrayInt'''
  - function-name: colour.models.rgb.transfer_functions.aces.log_decoding_ACESproxy
    signature: '(ACESproxy: ''ArrayLike'', bit_depth: ''Literal[10, 12]'' = 10, in_int:
      ''bool'' = False, constants: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.aces.log_encoding_ACEScc
    signature: '(lin_AP1: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.aces.log_decoding_ACEScc
    signature: '(ACEScc: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.aces.log_encoding_ACEScct
    signature: '(lin_AP1: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.aces.log_decoding_ACEScct
    signature: '(ACEScct: ''ArrayLike'', constants: ''Structure'' = {''X_BRK'': 0.0078125,
      ''Y_BRK'': 0.155251141552511, ''A'': 10.5402377416545, ''B'': 0.0729055341958355})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.apple_log_profile.log_encoding_AppleLogProfile
    signature: '(R: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.apple_log_profile.log_decoding_AppleLogProfile
    signature: '(P: ''ArrayLike'', constants: ''Structure'' = {''R_0'': -0.05641088,
      ''R_t'': 0.01, ''sigma'': 47.28711236, ''beta'': 0.00964052, ''gamma'': 0.08550479,
      ''delta'': 0.69336945}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arib_std_b67.oetf_ARIBSTDB67
    signature: '(E: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arib_std_b67.oetf_inverse_ARIBSTDB67
    signature: '(E_p: ''ArrayLike'', r: ''ArrayLike'' = 0.5, constants: ''Structure''
      = {''a'': 0.17883277, ''b'': 0.28466892, ''c'': 0.55991073}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arri.log_encoding_ARRILogC3
    signature: '(x: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arri.log_decoding_ARRILogC3
    signature: '(t: ''ArrayLike'', firmware: "Literal[''SUP 2.x'', ''SUP 3.x''] |
      str" = ''SUP 3.x'', method: "Literal[''Linear Scene Exposure Factor'', ''Normalised
      Sensor Signal''] | str" = ''Linear Scene Exposure Factor'', EI: ''Literal[160,
      200, 250, 320, 400, 500, 640, 800, 1000, 1280, 1600]'' = 800) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arri.log_encoding_ARRILogC4
    signature: '(E_scene: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.arri.log_decoding_ARRILogC4
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 2231.8263090676883,
      ''b'': 0.9071358748778103, ''c'': 0.09286412512218964, ''s'': 0.1135972086105891,
      ''t'': -0.01805699611991131}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.blackmagic_design.oetf_BlackmagicFilmGeneration5
    signature: '(x: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.blackmagic_design.oetf_inverse_BlackmagicFilmGeneration5
    signature: '(y: ''ArrayLike'', constants: ''Structure'' = {''A'': 0.08692876065491224,
      ''B'': 0.005494072432257808, ''C'': 0.5300133392291939, ''D'': 8.283605932402494,
      ''E'': 0.09246575342465753, ''LIN_CUT'': 0.005}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog_v1
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog_v1
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog_v1_2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog_v1_2
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog
    signature: '(clog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog2_v1
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog2_v1
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog2_v1_2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog2_v1_2
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog2
    signature: '(clog2: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog3_v1
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog3_v1
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog3_v1_2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog3_v1_2
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_encoding_CanonLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.canon.log_decoding_CanonLog3
    signature: '(clog3: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, method: "Literal[''v1'', ''v1.2'']
      | str" = ''v1.2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.cineon.log_encoding_Cineon
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.cineon.log_decoding_Cineon
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.common.CV_range
    signature: '(bit_depth: ''int'' = 10, is_legal: ''bool'' = False, is_int: ''bool''
      = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.common.legal_to_full
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.common.full_to_legal
    signature: '(CV: ''ArrayLike'', bit_depth: ''int'' = 10, in_int: ''bool'' = False,
      out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.davinci_intermediate.oetf_DaVinciIntermediate
    signature: '(L: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.davinci_intermediate.oetf_inverse_DaVinciIntermediate
    signature: '(V: ''ArrayLike'', constants: ''Structure'' = {''DI_A'': 0.0075, ''DI_B'':
      7.0, ''DI_C'': 0.07329248, ''DI_M'': 10.44426855, ''DI_LIN_CUT'': 0.00262409,
      ''DI_LOG_CUT'': 0.02740668}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.dcdm.eotf_inverse_DCDM
    signature: '(XYZ: ''ArrayLike'', out_int: ''bool'' = False) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.dcdm.eotf_DCDM
    signature: '(XYZ_p: ''ArrayLike'', in_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.dicom_gsdf.eotf_inverse_DICOMGSDF
    signature: '(L: ''ArrayLike'', out_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.dicom_gsdf.eotf_DICOMGSDF
    signature: '(J: ''ArrayLike'', in_int: ''bool'' = False, constants: ''Structure''
      = {''a'': -1.3011877, ''b'': -0.025840191, ''c'': 0.080242636, ''d'': -0.10320229,
      ''e'': 0.13646699, ''f'': 0.02874562, ''g'': -0.025468404, ''h'': -0.0031978977,
      ''k'': 0.00012992634, ''m'': 0.0013635334, ''A'': 71.498068, ''B'': 94.593053,
      ''C'': 41.912053, ''D'': 9.8247004, ''E'': 0.28175407, ''F'': -1.1878455, ''G'':
      -0.18014349, ''H'': 0.14710899, ''I'': -0.017046845}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.dji_d_log.log_encoding_DJIDLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.dji_d_log.log_decoding_DJIDLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.exponent.exponent_function_basic
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, style: "Literal[''basicFwd'',
      ''basicRev'', ''basicMirrorFwd'', ''basicMirrorRev'', ''basicPassThruFwd'',
      ''basicPassThruRev''] | str" = ''basicFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.exponent.exponent_function_monitor_curve
    signature: '(x: ''ArrayLike'', exponent: ''ArrayLike'' = 1, offset: ''ArrayLike''
      = 0, style: "Literal[''monCurveFwd'', ''monCurveRev'', ''monCurveMirrorFwd'',
      ''monCurveMirrorRev''] | str" = ''monCurveFwd'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.filmic_pro.log_encoding_FilmicPro6
    signature: '(t: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.filmic_pro.log_decoding_FilmicPro6
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.filmlight_t_log.log_encoding_FilmLightTLog
    signature: '(x: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.filmlight_t_log.log_decoding_FilmLightTLog
    signature: '(t: ''ArrayLike'', w: ''float'' = 128.0, g: ''float'' = 16.0, o: ''float''
      = 0.075) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.fujifilm_f_log.log_encoding_FLog
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.fujifilm_f_log.log_decoding_FLog
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.00089, ''cut2'': 0.100537775223865, ''a'': 0.555556, ''b'': 0.009468,
      ''c'': 0.344676, ''d'': 0.790453, ''e'': 8.735631, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.fujifilm_f_log.log_encoding_FLog2
    signature: '(in_r: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.fujifilm_f_log.log_decoding_FLog2
    signature: '(out_r: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.000889, ''cut2'': 0.100686685370811, ''a'': 5.555556, ''b'': 0.064829,
      ''c'': 0.245281, ''d'': 0.384316, ''e'': 8.799461, ''f'': 0.092864}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.gamma.gamma_function
    signature: '(a: ''ArrayLike'', exponent: ''ArrayLike'' = 1, negative_number_handling:
      "Literal[''Clamp'', ''Indeterminate'', ''Mirror'', ''Preserve''] | str" = ''Indeterminate'')
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.gopro.log_encoding_Protune
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.gopro.log_decoding_Protune
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_1361.oetf_BT1361
    signature: (L)
  - function-name: colour.models.rgb.transfer_functions.itur_bt_1361.oetf_inverse_BT1361
    signature: (E_p)
  - function-name: colour.models.rgb.transfer_functions.itur_bt_1886.eotf_inverse_BT1886
    signature: '(L: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_1886.eotf_BT1886
    signature: '(V: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2020.oetf_BT2020
    signature: '(E: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2020.oetf_inverse_BT2020
    signature: '(E_p: ''ArrayLike'', is_12_bits_system: ''bool'' = False, constants:
      ''Structure'' = {''alpha'': <function <lambda> at 0x7b934bad1940>, ''beta'':
      <function <lambda> at 0x7b934bad19e0>}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.oetf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.oetf_inverse_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_BT2100_PQ
    signature: '(E_p: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_BT2100_PQ
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_inverse_BT2100_PQ
    signature: '(F_D: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.gamma_function_BT2100_HLG
    signature: '(L_W: ''float'' = 1000) -> ''float'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.oetf_BT2100_HLG
    signature: '(E: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.oetf_inverse_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', constants: ''Structure'' = {''a'': 0.17883277,
      ''b'': 0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.black_level_lift_BT2100_HLG
    signature: '(L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma: ''float | None''
      = None) -> ''float'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_BT2100_HLG_1
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_BT2100_HLG_2
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_BT2100_HLG
    signature: '(E_p: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_inverse_BT2100_HLG_1
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_inverse_BT2100_HLG_2
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.eotf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, constants: ''Structure'' = {''a'': 0.17883277, ''b'':
      0.28466892, ''c'': 0.559910729529562}, method: "Literal[''ITU-R BT.2100-1'',
      ''ITU-R BT.2100-2''] | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_BT2100_HLG_1
    signature: '(E: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_BT2100_HLG_2
    signature: '(E: ''ArrayLike'', L_W: ''float'' = 1000, gamma: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_BT2100_HLG
    signature: '(E: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_inverse_BT2100_HLG_1
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_inverse_BT2100_HLG_2
    signature: '(F_D: ''ArrayLike'', L_W: ''float'' = 1000, gamma: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_2100.ootf_inverse_BT2100_HLG
    signature: '(F_D: ''ArrayLike'', L_B: ''float'' = 0, L_W: ''float'' = 1000, gamma:
      ''float | None'' = None, method: "Literal[''ITU-R BT.2100-1'', ''ITU-R BT.2100-2'']
      | str" = ''ITU-R BT.2100-2'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_601.oetf_BT601
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_601.oetf_inverse_BT601
    signature: '(E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_709.oetf_BT709
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itur_bt_709.oetf_inverse_BT709
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_H273_Log
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_inverse_H273_Log
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_H273_LogSqrt
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_inverse_H273_LogSqrt
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_H273_IEC61966_2
    signature: (L_c)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.oetf_inverse_H273_IEC61966_2
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.eotf_inverse_H273_ST428_1
    signature: (L_o)
  - function-name: colour.models.rgb.transfer_functions.itut_h_273.eotf_H273_ST428_1
    signature: (V)
  - function-name: colour.models.rgb.transfer_functions.leica_l_log.log_encoding_LLog
    signature: '(LSR: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.leica_l_log.log_decoding_LLog
    signature: '(LLog: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.006, ''cut2'': 0.138, ''a'': 8, ''b'': 0.09, ''c'': 0.27, ''d'':
      1.3, ''e'': 0.0115, ''f'': 0.6}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.linear.linear_function
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log.logarithmic_function_basic
    signature: '(x: ''ArrayLike'', style: "Literal[''log10'', ''antiLog10'', ''log2'',
      ''antiLog2'', ''logB'', ''antiLogB''] | str" = ''log2'', base: ''int'' = 2)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log.logarithmic_function_quasilog
    signature: '(x: ''ArrayLike'', style: "Literal[''linToLog'', ''logToLin''] | str"
      = ''linToLog'', base: ''int'' = 2, log_side_slope: ''float'' = 1, lin_side_slope:
      ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset: ''float'' =
      0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log.logarithmic_function_camera
    signature: '(x: ''ArrayLike'', style: "Literal[''cameraLinToLog'', ''cameraLogToLin'']
      | str" = ''cameraLinToLog'', base: ''int'' = 2, log_side_slope: ''float'' =
      1, lin_side_slope: ''float'' = 1, log_side_offset: ''float'' = 0, lin_side_offset:
      ''float'' = 0, lin_side_break: ''float'' = 0.005, linear_slope: ''float | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log.log_encoding_Log2
    signature: '(lin: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.log.log_decoding_Log2
    signature: '(log_norm: ''ArrayLike'', middle_grey: ''float'' = 0.18, min_exposure:
      ''float'' = -6.5, max_exposure: ''float'' = 6.5) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.nikon_n_log.log_encoding_NLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.nikon_n_log.log_decoding_NLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.328, ''cut2'': 0.4418377321603128, ''a'': 0.635386119257087, ''b'':
      0.0075, ''c'': 0.1466275659824047, ''d'': 0.6050830889540567}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.panalog.log_encoding_Panalog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.panalog.log_decoding_Panalog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.04077184461038074)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.panasonic_v_log.log_encoding_VLog
    signature: '(L_in: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.panasonic_v_log.log_decoding_VLog
    signature: '(V_out: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True, constants: ''Structure'' =
      {''cut1'': 0.01, ''cut2'': 0.181, ''b'': 0.00873, ''c'': 0.241514, ''d'': 0.598206})
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.pivoted_log.log_encoding_PivotedLog
    signature: '(x: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.pivoted_log.log_decoding_PivotedLog
    signature: '(y: ''ArrayLike'', log_reference: ''float'' = 445, linear_reference:
      ''float'' = 0.18, negative_gamma: ''float'' = 0.6, density_per_code_value: ''float''
      = 0.002) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_REDLog
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_REDLog
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.009955040995908344)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_REDLogFilm
    signature: '(x: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_REDLogFilm
    signature: '(y: ''ArrayLike'', black_offset: ''ArrayLike'' = 0.0107977516232771)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_Log3G10_v1
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_Log3G10_v1
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_Log3G10_v2
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_Log3G10_v2
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_Log3G10_v3
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_Log3G10_v3
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_Log3G10
    signature: '(x: ''ArrayLike'', method: "Literal[''v1'', ''v2'', ''v3''] | str"
      = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_Log3G10
    signature: '(y, method: "Literal[''v1'', ''v2'', ''v3''] | str" = ''v3'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_encoding_Log3G12
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.red.log_decoding_Log3G12
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_encoding_ROMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False)
      -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_decoding_ROMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False)
      -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_encoding_ProPhotoRGB
    signature: (X, bit_depth=8, out_int=False)
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_decoding_ProPhotoRGB
    signature: (X_p, bit_depth=8, in_int=False)
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_encoding_RIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.cctf_decoding_RIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_clip: ''float'' = 2.0) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.log_encoding_ERIMMRGB
    signature: '(X: ''ArrayLike'', bit_depth: ''int'' = 8, out_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayReal'''
  - function-name: colour.models.rgb.transfer_functions.rimm_romm_rgb.log_decoding_ERIMMRGB
    signature: '(X_p: ''ArrayLike'', bit_depth: ''int'' = 8, in_int: ''bool'' = False,
      E_min: ''float'' = 0.001, E_clip: ''float'' = 316.2) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.smpte_240m.oetf_SMPTE240M
    signature: '(L_c: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.smpte_240m.eotf_SMPTE240M
    signature: '(V_r: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_encoding_SLog
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_decoding_SLog
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_encoding_SLog2
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_decoding_SLog2
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_encoding_SLog3
    signature: '(x: ''ArrayLike'', bit_depth: ''int'' = 10, out_normalised_code_value:
      ''bool'' = True, in_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.sony.log_decoding_SLog3
    signature: '(y: ''ArrayLike'', bit_depth: ''int'' = 10, in_normalised_code_value:
      ''bool'' = True, out_reflection: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.srgb.eotf_inverse_sRGB
    signature: '(L: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.srgb.eotf_sRGB
    signature: '(V: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.st_2084.eotf_inverse_ST2084
    signature: '(C: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.st_2084.eotf_ST2084
    signature: '(N: ''ArrayLike'', L_p: ''float'' = 10000, constants: ''Structure''
      = {''m_1'': 0.1593017578125, ''m_2'': 78.84375, ''c_1'': 0.8359375, ''c_2'':
      18.8515625, ''c_3'': 18.6875}) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.viper_log.log_encoding_ViperLog
    signature: '(x: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.transfer_functions.viper_log.log_decoding_ViperLog
    signature: '(y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycbcr.round_BT2100
    signature: '(a: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycbcr.ranges_YCbCr
    signature: '(bits: ''int'', is_legal: ''bool'', is_int: ''bool'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycbcr.matrix_YCbCr
    signature: '(K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]), bits: ''int'' =
      8, is_legal: ''bool'' = False, is_int: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycbcr.offset_YCbCr
    signature: '(bits: ''int'' = 8, is_legal: ''bool'' = False, is_int: ''bool'' =
      False) -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycbcr.RGB_to_YCbCr
    signature: '(RGB: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 10, in_legal: ''bool'' = False, in_int: ''bool'' = False,
      out_bits: ''int'' = 8, out_legal: ''bool'' = True, out_int: ''bool'' = False,
      clamp_int: ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.ycbcr.YCbCr_to_RGB
    signature: '(YCbCr: ''ArrayLike'', K: ''NDArrayFloat'' = array([ 0.2126,  0.0722]),
      in_bits: ''int'' = 8, in_legal: ''bool'' = True, in_int: ''bool'' = False, out_bits:
      ''int'' = 10, out_legal: ''bool'' = False, out_int: ''bool'' = False, clamp_int:
      ''bool'' = True, **kwargs: ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.ycbcr.RGB_to_YcCbcCrc
    signature: '(RGB: ''ArrayLike'', out_bits: ''int'' = 10, out_legal: ''bool'' =
      True, out_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayReal'''
  - function-name: colour.models.rgb.ycbcr.YcCbcCrc_to_RGB
    signature: '(YcCbcCrc: ''ArrayLike'', in_bits: ''int'' = 10, in_legal: ''bool''
      = True, in_int: ''bool'' = False, is_12_bits_system: ''bool'' = False, **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycocg.RGB_to_YCoCg
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.rgb.ycocg.YCoCg_to_RGB
    signature: '(YCoCg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.yrg.LMS_to_Yrg
    signature: '(LMS: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.yrg.Yrg_to_LMS
    signature: '(Yrg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.yrg.XYZ_to_Yrg
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.models.yrg.Yrg_to_XYZ
    signature: '(Yrg: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value
    signature: '(Y: ''ArrayLike'', method: "Literal[''ASTM D1535'', ''Ladd 1955'',
      ''McCamy 1987'', ''Moon 1943'', ''Munsell 1933'', ''Priest 1920'', ''Saunderson
      1944''] | str" = ''ASTM D1535'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_Priest1920
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_Munsell1933
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_Moon1943
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_Saunderson1944
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_Ladd1955
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_McCamy1987
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_value_ASTMD1535
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell_colour_to_xyY
    signature: '(munsell_colour: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.xyY_to_munsell_colour
    signature: '(xyY: ''ArrayLike'', hue_decimals: ''int'' = 1, value_decimals: ''int''
      = 1, chroma_decimals: ''int'' = 1) -> ''str | NDArrayStr'''
  - function-name: colour.notation.RGB_to_HEX
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayStr'''
  - function-name: colour.notation.HEX_to_RGB
    signature: '(HEX: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.keyword_to_RGB_CSSColor3
    signature: '(keyword: ''str'') -> ''NDArrayFloat'''
  - function-name: colour.notation.css_color_3.keyword_to_RGB_CSSColor3
    signature: '(keyword: ''str'') -> ''NDArrayFloat'''
  - function-name: colour.notation.hexadecimal.RGB_to_HEX
    signature: '(RGB: ''ArrayLike'') -> ''NDArrayStr'''
  - function-name: colour.notation.hexadecimal.HEX_to_RGB
    signature: '(HEX: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_Priest1920
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_Munsell1933
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_Moon1943
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_Saunderson1944
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_Ladd1955
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_McCamy1987
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value_ASTMD1535
    signature: '(Y: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_value
    signature: '(Y: ''ArrayLike'', method: "Literal[''ASTM D1535'', ''Ladd 1955'',
      ''McCamy 1987'', ''Moon 1943'', ''Munsell 1933'', ''Priest 1920'', ''Saunderson
      1944''] | str" = ''ASTM D1535'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_specification_to_xyY
    signature: '(specification: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_colour_to_xyY
    signature: '(munsell_colour: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.xyY_to_munsell_specification
    signature: '(xyY: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.xyY_to_munsell_colour
    signature: '(xyY: ''ArrayLike'', hue_decimals: ''int'' = 1, value_decimals: ''int''
      = 1, chroma_decimals: ''int'' = 1) -> ''str | NDArrayStr'''
  - function-name: colour.notation.munsell.parse_munsell_colour
    signature: '(munsell_colour: ''str'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.is_grey_munsell_colour
    signature: '(specification: ''ArrayLike'') -> ''bool'''
  - function-name: colour.notation.munsell.normalise_munsell_specification
    signature: '(specification: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_colour_to_munsell_specification
    signature: '(munsell_colour: ''str'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.munsell_specification_to_munsell_colour
    signature: '(specification: ''ArrayLike'', hue_decimals: ''int'' = 1, value_decimals:
      ''int'' = 1, chroma_decimals: ''int'' = 1) -> ''str'''
  - function-name: colour.notation.munsell.xyY_from_renotation
    signature: '(specification: ''ArrayLike'', absolute_tolerance: ''float'' = 1e-08,
      relative_tolerance: ''float'' = 1e-08) -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.is_specification_in_renotation
    signature: '(specification: ''ArrayLike'') -> ''bool'''
  - function-name: colour.notation.munsell.bounding_hues_from_renotation
    signature: '(hue_and_code: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.hue_to_hue_angle
    signature: '(hue_and_code: ''ArrayLike'') -> ''float'''
  - function-name: colour.notation.munsell.hue_angle_to_hue
    signature: '(hue_angle: ''float'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.hue_to_ASTM_hue
    signature: (hue_and_code) -> 'float'
  - function-name: colour.notation.munsell.interpolation_method_from_renotation_ovoid
    signature: '(specification: ''ArrayLike'') -> "Literal[''Linear'', ''Radial'']
      | None"'
  - function-name: colour.notation.munsell.xy_from_renotation_ovoid
    signature: '(specification: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.LCHab_to_munsell_specification
    signature: '(LCHab: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.notation.munsell.maximum_chroma_from_renotation
    signature: '(hue_and_value_and_code: ''ArrayLike'') -> ''float'''
  - function-name: colour.notation.munsell.munsell_specification_to_xy
    signature: '(specification: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.scattering_cross_section
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, avogadro_constant: ''ArrayLike'' = 6.02214179e+23,
      n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999 at
      0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh_optical_depth
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike'' = 101325, latitude:
      ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant: ''ArrayLike''
      = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh_scattering
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike'' = 101325, latitude:
      ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant: ''ArrayLike''
      = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.sd_rayleigh_scattering
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), CO2_concentration:
      ''ArrayLike'' = 300, temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike''
      = 101325, latitude: ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant:
      ''ArrayLike'' = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''SpectralDistribution'''
  - function-name: colour.phenomena.rayleigh.air_refraction_index_Penndorf1957
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.air_refraction_index_Edlen1966
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.air_refraction_index_Peck1972
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.air_refraction_index_Bodhaine1999
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300)
      -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.N2_depolarisation
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.O2_depolarisation
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.F_air_Penndorf1957
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.F_air_Young1981
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.F_air_Bates1984
    signature: '(wavelength: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.F_air_Bodhaine1999
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300)
      -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.molecular_density
    signature: '(temperature: ''ArrayLike'' = 288.15, avogadro_constant: ''ArrayLike''
      = 6.02214179e+23) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.mean_molecular_weights
    signature: '(CO2_concentration: ''ArrayLike'' = 300) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.gravity_List1968
    signature: '(latitude: ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.scattering_cross_section
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, avogadro_constant: ''ArrayLike'' = 6.02214179e+23,
      n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999 at
      0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.rayleigh_optical_depth
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike'' = 101325, latitude:
      ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant: ''ArrayLike''
      = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.rayleigh_scattering
    signature: '(wavelength: ''ArrayLike'', CO2_concentration: ''ArrayLike'' = 300,
      temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike'' = 101325, latitude:
      ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant: ''ArrayLike''
      = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''NDArrayFloat'''
  - function-name: colour.phenomena.rayleigh.sd_rayleigh_scattering
    signature: '(shape: ''SpectralShape'' = SpectralShape(360, 780, 1), CO2_concentration:
      ''ArrayLike'' = 300, temperature: ''ArrayLike'' = 288.15, pressure: ''ArrayLike''
      = 101325, latitude: ''ArrayLike'' = 0, altitude: ''ArrayLike'' = 0, avogadro_constant:
      ''ArrayLike'' = 6.02214179e+23, n_s_function: ''Callable'' = <function air_refraction_index_Bodhaine1999
      at 0x7b9348b8ea20>, F_air_function: ''Callable'' = <function F_air_Bodhaine1999
      at 0x7b9348b8ede0>) -> ''SpectralDistribution'''
  - function-name: colour.plotting.colour_style
    signature: '(use_style: ''bool'' = True) -> ''dict'''
  - function-name: colour.plotting.override_style
    signature: '(**kwargs: ''Any'') -> ''Callable'''
  - function-name: colour.plotting.font_scaling
    signature: '(scaling: ''LiteralFontScaling'', value: ''float'') -> ''Generator'''
  - function-name: colour.plotting.XYZ_to_plotting_colourspace
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_encoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.plotting.colour_cycle
    signature: '(**kwargs: ''Any'') -> ''itertools.cycle'''
  - function-name: colour.plotting.artist
    signature: '(**kwargs: ''KwargsArtist | Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.camera
    signature: '(**kwargs: ''KwargsCamera | Any'') -> ''Tuple[Figure, Axes3D]'''
  - function-name: colour.plotting.render
    signature: '(**kwargs: ''KwargsRender | Any'') -> ''Tuple[Figure, Axes] | Tuple[Figure,
      Axes3D]'''
  - function-name: colour.plotting.label_rectangles
    signature: '(labels: ''Sequence[str]'', rectangles: ''Sequence[Patch]'', rotation:
      "Literal[''horizontal'', ''vertical''] | str" = ''vertical'', text_size: ''float''
      = 1, offset: ''ArrayLike | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.uniform_axes3d
    signature: '(**kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.filter_passthrough
    signature: '(mapping: ''Mapping'', filterers: ''Any | str | Sequence[Any | str]'',
      allow_non_siblings: ''bool'' = True) -> ''dict'''
  - function-name: colour.plotting.filter_RGB_colourspaces
    signature: '(filterers: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str,
      RGB_Colourspace]'''
  - function-name: colour.plotting.filter_cmfs
    signature: '(filterers: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str, MultiSpectralDistributions]'''
  - function-name: colour.plotting.filter_illuminants
    signature: '(filterers: ''SpectralDistribution | str | Sequence[SpectralDistribution
      | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.plotting.filter_colour_checkers
    signature: '(filterers: ''ColourChecker | str | Sequence[ColourChecker | str]'',
      allow_non_siblings: ''bool'' = True) -> ''Dict[str, ColourChecker]'''
  - function-name: colour.plotting.update_settings_collection
    signature: '(settings_collection: ''dict | List[dict]'', keyword_arguments: ''dict
      | List[dict]'', expected_count: ''int'')'
  - function-name: colour.plotting.plot_single_colour_swatch
    signature: '(colour_swatch: ''ArrayLike | ColourSwatch'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_colour_swatches
    signature: '(colour_swatches: ''Sequence[ArrayLike | ColourSwatch]'', width: ''float''
      = 1, height: ''float'' = 1, spacing: ''float'' = 0, columns: ''int | None''
      = None, direction: "Literal[''+y'', ''-y''] | str" = ''+y'', text_kwargs: ''dict
      | None'' = None, background_colour: ''ArrayLike'' = (1.0, 1.0, 1.0), compare_swatches:
      "Literal[''Diagonal'', ''Stacked''] | str | None" = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_function
    signature: '(function: ''Callable'', samples: ''ArrayLike | None'' = None, log_x:
      ''int | None'' = None, log_y: ''int | None'' = None, plot_kwargs: ''dict | List[dict]
      | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_functions
    signature: '(functions: ''Dict[str, Callable]'', samples: ''ArrayLike | None''
      = None, log_x: ''int | None'' = None, log_y: ''int | None'' = None, plot_kwargs:
      ''dict | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_image
    signature: '(image: ''ArrayLike'', imshow_kwargs: ''dict | None'' = None, text_kwargs:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_cvd_simulation_Machado2009
    signature: '(RGB: ''ArrayLike'', deficiency: "Literal[''Deuteranomaly'', ''Protanomaly'',
      ''Tritanomaly''] | str" = ''Protanomaly'', severity: ''float'' = 0.5, M_a: ''ArrayLike
      | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_sd
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', out_of_gamut_clipping: ''bool'' = True, modulate_colours_with_sd_amplitude:
      ''bool'' = False, equalize_sd_amplitude: ''bool'' = False, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_sds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_cmfs
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_cmfs
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_illuminant_sd
    signature: '(illuminant: ''SpectralDistribution | str'', cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_illuminant_sds
    signature: '(illuminants: ''SpectralDistribution | str | Sequence[SpectralDistribution
      | str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_visible_spectrum
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', out_of_gamut_clipping: ''bool''
      = True, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_lightness_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_lightness_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_luminance_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_luminance_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_blackbody_spectral_radiance
    signature: '(temperature: ''float'' = 3500, cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', blackbody: ''str'' = ''VY Canis Major'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_blackbody_colours
    signature: '(shape: ''SpectralShape'' = SpectralShape(150, 12500, 50), cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_colour_checker
    signature: '(colour_checker: ''ColourChecker | str'' = ''ColorChecker24 - After
      November 2014'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_colour_checkers
    signature: '(colour_checkers: ''ColourChecker | str | Sequence[ColourChecker |
      str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.lines_spectral_locus
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', labels: ''Sequence | None''
      = None, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] |
      str" = ''CIE 1931'') -> ''Tuple[NDArray, NDArray]'''
  - function-name: colour.plotting.plot_chromaticity_diagram_CIE1931
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_chromaticity_diagram_CIE1960UCS
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_chromaticity_diagram_CIE1976UCS
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_sds_in_chromaticity_diagram_CIE1931
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_sds_in_chromaticity_diagram_CIE1960UCS
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_sds_in_chromaticity_diagram_CIE1976UCS
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_corresponding_chromaticities_prediction
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, model: "Literal[''CIE 1994'', ''CMCCAT2000'', ''Fairchild 1990'', ''Von
      Kries'', ''Zhai 2018''] | str" = ''Von Kries'', corresponding_chromaticities_prediction_kwargs:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_automatic_colour_conversion_graph
    signature: '(filename: ''str'', prog: "Literal[''circo'', ''dot'', ''fdp'', ''neato'',
      ''nop'', ''twopi''] | str" = ''fdp'') -> ''Dot'''
  - function-name: colour.plotting.colourspace_model_axis_reorder
    signature: '(a: ''ArrayLike'', model: ''LiteralColourspaceModel | str'', direction:
      "Literal[''Forward'', ''Inverse''] | str" = ''Forward'') -> ''NDArrayFloat'''
  - function-name: colour.plotting.lines_pointer_gamut
    signature: '(method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS'']
      | str" = ''CIE 1931'')'
  - function-name: colour.plotting.plot_pointer_gamut
    signature: '(pointer_gamut_colours: ''ArrayLike | str | None'' = None, pointer_gamut_opacity:
      ''float'' = 1, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS'']
      | str" = ''CIE 1931'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1931
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1931: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1960UCS
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1960UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1976UCS
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1976UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1931
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1931
      at 0x7b9348b8cb80>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1960UCS
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1960UCS
      at 0x7b9348b8ccc0>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1976UCS
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1976UCS
      at 0x7b9348b8ce00>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1931
    signature: '(chromaticity_diagram_callable_CIE1931: ''Callable'' = <function plot_chromaticity_diagram_CIE1931
      at 0x7b9348fe8f40>, chromaticity_diagram_clipping: ''bool'' = False, ellipse_kwargs:
      ''dict | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1960UCS
    signature: '(chromaticity_diagram_callable_CIE1960UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>, chromaticity_diagram_clipping:
      ''bool'' = False, ellipse_kwargs: ''dict | List[dict] | None'' = None, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1976UCS
    signature: '(chromaticity_diagram_callable_CIE1976UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>, chromaticity_diagram_clipping:
      ''bool'' = False, ellipse_kwargs: ''dict | List[dict] | None'' = None, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_cctf
    signature: '(cctf: ''Callable | str'', cctf_decoding: ''bool'' = False, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_multi_cctfs
    signature: '(cctfs: ''Callable | str | Sequence[Callable | str]'', cctf_decoding:
      ''bool'' = False, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_constant_hue_loci
    signature: '(data: ''ArrayLike'', model: ''LiteralColourspaceModel | str'' = ''CIE
      Lab'', scatter_kwargs: ''dict | None'' = None, convert_kwargs: ''dict | None''
      = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_munsell_value_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_munsell_value_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_sd_rayleigh_scattering
    signature: '(CO2_concentration: ''ArrayLike'' = 300, temperature: ''ArrayLike''
      = 288.15, pressure: ''ArrayLike'' = 101325, latitude: ''ArrayLike'' = 0, altitude:
      ''ArrayLike'' = 0, cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_the_blue_sky
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_single_sd_colour_rendering_index_bars
    signature: '(sd: ''SpectralDistribution'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_sds_colour_rendering_indexes_bars
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_sd_colour_quality_scale_bars
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''NIST CQS 7.4'',
      ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.plot_multi_sds_colour_quality_scales_bars
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', method: "Literal[''NIST
      CQS 7.4'', ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_visible_spectrum_section
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', illuminant: ''SpectralDistribution
      | str'' = ''D65'', model: ''LiteralColourspaceModel | str'' = ''CIE xyY'', axis:
      "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin: ''float'' = 0.5, normalise:
      ''bool'' = True, show_section_colours: ''bool'' = True, show_section_contour:
      ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_colourspace_section
    signature: '(colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', model: ''LiteralColourspaceModel | str'' =
      ''CIE xyY'', axis: "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin:
      ''float'' = 0.5, normalise: ''bool'' = True, size: ''float'' = 1.0, show_section_colours:
      ''bool'' = True, show_section_contour: ''bool'' = True, segments: ''int'' =
      64, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.lines_daylight_locus
    signature: '(mireds: ''bool'' = False, method: "Literal[''CIE 1931'', ''CIE 1960
      UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'') -> ''Tuple[NDArray]'''
  - function-name: colour.plotting.lines_planckian_locus
    signature: '(labels: ''Sequence | None'' = None, mireds: ''bool'' = False, iso_temperature_lines_D_uv:
      ''float'' = 0.05, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976
      UCS''] | str" = ''CIE 1931'') -> ''Tuple[NDArray, NDArray]'''
  - function-name: colour.plotting.plot_planckian_locus_in_chromaticity_diagram_CIE1931
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_planckian_locus_in_chromaticity_diagram_CIE1960UCS
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_planckian_locus_in_chromaticity_diagram_CIE1976UCS
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_single_sd_colour_rendition_report
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''Full'', ''Intermediate'',
      ''Simple''] | str" = ''Full'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.plot_RGB_colourspaces_gamuts
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', model: ''LiteralColourspaceModel | str'' =
      ''CIE xyY'', segments: ''int'' = 8, show_grid: ''bool'' = True, grid_segments:
      ''int'' = 10, show_spectral_locus: ''bool'' = False, spectral_locus_colour:
      ''ArrayLike | str | None'' = None, cmfs: ''MultiSpectralDistributions | str
      | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromatically_adapt: ''bool'' = False, convert_kwargs: ''dict |
      None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes3D]'''
  - function-name: colour.plotting.plot_RGB_scatter
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', model: ''LiteralColourspaceModel
      | str'' = ''CIE xyY'', colourspaces: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str] | None'' = None, segments: ''int'' = 8, show_grid:
      ''bool'' = True, grid_segments: ''int'' = 10, show_spectral_locus: ''bool''
      = False, spectral_locus_colour: ''ArrayLike | str | None'' = None, points_size:
      ''float'' = 12, cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromatically_adapt: ''bool''
      = False, convert_kwargs: ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes3D]'''
  - function-name: colour.plotting.blindness.plot_cvd_simulation_Machado2009
    signature: '(RGB: ''ArrayLike'', deficiency: "Literal[''Deuteranomaly'', ''Protanomaly'',
      ''Tritanomaly''] | str" = ''Protanomaly'', severity: ''float'' = 0.5, M_a: ''ArrayLike
      | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.characterisation.plot_single_colour_checker
    signature: '(colour_checker: ''ColourChecker | str'' = ''ColorChecker24 - After
      November 2014'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.characterisation.plot_multi_colour_checkers
    signature: '(colour_checkers: ''ColourChecker | str | Sequence[ColourChecker |
      str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_single_sd
    signature: '(sd: ''SpectralDistribution'', cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', out_of_gamut_clipping: ''bool'' = True, modulate_colours_with_sd_amplitude:
      ''bool'' = False, equalize_sd_amplitude: ''bool'' = False, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_multi_sds
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_single_cmfs
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.colorimetry.plot_multi_cmfs
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_single_illuminant_sd
    signature: '(illuminant: ''SpectralDistribution | str'', cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_multi_illuminant_sds
    signature: '(illuminants: ''SpectralDistribution | str | Sequence[SpectralDistribution
      | str]'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_visible_spectrum
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', out_of_gamut_clipping: ''bool''
      = True, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_single_lightness_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.colorimetry.plot_multi_lightness_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_single_luminance_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.colorimetry.plot_multi_luminance_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.colorimetry.plot_blackbody_spectral_radiance
    signature: '(temperature: ''float'' = 3500, cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', blackbody: ''str'' = ''VY Canis Major'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.colorimetry.plot_blackbody_colours
    signature: '(shape: ''SpectralShape'' = SpectralShape(150, 12500, 50), cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.colour_style
    signature: '(use_style: ''bool'' = True) -> ''dict'''
  - function-name: colour.plotting.common.override_style
    signature: '(**kwargs: ''Any'') -> ''Callable'''
  - function-name: colour.plotting.common.font_scaling
    signature: '(scaling: ''LiteralFontScaling'', value: ''float'') -> ''Generator'''
  - function-name: colour.plotting.common.XYZ_to_plotting_colourspace
    signature: '(XYZ: ''ArrayLike'', illuminant: ''ArrayLike'' = array([ 0.3127,  0.329
      ]), chromatic_adaptation_transform: ''LiteralChromaticAdaptationTransform |
      str | None'' = ''CAT02'', apply_cctf_encoding: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.plotting.common.colour_cycle
    signature: '(**kwargs: ''Any'') -> ''itertools.cycle'''
  - function-name: colour.plotting.common.artist
    signature: '(**kwargs: ''KwargsArtist | Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.camera
    signature: '(**kwargs: ''KwargsCamera | Any'') -> ''Tuple[Figure, Axes3D]'''
  - function-name: colour.plotting.common.render
    signature: '(**kwargs: ''KwargsRender | Any'') -> ''Tuple[Figure, Axes] | Tuple[Figure,
      Axes3D]'''
  - function-name: colour.plotting.common.label_rectangles
    signature: '(labels: ''Sequence[str]'', rectangles: ''Sequence[Patch]'', rotation:
      "Literal[''horizontal'', ''vertical''] | str" = ''vertical'', text_size: ''float''
      = 1, offset: ''ArrayLike | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.common.uniform_axes3d
    signature: '(**kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.filter_passthrough
    signature: '(mapping: ''Mapping'', filterers: ''Any | str | Sequence[Any | str]'',
      allow_non_siblings: ''bool'' = True) -> ''dict'''
  - function-name: colour.plotting.common.filter_RGB_colourspaces
    signature: '(filterers: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str,
      RGB_Colourspace]'''
  - function-name: colour.plotting.common.filter_cmfs
    signature: '(filterers: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str, MultiSpectralDistributions]'''
  - function-name: colour.plotting.common.filter_illuminants
    signature: '(filterers: ''SpectralDistribution | str | Sequence[SpectralDistribution
      | str]'', allow_non_siblings: ''bool'' = True) -> ''Dict[str, SpectralDistribution]'''
  - function-name: colour.plotting.common.filter_colour_checkers
    signature: '(filterers: ''ColourChecker | str | Sequence[ColourChecker | str]'',
      allow_non_siblings: ''bool'' = True) -> ''Dict[str, ColourChecker]'''
  - function-name: colour.plotting.common.update_settings_collection
    signature: '(settings_collection: ''dict | List[dict]'', keyword_arguments: ''dict
      | List[dict]'', expected_count: ''int'')'
  - function-name: colour.plotting.common.plot_single_colour_swatch
    signature: '(colour_swatch: ''ArrayLike | ColourSwatch'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.plot_multi_colour_swatches
    signature: '(colour_swatches: ''Sequence[ArrayLike | ColourSwatch]'', width: ''float''
      = 1, height: ''float'' = 1, spacing: ''float'' = 0, columns: ''int | None''
      = None, direction: "Literal[''+y'', ''-y''] | str" = ''+y'', text_kwargs: ''dict
      | None'' = None, background_colour: ''ArrayLike'' = (1.0, 1.0, 1.0), compare_swatches:
      "Literal[''Diagonal'', ''Stacked''] | str | None" = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.plot_single_function
    signature: '(function: ''Callable'', samples: ''ArrayLike | None'' = None, log_x:
      ''int | None'' = None, log_y: ''int | None'' = None, plot_kwargs: ''dict | List[dict]
      | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.plot_multi_functions
    signature: '(functions: ''Dict[str, Callable]'', samples: ''ArrayLike | None''
      = None, log_x: ''int | None'' = None, log_y: ''int | None'' = None, plot_kwargs:
      ''dict | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.common.plot_image
    signature: '(image: ''ArrayLike'', imshow_kwargs: ''dict | None'' = None, text_kwargs:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.corresponding.plot_corresponding_chromaticities_prediction
    signature: '(experiment: ''Literal[1, 2, 3, 4, 6, 8, 9, 11, 12] | CorrespondingColourDataset''
      = 1, model: "Literal[''CIE 1994'', ''CMCCAT2000'', ''Fairchild 1990'', ''Von
      Kries'', ''Zhai 2018''] | str" = ''Von Kries'', corresponding_chromaticities_prediction_kwargs:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.lines_spectral_locus
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', labels: ''Sequence | None''
      = None, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] |
      str" = ''CIE 1931'') -> ''Tuple[NDArray, NDArray]'''
  - function-name: colour.plotting.diagrams.plot_spectral_locus
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', spectral_locus_colours:
      ''ArrayLike | str | None'' = None, spectral_locus_opacity: ''float'' = 1, spectral_locus_labels:
      ''Sequence | None'' = None, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'',
      ''CIE 1976 UCS''] | str" = ''CIE 1931'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.diagrams.plot_chromaticity_diagram_colours
    signature: '(samples: ''int'' = 256, diagram_colours: ''ArrayLike | str | None''
      = None, diagram_opacity: ''float'' = 1, diagram_clipping_path: ''ArrayLike |
      None'' = None, cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', method: "Literal[''CIE 1931'',
      ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'', **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.plot_chromaticity_diagram
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, method: "Literal[''CIE 1931'',
      ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'', **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.plot_chromaticity_diagram_CIE1931
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.diagrams.plot_chromaticity_diagram_CIE1960UCS
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.diagrams.plot_chromaticity_diagram_CIE1976UCS
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', show_diagram_colours: ''bool''
      = True, show_spectral_locus: ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.diagrams.plot_sds_in_chromaticity_diagram
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions
      | str | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable: ''Callable'' = <function plot_chromaticity_diagram
      at 0x7b9348fe8e00>, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976
      UCS''] | str" = ''CIE 1931'', annotate_kwargs: ''dict | List[dict] | None''
      = None, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.plot_sds_in_chromaticity_diagram_CIE1931
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.plot_sds_in_chromaticity_diagram_CIE1960UCS
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.diagrams.plot_sds_in_chromaticity_diagram_CIE1976UCS
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.graph.plot_automatic_colour_conversion_graph
    signature: '(filename: ''str'', prog: "Literal[''circo'', ''dot'', ''fdp'', ''neato'',
      ''nop'', ''twopi''] | str" = ''fdp'') -> ''Dot'''
  - function-name: colour.plotting.models.colourspace_model_axis_reorder
    signature: '(a: ''ArrayLike'', model: ''LiteralColourspaceModel | str'', direction:
      "Literal[''Forward'', ''Inverse''] | str" = ''Forward'') -> ''NDArrayFloat'''
  - function-name: colour.plotting.models.lines_pointer_gamut
    signature: '(method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS'']
      | str" = ''CIE 1931'')'
  - function-name: colour.plotting.models.plot_pointer_gamut
    signature: '(pointer_gamut_colours: ''ArrayLike | str | None'' = None, pointer_gamut_opacity:
      ''float'' = 1, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS'']
      | str" = ''CIE 1931'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_colourspaces_in_chromaticity_diagram
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable: ''Callable'' = <function plot_chromaticity_diagram
      at 0x7b9348fe8e00>, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976
      UCS''] | str" = ''CIE 1931'', show_whitepoints: ''bool'' = True, show_pointer_gamut:
      ''bool'' = False, chromatically_adapt: ''bool'' = False, plot_kwargs: ''dict
      | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1931
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1931: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1960UCS
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1960UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_colourspaces_in_chromaticity_diagram_CIE1976UCS
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', cmfs: ''MultiSpectralDistributions | str |
      Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromaticity_diagram_callable_CIE1976UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>, show_whitepoints: ''bool''
      = True, show_pointer_gamut: ''bool'' = False, chromatically_adapt: ''bool''
      = False, plot_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_chromaticities_in_chromaticity_diagram
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram at 0x7b9348b8ca40>,
      method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" =
      ''CIE 1931'', scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1931
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1931
      at 0x7b9348b8cb80>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1960UCS
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1960UCS
      at 0x7b9348b8ccc0>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_RGB_chromaticities_in_chromaticity_diagram_CIE1976UCS
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_RGB_colourspaces_in_chromaticity_diagram_CIE1976UCS
      at 0x7b9348b8ce00>, scatter_kwargs: ''dict | None'' = None, **kwargs: ''Any'')
      -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.ellipses_MacAdam1942
    signature: '(method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS'']
      | str" = ''CIE 1931'') -> ''List[NDArrayFloat]'''
  - function-name: colour.plotting.models.plot_ellipses_MacAdam1942_in_chromaticity_diagram
    signature: '(chromaticity_diagram_callable: ''Callable'' = <function plot_chromaticity_diagram
      at 0x7b9348fe8e00>, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976
      UCS''] | str" = ''CIE 1931'', chromaticity_diagram_clipping: ''bool'' = False,
      ellipse_kwargs: ''dict | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.models.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1931
    signature: '(chromaticity_diagram_callable_CIE1931: ''Callable'' = <function plot_chromaticity_diagram_CIE1931
      at 0x7b9348fe8f40>, chromaticity_diagram_clipping: ''bool'' = False, ellipse_kwargs:
      ''dict | List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1960UCS
    signature: '(chromaticity_diagram_callable_CIE1960UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>, chromaticity_diagram_clipping:
      ''bool'' = False, ellipse_kwargs: ''dict | List[dict] | None'' = None, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_ellipses_MacAdam1942_in_chromaticity_diagram_CIE1976UCS
    signature: '(chromaticity_diagram_callable_CIE1976UCS: ''Callable'' = <function
      plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>, chromaticity_diagram_clipping:
      ''bool'' = False, ellipse_kwargs: ''dict | List[dict] | None'' = None, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_single_cctf
    signature: '(cctf: ''Callable | str'', cctf_decoding: ''bool'' = False, **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_multi_cctfs
    signature: '(cctfs: ''Callable | str | Sequence[Callable | str]'', cctf_decoding:
      ''bool'' = False, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.models.plot_constant_hue_loci
    signature: '(data: ''ArrayLike'', model: ''LiteralColourspaceModel | str'' = ''CIE
      Lab'', scatter_kwargs: ''dict | None'' = None, convert_kwargs: ''dict | None''
      = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.notation.plot_single_munsell_value_function
    signature: '(function: ''Callable | str'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.notation.plot_multi_munsell_value_functions
    signature: '(functions: ''Callable | str | Sequence[Callable | str]'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.phenomena.plot_single_sd_rayleigh_scattering
    signature: '(CO2_concentration: ''ArrayLike'' = 300, temperature: ''ArrayLike''
      = 288.15, pressure: ''ArrayLike'' = 101325, latitude: ''ArrayLike'' = 0, altitude:
      ''ArrayLike'' = 0, cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.phenomena.plot_the_blue_sky
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.quality.plot_colour_quality_bars
    signature: '(specifications: ''Sequence[ColourRendering_Specification_CQS | ColourRendering_Specification_CRI]'',
      labels: ''bool'' = True, hatching: ''bool | None'' = None, hatching_repeat:
      ''int'' = 2, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.quality.plot_single_sd_colour_rendering_index_bars
    signature: '(sd: ''SpectralDistribution'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.quality.plot_multi_sds_colour_rendering_indexes_bars
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.quality.plot_single_sd_colour_quality_scale_bars
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''NIST CQS 7.4'',
      ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'', **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.quality.plot_multi_sds_colour_quality_scales_bars
    signature: '(sds: ''Sequence[SpectralDistribution | MultiSpectralDistributions]
      | SpectralDistribution | MultiSpectralDistributions'', method: "Literal[''NIST
      CQS 7.4'', ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'', **kwargs: ''Any'') ->
      ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.section.plot_hull_section_colours
    signature: '(hull: ''trimesh.Trimesh'', model: ''LiteralColourspaceModel | str''
      = ''CIE xyY'', axis: "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin:
      ''float'' = 0.5, normalise: ''bool'' = True, section_colours: ''ArrayLike |
      str | None'' = None, section_opacity: ''float'' = 1, convert_kwargs: ''dict
      | None'' = None, samples: ''int'' = 256, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.section.plot_hull_section_contour
    signature: '(hull: ''trimesh.Trimesh'', model: ''LiteralColourspaceModel | str''
      = ''CIE xyY'', axis: "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin:
      ''float'' = 0.5, normalise: ''bool'' = True, contour_colours: ''ArrayLike |
      str | None'' = None, contour_opacity: ''float'' = 1, convert_kwargs: ''dict
      | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.section.plot_visible_spectrum_section
    signature: '(cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', illuminant: ''SpectralDistribution
      | str'' = ''D65'', model: ''LiteralColourspaceModel | str'' = ''CIE xyY'', axis:
      "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin: ''float'' = 0.5, normalise:
      ''bool'' = True, show_section_colours: ''bool'' = True, show_section_contour:
      ''bool'' = True, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.section.plot_RGB_colourspace_section
    signature: '(colourspace: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', model: ''LiteralColourspaceModel | str'' =
      ''CIE xyY'', axis: "Literal[''+z'', ''+x'', ''+y''] | str" = ''+z'', origin:
      ''float'' = 0.5, normalise: ''bool'' = True, size: ''float'' = 1.0, show_section_colours:
      ''bool'' = True, show_section_contour: ''bool'' = True, segments: ''int'' =
      64, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.lines_daylight_locus
    signature: '(mireds: ''bool'' = False, method: "Literal[''CIE 1931'', ''CIE 1960
      UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'') -> ''Tuple[NDArray]'''
  - function-name: colour.plotting.temperature.plot_daylight_locus
    signature: '(daylight_locus_colours: ''ArrayLike | str | None'' = None, daylight_locus_opacity:
      ''float'' = 1, daylight_locus_mireds: ''bool'' = False, method: "Literal[''CIE
      1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.lines_planckian_locus
    signature: '(labels: ''Sequence | None'' = None, mireds: ''bool'' = False, iso_temperature_lines_D_uv:
      ''float'' = 0.05, method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976
      UCS''] | str" = ''CIE 1931'') -> ''Tuple[NDArray, NDArray]'''
  - function-name: colour.plotting.temperature.plot_planckian_locus
    signature: '(planckian_locus_colours: ''ArrayLike | str | None'' = None, planckian_locus_opacity:
      ''float'' = 1, planckian_locus_labels: ''Sequence | None'' = None, planckian_locus_mireds:
      ''bool'' = False, planckian_locus_iso_temperature_lines_D_uv: ''float'' = 0.05,
      method: "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" =
      ''CIE 1931'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.plot_planckian_locus_in_chromaticity_diagram
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable:
      ''Callable'' = <function plot_chromaticity_diagram at 0x7b9348fe8e00>, method:
      "Literal[''CIE 1931'', ''CIE 1960 UCS'', ''CIE 1976 UCS''] | str" = ''CIE 1931'',
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.plot_planckian_locus_in_chromaticity_diagram_CIE1931
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1931:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1931 at 0x7b9348fe8f40>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.plot_planckian_locus_in_chromaticity_diagram_CIE1960UCS
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1960UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1960UCS at 0x7b9348fe9080>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.temperature.plot_planckian_locus_in_chromaticity_diagram_CIE1976UCS
    signature: '(illuminants: ''str | Sequence[str] | None'' = None, chromaticity_diagram_callable_CIE1976UCS:
      ''Callable'' = <function plot_chromaticity_diagram_CIE1976UCS at 0x7b9348fe91c0>,
      annotate_kwargs: ''dict | List[dict] | None'' = None, plot_kwargs: ''dict |
      List[dict] | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.plot_single_sd_colour_rendition_report_full
    signature: '(sd: ''SpectralDistribution'', source: ''str | None'' = None, date:
      ''str | None'' = None, manufacturer: ''str | None'' = None, model: ''str | None''
      = None, notes: ''str | None'' = None, report_size: ''tuple[float, float]'' =
      (8.27, 11.69), report_row_height_ratios: ''tuple'' = (1, 2, 24, 3, 1), report_box_padding:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.plot_single_sd_colour_rendition_report_intermediate
    signature: '(sd: ''SpectralDistribution'', report_size: ''tuple[float, float]''
      = (8.27, 4.974468085106382), report_row_height_ratios: ''tuple'' = (1, 8, 1),
      report_box_padding: ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.tm3018.plot_single_sd_colour_rendition_report_simple
    signature: '(sd: ''SpectralDistribution'', report_size: ''tuple[float, float]''
      = (8.27, 8.27), report_row_height_ratios: ''tuple'' = (1, 8, 1), report_box_padding:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.plot_single_sd_colour_rendition_report
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''Full'', ''Intermediate'',
      ''Simple''] | str" = ''Full'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_spectra_ANSIIESTM3018
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_colour_vector_graphic
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_16_bin_bars
    signature: '(values: ''ArrayLike'', label_template: ''str'', x_ticker: ''bool''
      = False, label_orientation: "Literal[''Horizontal'', ''Vertical''] | str" =
      ''Vertical'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_local_chroma_shifts
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', x_ticker:
      ''bool'' = False, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_local_hue_shifts
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', x_ticker:
      ''bool'' = False, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_local_colour_fidelities
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', x_ticker:
      ''bool'' = False, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.components.plot_colour_fidelity_indexes
    signature: '(specification: ''ColourQuality_Specification_ANSIIESTM3018'', **kwargs:
      ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.report.plot_single_sd_colour_rendition_report_full
    signature: '(sd: ''SpectralDistribution'', source: ''str | None'' = None, date:
      ''str | None'' = None, manufacturer: ''str | None'' = None, model: ''str | None''
      = None, notes: ''str | None'' = None, report_size: ''tuple[float, float]'' =
      (8.27, 11.69), report_row_height_ratios: ''tuple'' = (1, 2, 24, 3, 1), report_box_padding:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.report.plot_single_sd_colour_rendition_report_intermediate
    signature: '(sd: ''SpectralDistribution'', report_size: ''tuple[float, float]''
      = (8.27, 4.974468085106382), report_row_height_ratios: ''tuple'' = (1, 8, 1),
      report_box_padding: ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes]'''
  - function-name: colour.plotting.tm3018.report.plot_single_sd_colour_rendition_report_simple
    signature: '(sd: ''SpectralDistribution'', report_size: ''tuple[float, float]''
      = (8.27, 8.27), report_row_height_ratios: ''tuple'' = (1, 8, 1), report_box_padding:
      ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.tm3018.report.plot_single_sd_colour_rendition_report
    signature: '(sd: ''SpectralDistribution'', method: "Literal[''Full'', ''Intermediate'',
      ''Simple''] | str" = ''Full'', **kwargs: ''Any'') -> ''Tuple[Figure, Axes]'''
  - function-name: colour.plotting.volume.nadir_grid
    signature: '(limits: ''ArrayLike | None'' = None, segments: ''int'' = 10, labels:
      ''ArrayLike | Sequence[str] | None'' = None, axes: ''Axes3D | None'' = None,
      **kwargs: ''Any'') -> ''Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.plotting.volume.RGB_identity_cube
    signature: '(width_segments: ''int'' = 16, height_segments: ''int'' = 16, depth_segments:
      ''int'' = 16, planes: "Literal[''-x'', ''+x'', ''-y'', ''+y'', ''-z'', ''+z'',
      ''xy'', ''xz'', ''yz'', ''yx'', ''zx'', ''zy''] | None" = None) -> ''Tuple[NDArrayFloat,
      NDArrayFloat]'''
  - function-name: colour.plotting.volume.plot_RGB_colourspaces_gamuts
    signature: '(colourspaces: ''RGB_Colourspace | LiteralRGBColourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'', model: ''LiteralColourspaceModel | str'' =
      ''CIE xyY'', segments: ''int'' = 8, show_grid: ''bool'' = True, grid_segments:
      ''int'' = 10, show_spectral_locus: ''bool'' = False, spectral_locus_colour:
      ''ArrayLike | str | None'' = None, cmfs: ''MultiSpectralDistributions | str
      | Sequence[MultiSpectralDistributions | str]'' = ''CIE 1931 2 Degree Standard
      Observer'', chromatically_adapt: ''bool'' = False, convert_kwargs: ''dict |
      None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure, Axes3D]'''
  - function-name: colour.plotting.volume.plot_RGB_scatter
    signature: '(RGB: ''ArrayLike'', colourspace: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str]'' = ''sRGB'', model: ''LiteralColourspaceModel
      | str'' = ''CIE xyY'', colourspaces: ''RGB_Colourspace | str | Sequence[RGB_Colourspace
      | LiteralRGBColourspace | str] | None'' = None, segments: ''int'' = 8, show_grid:
      ''bool'' = True, grid_segments: ''int'' = 10, show_spectral_locus: ''bool''
      = False, spectral_locus_colour: ''ArrayLike | str | None'' = None, points_size:
      ''float'' = 12, cmfs: ''MultiSpectralDistributions | str | Sequence[MultiSpectralDistributions
      | str]'' = ''CIE 1931 2 Degree Standard Observer'', chromatically_adapt: ''bool''
      = False, convert_kwargs: ''dict | None'' = None, **kwargs: ''Any'') -> ''Tuple[Figure,
      Axes3D]'''
  - function-name: colour.quality.colour_fidelity_index_CIE2017
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourRendering_Specification_CIE2017'''
  - function-name: colour.quality.colour_fidelity_index_ANSIIESTM3018
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourQuality_Specification_ANSIIESTM3018 | ColourRendering_Specification_CIE2017'''
  - function-name: colour.quality.colour_rendering_index
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourRendering_Specification_CRI'''
  - function-name: colour.quality.colour_quality_scale
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False,
      method: "Literal[''NIST CQS 7.4'', ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'')
      -> ''float | ColourRendering_Specification_CQS'''
  - function-name: colour.quality.spectral_similarity_index
    signature: '(sd_test: ''SpectralDistribution'', sd_reference: ''SpectralDistribution'',
      round_result: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.quality.colour_fidelity_index
    signature: '(sd_test: ''SpectralDistribution'', additional_data=False, method:
      "Literal[''CIE 2017'', ''ANSI/IES TM-30-18''] | str" = ''CIE 2017'') -> ''float
      | ColourRendering_Specification_CIE2017 | ColourQuality_Specification_ANSIIESTM3018'''
  - function-name: colour.quality.cfi2017.colour_fidelity_index_CIE2017
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourRendering_Specification_CIE2017'''
  - function-name: colour.quality.cfi2017.load_TCS_CIE2017
    signature: '(shape: ''SpectralShape'') -> ''MultiSpectralDistributions'''
  - function-name: colour.quality.cfi2017.CCT_reference_illuminant
    signature: '(sd: ''SpectralDistribution'') -> ''NDArrayFloat'''
  - function-name: colour.quality.cfi2017.sd_reference_illuminant
    signature: '(CCT: ''float'', shape: ''SpectralShape'') -> ''SpectralDistribution'''
  - function-name: colour.quality.cfi2017.tcs_colorimetry_data
    signature: '(sd_irradiance: ''SpectralDistribution | List[SpectralDistribution]'',
      sds_tcs: ''MultiSpectralDistributions'', cmfs: ''MultiSpectralDistributions'')
      -> ''Tuple[DataColorimetry_TCS_CIE2017, ...]'''
  - function-name: colour.quality.cfi2017.delta_E_to_R_f
    signature: '(delta_E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.quality.cqs.colour_quality_scale
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False,
      method: "Literal[''NIST CQS 7.4'', ''NIST CQS 9.0''] | str" = ''NIST CQS 9.0'')
      -> ''float | ColourRendering_Specification_CQS'''
  - function-name: colour.quality.cqs.gamut_area
    signature: '(Lab: ''ArrayLike'') -> ''float'''
  - function-name: colour.quality.cqs.vs_colorimetry_data
    signature: '(sd_test: ''SpectralDistribution'', sd_reference: ''SpectralDistribution'',
      sds_vs: ''Dict[str, SpectralDistribution]'', cmfs: ''MultiSpectralDistributions'',
      chromatic_adaptation: ''bool'' = False) -> ''Tuple[DataColorimetry_VS, ...]'''
  - function-name: colour.quality.cqs.CCT_factor
    signature: '(reference_data: ''Tuple[DataColorimetry_VS, ...]'', XYZ_r: ''ArrayLike'')
      -> ''float'''
  - function-name: colour.quality.cqs.scale_conversion
    signature: '(D_E_ab: ''float'', CCT_f: ''float'', scaling_f: ''float'') -> ''float'''
  - function-name: colour.quality.cqs.delta_E_RMS
    signature: '(CQS_data: ''Dict[int, DataColourQualityScale_VS]'', attribute: ''str'')
      -> ''float'''
  - function-name: colour.quality.cqs.colour_quality_scales
    signature: '(test_data: ''Tuple[DataColorimetry_VS, ...]'', reference_data: ''Tuple[DataColorimetry_VS,
      ...]'', scaling_f: ''float'', CCT_f: ''float'') -> ''Dict[int, DataColourQualityScale_VS]'''
  - function-name: colour.quality.cri.colour_rendering_index
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourRendering_Specification_CRI'''
  - function-name: colour.quality.cri.tcs_colorimetry_data
    signature: '(sd_t: ''SpectralDistribution'', sd_r: ''SpectralDistribution'', sds_tcs:
      ''Dict[str, SpectralDistribution]'', cmfs: ''MultiSpectralDistributions'', chromatic_adaptation:
      ''bool'' = False) -> ''Tuple[DataColorimetry_TCS, ...]'''
  - function-name: colour.quality.cri.colour_rendering_indexes
    signature: '(test_data: ''Tuple[DataColorimetry_TCS, ...]'', reference_data: ''Tuple[DataColorimetry_TCS,
      ...]'') -> ''Dict[int, DataColourQualityScale_TCS]'''
  - function-name: colour.quality.ssi.spectral_similarity_index
    signature: '(sd_test: ''SpectralDistribution'', sd_reference: ''SpectralDistribution'',
      round_result: ''bool'' = True) -> ''NDArrayFloat'''
  - function-name: colour.quality.tm3018.as_float_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.quality.tm3018.as_float_scalar
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''float'''
  - function-name: colour.quality.tm3018.as_int_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''NDArrayInt'''
  - function-name: colour.quality.tm3018.averages_area
    signature: '(averages: ''ArrayLike'') -> ''float'''
  - function-name: colour.quality.tm3018.cast
    signature: (typ, val)
  - function-name: colour.quality.tm3018.colour_fidelity_index_ANSIIESTM3018
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourQuality_Specification_ANSIIESTM3018 | ColourRendering_Specification_CIE2017'''
  - function-name: colour.quality.tm3018.colour_fidelity_index_CIE2017
    signature: '(sd_test: ''SpectralDistribution'', additional_data: ''bool'' = False)
      -> ''float | ColourRendering_Specification_CIE2017'''
  - function-name: colour.quality.tm3018.dataclass
    signature: (cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False,
      frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)
  - function-name: colour.quality.tm3018.delta_E_to_R_f
    signature: '(delta_E: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.recovery.sd_Jakob2019
    signature: '(coefficients: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 5)) -> ''SpectralDistribution'''
  - function-name: colour.recovery.find_coefficients_Jakob2019
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, coefficients_0: ''ArrayLike''
      = array([ 0.,  0.,  0.]), max_error: ''float'' = 0.023, dimensionalise: ''bool''
      = True) -> ''Tuple[NDArrayFloat, float]'''
  - function-name: colour.recovery.XYZ_to_sd_Jakob2019
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, optimisation_kwargs:
      ''dict | None'' = None, additional_data: ''bool'' = False) -> ''Tuple[SpectralDistribution,
      float] | SpectralDistribution'''
  - function-name: colour.recovery.PCA_Jiang2013
    signature: '(msds_camera_sensitivities: ''Mapping[str, MultiSpectralDistributions]'',
      eigen_w_v_count: ''int | None'' = None, additional_data: ''bool'' = False) ->
      ''Tuple[Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat], Tuple[NDArrayFloat,
      NDArrayFloat, NDArrayFloat]] | Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.recovery.RGB_to_sd_camera_sensitivity_Jiang2013
    signature: '(RGB: ''ArrayLike'', illuminant: ''SpectralDistribution'', reflectances:
      ''MultiSpectralDistributions'', eigen_w: ''ArrayLike'', shape: ''SpectralShape
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.recovery.RGB_to_msds_camera_sensitivities_Jiang2013
    signature: |-
      (RGB: 'ArrayLike', illuminant: 'SpectralDistribution', reflectances: 'MultiSpectralDistributions', basis_functions=array([[[  7.05658023e-03,   4.26051045e-03,   1.20056186e-02],
              [  1.13814968e-02,   6.32121769e-03,   4.50279691e-02],
              [  2.77797866e-02,   2.49750816e-02,   1.88574571e-01],
              [  2.79298929e-02,   3.61916105e-02,   2.74088722e-01],
              [  2.47595296e-02,   4.90259975e-02,   3.40401494e-01],
              [  2.00669399e-02,   6.06865579e-02,   3.82755893e-01],
              [  1.84992028e-02,   8.35966708e-02,   4.03985830e-01],
              [  2.14654766e-02,   1.30176921e-01,   3.96398754e-01],
              [  2.43586090e-02,   1.70753903e-01,   3.58003599e-01],
              [  2.26591473e-02,   1.80723149e-01,   2.98626359e-01],
              [  2.64964331e-02,   2.45498794e-01,   2.20468380e-01],
              [  3.63731292e-02,   3.05482585e-01,   1.52297894e-01],
              [  6.05228196e-02,   3.60076574e-01,   9.16913530e-02],
              [  8.11160092e-02,   3.90636752e-01,   5.97254543e-02],
              [  6.33529504e-02,   3.68623418e-01,   4.17968611e-02],
              [  4.69884086e-02,   3.42597906e-01,   2.88899440e-02],
              [  5.47264032e-02,   2.97254271e-01,   1.76811919e-02],
              [  1.10568321e-01,   2.49018364e-01,   1.23648769e-02],
              [  3.16047750e-01,   1.92214636e-01,   9.23715918e-03],
              [  4.63732048e-01,   1.36041628e-01,   7.14001730e-03],
              [  4.48956553e-01,   8.56357390e-02,   5.22250927e-03],
              [  3.92741251e-01,   4.72477943e-02,   4.13481586e-03],
              [  3.39257587e-01,   2.92610314e-02,   3.67846684e-03],
              [  2.75367075e-01,   1.97114890e-02,   3.44253279e-03],
              [  2.25901097e-01,   1.50202034e-02,   3.75175932e-03],
              [  1.70001447e-01,   1.07651281e-02,   4.32662725e-03],
              [  1.24233615e-01,   8.13651969e-03,   3.94020397e-03],
              [  6.15431646e-02,   4.45019662e-03,   2.36790418e-03],
              [  2.68394758e-02,   2.50556947e-03,   1.51597351e-03],
              [  8.72196807e-03,   1.42557387e-03,   1.15350991e-03],
              [  4.45849474e-03,   1.11739142e-03,   1.08295885e-03]],

             [[  2.11607271e-02,   3.97514624e-03,   3.36355321e-02],
              [  6.58065509e-02,   1.87379214e-02,  -1.68719239e-01],
              [  5.23257612e-02,   1.40056359e-01,  -3.60944098e-01],
              [  1.21702846e-02,   1.48251775e-01,   1.36435643e-03],
              [ -1.66522869e-03,   1.57434861e-01,   1.89145790e-01],
              [ -3.54518165e-03,   1.81238112e-01,   1.98100365e-01],
              [  1.26488078e-03,   2.01963723e-01,   3.09845263e-01],
              [  6.76357744e-03,   1.82340830e-01,   1.69010494e-02],
              [  1.08160084e-02,   1.95275361e-01,  -4.42127876e-02],
              [  1.77546803e-02,   1.99101961e-01,  -4.88323867e-02],
              [  3.94834974e-02,   7.88388513e-02,  -2.04413285e-01],
              [  7.91873974e-02,  -1.35136309e-02,  -2.50798473e-01],
              [  1.43595474e-01,  -2.00750395e-01,  -3.25529484e-01],
              [  2.54118577e-01,  -2.60199735e-01,  -3.58804848e-01],
              [  3.30058211e-01,  -3.00226874e-01,  -3.50927939e-01],
              [  3.00249539e-01,  -1.66333262e-01,  -2.92969195e-01],
              [  3.50757260e-01,  -2.47372751e-02,  -2.19474931e-01],
              [  5.37614304e-01,   1.45752304e-01,  -1.68764486e-01],
              [  2.52782877e-01,   3.03034064e-01,  -1.25105120e-01],
              [  3.64320607e-02,   3.36658828e-01,  -9.80716422e-02],
              [ -2.22615171e-02,   3.63722414e-01,  -6.81971686e-02],
              [ -5.73250062e-02,   2.72952249e-01,  -5.39662273e-02],
              [ -1.01881734e-01,   1.86453596e-01,  -4.67808083e-02],
              [ -2.25573456e-01,   1.47067621e-01,  -3.44974236e-02],
              [ -2.18241801e-01,   1.14693484e-01,  -3.44323026e-02],
              [ -2.48201853e-01,   8.92920044e-02,  -3.27452207e-02],
              [ -2.17673160e-01,   6.96986363e-02,  -2.62415462e-02],
              [ -2.11490225e-03,   1.35093302e-02,  -1.47510968e-02],
              [  2.36049596e-02,   5.01753615e-04,  -8.08119412e-03],
              [  9.85781871e-03,  -1.52472957e-03,  -1.27583471e-03],
              [  1.10290646e-02,  -1.59478598e-03,   1.35733044e-03]],

             [[ -4.30998898e-03,  -1.82230865e-02,  -5.24211509e-02],
              [ -1.17780326e-02,   6.71450785e-03,  -1.08185777e-01],
              [  1.17721993e-01,  -1.07513802e-02,  -7.29654257e-01],
              [  1.30354079e-01,  -2.38391224e-02,  -4.33897709e-01],
              [  1.13375430e-01,  -3.15714367e-02,  -3.33222237e-02],
              [  9.10761104e-02,   1.10569659e-02,   5.93743415e-02],
              [  7.30816499e-02,  -5.21152354e-03,   1.46373551e-02],
              [  8.01199207e-02,  -6.53642325e-02,   2.86332344e-01],
              [  9.86961573e-02,  -3.28268712e-01,   1.36735978e-01],
              [  8.77684132e-02,  -3.63574164e-01,   9.67582257e-02],
              [  8.34813361e-02,  -4.77112182e-01,   7.37073703e-02],
              [  8.54137498e-02,  -3.58932479e-01,   3.50320919e-02],
              [  1.05670766e-01,  -6.93038843e-02,   7.31417735e-02],
              [  9.83061406e-02,   3.65873451e-02,   1.04116166e-01],
              [ -1.19599680e-02,   2.87731522e-01,   1.68140808e-01],
              [ -8.50583052e-02,   2.30757854e-01,   1.69938727e-01],
              [ -1.72075810e-01,   2.01765320e-01,   1.59201304e-01],
              [ -3.86518874e-01,   1.60302347e-01,   1.36703323e-01],
              [ -2.13854982e-01,   1.46805573e-01,   1.02229885e-01],
              [  4.13708718e-01,   1.63902086e-01,   8.60029303e-02],
              [  2.86282676e-01,   1.73177429e-01,   5.69248903e-02],
              [  8.20882578e-02,   1.86456483e-01,   4.62035288e-02],
              [ -9.94187412e-02,   1.66160446e-01,   3.92566870e-02],
              [ -2.15346951e-01,   1.38495677e-01,   2.51190869e-02],
              [ -3.31711064e-01,   1.21089092e-01,   2.01845363e-02],
              [ -3.71430024e-01,   9.69227859e-02,   1.06636472e-02],
              [ -2.94296990e-01,   6.64771564e-02,   2.03421395e-03],
              [  5.85571209e-03,   7.12480444e-03,   5.31723103e-03],
              [  2.51401055e-02,  -4.90804389e-04,   2.94568465e-03],
              [  7.34123264e-04,  -2.40243345e-03,  -1.71277232e-04],
              [ -6.73403618e-03,  -4.86817463e-03,  -1.89913586e-04]],

             [[ -1.19324508e-02,  -1.86457839e-02,  -3.44308523e-01],
              [  5.84755746e-02,  -2.98254133e-02,  -7.72059187e-01],
              [  1.63704463e-01,   1.64226010e-01,  -1.17757698e-01],
              [  1.11181738e-01,   3.08204544e-01,   3.30840849e-01],
              [  7.99492367e-02,   3.37925407e-01,   1.31371615e-01],
              [  6.64239179e-02,   3.68126273e-01,  -8.08610340e-02],
              [  5.42482382e-02,   4.35091065e-01,  -1.28528914e-01],
              [  7.53571937e-02,   3.93422166e-01,  -1.66897123e-01],
              [  1.00163477e-01,   1.03240466e-01,  -1.65406564e-02],
              [  1.03719045e-01,  -8.84653110e-02,   4.90590224e-02],
              [  1.24735946e-01,  -2.67629473e-01,   1.13812596e-01],
              [  1.73972214e-01,  -1.14694333e-01,   1.32161149e-01],
              [  2.71270408e-01,  -3.33007666e-02,   1.66311767e-01],
              [  3.72499233e-01,   9.02338283e-02,   1.20499902e-01],
              [  3.60554816e-01,   1.38784492e-01,   4.80218565e-02],
              [  2.67927534e-01,   2.41232857e-02,  -1.48784109e-02],
              [  1.38881268e-01,  -2.45955816e-02,  -5.10096217e-02],
              [ -2.44711832e-01,  -1.59925001e-01,  -5.85282060e-02],
              [ -4.39806149e-01,  -1.39303988e-01,  -4.89178301e-02],
              [ -1.14290968e-01,  -1.60932332e-01,  -4.23725830e-02],
              [ -5.72589229e-02,  -2.13667789e-01,  -3.45263813e-02],
              [ -2.15919229e-02,  -1.06509578e-01,  -3.40349811e-02],
              [  2.23340732e-02,  -9.08275863e-02,  -2.89247816e-02],
              [  9.68602739e-02,  -7.17512404e-02,  -2.14958602e-02],
              [  1.67160263e-01,  -6.38021564e-02,  -2.26664299e-02],
              [  2.89123135e-01,  -5.00044942e-02,  -2.80159559e-02],
              [  1.75739116e-01,  -4.37040979e-02,  -2.13648110e-02],
              [ -9.12802458e-02,   3.58541615e-03,  -9.25634900e-03],
              [ -7.70262616e-02,   2.59530512e-03,  -1.12436158e-02],
              [ -2.60063612e-02,  -8.97573843e-03,  -1.23619005e-02],
              [ -2.14097933e-02,  -1.35781591e-02,  -9.47085267e-03]],

             [[  4.69062365e-02,   1.46058264e-02,   2.38963948e-03],
              [ -4.92119685e-02,   4.45045153e-02,  -5.24681309e-02],
              [ -3.65802562e-01,  -1.27073408e-01,   5.25900640e-03],
              [ -2.60854027e-01,  -1.73301391e-01,   1.67759014e-01],
              [ -2.28839265e-01,  -1.10445689e-01,   3.59374198e-01],
              [ -2.05366762e-01,  -8.29045423e-02,  -2.64084269e-02],
              [ -2.07900346e-01,   1.58095747e-01,   3.20353250e-01],
              [ -2.42534911e-01,   2.25635891e-01,  -3.92045218e-02],
              [ -2.60814036e-01,   3.89624957e-02,  -1.17189448e-01],
              [ -2.20102720e-01,  -1.95336276e-01,  -5.89249261e-01],
              [ -1.97323949e-01,   1.43941100e-01,  -2.20385615e-01],
              [ -1.73789861e-01,  -2.77000933e-02,  -2.18642230e-01],
              [ -6.39833896e-02,  -2.41823321e-02,  -3.93270525e-02],
              [  1.51239662e-01,   5.40759848e-01,   1.28825456e-01],
              [  1.81201570e-01,  -1.48188585e-01,   1.97838446e-01],
              [  2.05204543e-01,  -9.16011287e-02,   2.38043899e-01],
              [  1.44409388e-01,  -3.08820126e-01,   2.32530259e-01],
              [ -1.93125114e-01,  -1.34063855e-01,   2.10271779e-01],
              [ -2.88886894e-01,  -9.02345458e-02,   1.60208772e-01],
              [ -4.40030929e-02,  -1.79961534e-01,   1.30892953e-01],
              [  2.23544485e-01,   3.98726553e-03,   8.74119198e-02],
              [  8.93592969e-02,   1.69347554e-01,   7.00972249e-02],
              [  8.70116026e-02,   2.63043771e-01,   5.60500938e-02],
              [  1.31357412e-01,   2.56484668e-01,   1.92928345e-02],
              [ -7.92699180e-02,   2.58857148e-01,   2.69514052e-03],
              [ -2.07058716e-01,   2.23692062e-01,  -4.87514425e-02],
              [ -3.26243976e-02,   1.82581738e-01,  -5.46486156e-02],
              [  1.17865487e-01,   5.12088425e-02,   1.40240872e-02],
              [  1.14751035e-01,   1.99905862e-02,   1.84244894e-02],
              [  5.78874158e-02,   2.32697730e-02,   2.16581407e-02],
              [  4.95503699e-02,   2.53662331e-02,   1.61881799e-02]],

             [[ -7.84113333e-02,  -2.52182324e-02,   3.67603194e-01],
              [ -2.28932415e-01,  -1.13101498e-01,   2.00936645e-01],
              [  1.21979657e-02,  -2.62426956e-01,  -3.74227028e-01],
              [  2.27896960e-01,  -1.25967427e-01,   6.05949573e-01],
              [  1.86032668e-01,  -6.12718635e-02,  -5.68717553e-03],
              [  1.23100741e-01,   4.16798278e-02,   5.59349243e-02],
              [  1.02362152e-01,   2.52577546e-01,  -3.79023225e-01],
              [  6.74835676e-02,   1.78621178e-01,  -8.08957449e-02],
              [  4.78618426e-02,  -2.31399800e-01,   1.89944986e-01],
              [ -5.25479367e-03,  -4.44321143e-01,   1.27791380e-01],
              [ -9.49412490e-02,   1.73805971e-02,  -1.10728963e-01],
              [ -1.40795946e-01,   1.83610630e-01,  -2.21368880e-01],
              [ -2.16925234e-01,   2.53559067e-01,   6.58359798e-03],
              [ -8.31939370e-02,   2.99437566e-02,   6.07388819e-02],
              [ -9.09952451e-02,  -2.78424436e-01,   8.64610555e-02],
              [ -2.92437845e-02,  -3.06350797e-01,   5.43430334e-02],
              [  1.56803513e-01,   1.25473875e-01,   3.40615952e-02],
              [  3.40152218e-01,   1.32609274e-01,   2.36016225e-02],
              [ -3.89480156e-01,   3.13761779e-01,   1.25913880e-02],
              [ -2.49752286e-01,   1.59495291e-01,   4.16379139e-03],
              [  3.25379579e-01,   9.28982986e-03,  -1.75488559e-02],
              [  2.05031638e-01,  -2.01463204e-01,  -2.39791577e-02],
              [ -3.05970339e-04,  -2.04094293e-01,  -2.53565197e-02],
              [  7.55053981e-02,  -1.27857959e-01,  -4.96041654e-02],
              [ -3.97188747e-02,  -1.06234251e-01,  -6.28972363e-02],
              [ -8.83691855e-02,  -7.48895678e-02,  -1.07591230e-01],
              [ -2.69457979e-02,  -2.70504315e-02,  -1.07320477e-01],
              [  5.27232144e-02,  -5.50948296e-02,  -3.36110102e-02],
              [ -2.69092500e-01,  -4.22952481e-02,  -2.30310793e-02],
              [ -3.11989365e-01,  -2.17399048e-02,  -2.29777947e-02],
              [ -1.99197028e-01,  -1.70083239e-02,  -3.08939354e-02]]]), shape: 'SpectralShape | None' = None) -> 'MultiSpectralDistributions'
  - function-name: colour.recovery.spectral_primary_decomposition_Mallett2019
    signature: '(colourspace: ''RGB_Colourspace'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, metric:
      ''Callable'' = <function norm at 0x7b9367bc6ff0>, metric_args: ''tuple'' = (),
      optimisation_kwargs: ''dict | None'' = None) -> ''MultiSpectralDistributions'''
  - function-name: colour.recovery.RGB_to_sd_Mallett2019
    signature: |-
      (RGB: 'ArrayLike', basis_functions: 'MultiSpectralDistributions' = MultiSpectralDistributions([[  3.80000000e+02,   3.27457414e-01,   3.31861713e-01,
                                     3.40680792e-01],
                                  [  3.85000000e+02,   3.23750578e-01,   3.29688188e-01,
                                     3.46561187e-01],
                                  [  3.90000000e+02,   3.13439461e-01,   3.27860022e-01,
                                     3.58700493e-01],
                                  [  3.95000000e+02,   2.88879383e-01,   3.19173580e-01,
                                     3.91947027e-01],
                                  [  4.00000000e+02,   2.39205681e-01,   2.94322584e-01,
                                     4.66471731e-01],
                                  [  4.05000000e+02,   1.89702037e-01,   2.58697065e-01,
                                     5.51600896e-01],
                                  [  4.10000000e+02,   1.21746068e-01,   1.88894319e-01,
                                     6.89359611e-01],
                                  [  4.15000000e+02,   7.45782707e-02,   1.25388382e-01,
                                     8.00033347e-01],
                                  [  4.20000000e+02,   4.44331586e-02,   7.86870603e-02,
                                     8.76879781e-01],
                                  [  4.25000000e+02,   2.89286321e-02,   5.31432709e-02,
                                     9.17928097e-01],
                                  [  4.30000000e+02,   2.23166535e-02,   4.22881460e-02,
                                     9.35395201e-01],
                                  [  4.35000000e+02,   1.69113073e-02,   3.33183455e-02,
                                     9.49770347e-01],
                                  [  4.40000000e+02,   1.41811071e-02,   2.97559482e-02,
                                     9.56062945e-01],
                                  [  4.45000000e+02,   1.30531427e-02,   3.03312505e-02,
                                     9.56615607e-01],
                                  [  4.50000000e+02,   1.19861636e-02,   3.09885719e-02,
                                     9.57025265e-01],
                                  [  4.55000000e+02,   1.12887147e-02,   3.16863552e-02,
                                     9.57024931e-01],
                                  [  4.60000000e+02,   1.09060665e-02,   3.46699615e-02,
                                     9.54423973e-01],
                                  [  4.65000000e+02,   1.04007135e-02,   3.45519574e-02,
                                     9.55047329e-01],
                                  [  4.70000000e+02,   1.06373603e-02,   4.06848062e-02,
                                     9.48677833e-01],
                                  [  4.75000000e+02,   1.09076625e-02,   5.44600374e-02,
                                     9.34632300e-01],
                                  [  4.80000000e+02,   1.10327124e-02,   8.09052874e-02,
                                     9.08062000e-01],
                                  [  4.85000000e+02,   1.13106566e-02,   1.46348303e-01,
                                     8.42341039e-01],
                                  [  4.90000000e+02,   1.11546421e-02,   3.79679643e-01,
                                     6.09165715e-01],
                                  [  4.95000000e+02,   1.01487704e-02,   7.66744269e-01,
                                     2.23106961e-01],
                                  [  5.00000000e+02,   8.91858212e-03,   8.76214748e-01,
                                     1.14866670e-01],
                                  [  5.05000000e+02,   7.68557634e-03,   9.18491656e-01,
                                     7.38227679e-02],
                                  [  5.10000000e+02,   6.70570828e-03,   9.40655563e-01,
                                     5.26387288e-02],
                                  [  5.15000000e+02,   5.99580599e-03,   9.53731885e-01,
                                     4.02723090e-02],
                                  [  5.20000000e+02,   5.53725664e-03,   9.61643280e-01,
                                     3.28194627e-02],
                                  [  5.25000000e+02,   5.19378424e-03,   9.67200020e-01,
                                     2.76061959e-02],
                                  [  5.30000000e+02,   5.02536227e-03,   9.70989746e-01,
                                     2.39848911e-02],
                                  [  5.35000000e+02,   5.13636277e-03,   9.72852304e-01,
                                     2.20113334e-02],
                                  [  5.40000000e+02,   5.43320026e-03,   9.73116594e-01,
                                     2.14502053e-02],
                                  [  5.45000000e+02,   5.81998590e-03,   9.73351069e-01,
                                     2.08289445e-02],
                                  [  5.50000000e+02,   6.40057277e-03,   9.73351116e-01,
                                     2.02483114e-02],
                                  [  5.55000000e+02,   7.44952868e-03,   9.72261080e-01,
                                     2.02893915e-02],
                                  [  5.60000000e+02,   8.58363582e-03,   9.73351022e-01,
                                     1.80653423e-02],
                                  [  5.65000000e+02,   1.03957625e-02,   9.73148495e-01,
                                     1.64557422e-02],
                                  [  5.70000000e+02,   1.35654335e-02,   9.71061306e-01,
                                     1.53732601e-02],
                                  [  5.75000000e+02,   1.93845158e-02,   9.66371306e-01,
                                     1.42441785e-02],
                                  [  5.80000000e+02,   3.20840712e-02,   9.54941968e-01,
                                     1.29739616e-02],
                                  [  5.85000000e+02,   7.43560378e-02,   9.13578990e-01,
                                     1.20649741e-02],
                                  [  5.90000000e+02,   6.24393724e-01,   3.64348804e-01,
                                     1.12574782e-02],
                                  [  5.95000000e+02,   9.18310033e-01,   7.15072425e-02,
                                     1.01827247e-02],
                                  [  6.00000000e+02,   9.49253030e-01,   4.12304345e-02,
                                     9.51653539e-03],
                                  [  6.05000000e+02,   9.58187833e-01,   3.24238742e-02,
                                     9.38829273e-03],
                                  [  6.10000000e+02,   9.58187751e-01,   3.19246298e-02,
                                     9.88761909e-03],
                                  [  6.15000000e+02,   9.58187625e-01,   3.12760332e-02,
                                     1.05363420e-02],
                                  [  6.20000000e+02,   9.55679061e-01,   3.26303704e-02,
                                     1.16905688e-02],
                                  [  6.25000000e+02,   9.58006155e-01,   2.95308721e-02,
                                     1.24629729e-02],
                                  [  6.30000000e+02,   9.54101573e-01,   3.15617612e-02,
                                     1.43366652e-02],
                                  [  6.35000000e+02,   9.47607606e-01,   3.56742183e-02,
                                     1.67181753e-02],
                                  [  6.40000000e+02,   9.38681328e-01,   4.14030054e-02,
                                     1.99156661e-02],
                                  [  6.45000000e+02,   9.24466683e-01,   5.06042604e-02,
                                     2.49290562e-02],
                                  [  6.50000000e+02,   9.04606025e-01,   6.34343004e-02,
                                     3.19596736e-02],
                                  [  6.55000000e+02,   8.80412199e-01,   7.89182453e-02,
                                     4.06695541e-02],
                                  [  6.60000000e+02,   8.47787873e-01,   9.95427427e-02,
                                     5.26693824e-02],
                                  [  6.65000000e+02,   8.05779127e-01,   1.25595760e-01,
                                     6.86251105e-02],
                                  [  6.70000000e+02,   7.52531854e-01,   1.57590910e-01,
                                     8.98772323e-02],
                                  [  6.75000000e+02,   6.86439397e-01,   1.95398239e-01,
                                     1.18162359e-01],
                                  [  6.80000000e+02,   6.18694571e-01,   2.31474475e-01,
                                     1.49830947e-01],
                                  [  6.85000000e+02,   5.40264444e-01,   2.68852136e-01,
                                     1.90883409e-01],
                                  [  6.90000000e+02,   4.72964416e-01,   2.96029164e-01,
                                     2.31006403e-01],
                                  [  6.95000000e+02,   4.32701597e-01,   3.09754994e-01,
                                     2.57543385e-01],
                                  [  7.00000000e+02,   4.05358046e-01,   3.17815883e-01,
                                     2.76826039e-01],
                                  [  7.05000000e+02,   3.85491835e-01,   3.22990347e-01,
                                     2.91517773e-01],
                                  [  7.10000000e+02,   3.70983585e-01,   3.26353848e-01,
                                     3.02662506e-01],
                                  [  7.15000000e+02,   3.57608702e-01,   3.29143902e-01,
                                     3.13247301e-01],
                                  [  7.20000000e+02,   3.48712800e-01,   3.30808727e-01,
                                     3.20478325e-01],
                                  [  7.25000000e+02,   3.44880119e-01,   3.31482690e-01,
                                     3.23636995e-01],
                                  [  7.30000000e+02,   3.41917877e-01,   3.31984550e-01,
                                     3.26097309e-01],
                                  [  7.35000000e+02,   3.39531093e-01,   3.32341173e-01,
                                     3.28127369e-01],
                                  [  7.40000000e+02,   3.37169504e-01,   3.32912009e-01,
                                     3.29917976e-01],
                                  [  7.45000000e+02,   3.36172019e-01,   3.32919280e-01,
                                     3.30907901e-01],
                                  [  7.50000000e+02,   3.35167443e-01,   3.33027673e-01,
                                     3.31803633e-01],
                                  [  7.55000000e+02,   3.34421625e-01,   3.33179705e-01,
                                     3.32396627e-01],
                                  [  7.60000000e+02,   3.34008760e-01,   3.33247031e-01,
                                     3.32740781e-01],
                                  [  7.65000000e+02,   3.33915793e-01,   3.33259349e-01,
                                     3.32820857e-01],
                                  [  7.70000000e+02,   3.33818455e-01,   3.33275050e-01,
                                     3.32901731e-01],
                                  [  7.75000000e+02,   3.33672775e-01,   3.33294328e-01,
                                     3.33025967e-01],
                                  [  7.80000000e+02,   3.33569513e-01,   3.33309425e-01,
                                     3.33111083e-01]],
                                 ['red', 'green', 'blue'],
                                 SpragueInterpolator,
                                 {},
                                 Extrapolator,
                                 {'method': 'Constant', 'left': None, 'right': None})) -> 'SpectralDistribution'
  - function-name: colour.recovery.XYZ_to_sd_Meng2015
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, optimisation_kwargs:
      ''dict | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.recovery.XYZ_to_sd_Otsu2018
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, dataset: ''Dataset_Otsu2018''
      = <colour.recovery.otsu2018.Dataset_Otsu2018 object at 0x7b9348d2bcb0>, clip:
      ''bool'' = True) -> ''SpectralDistribution'''
  - function-name: colour.recovery.RGB_to_sd_Smits1999
    signature: '(RGB: ''ArrayLike'') -> ''SpectralDistribution'''
  - function-name: colour.recovery.XYZ_to_sd
    signature: '(XYZ: ''ArrayLike'', method: "Literal[''Jakob 2019'', ''Mallett 2019'',
      ''Meng 2015'', ''Otsu 2018'', ''Smits 1999''] | str" = ''Meng 2015'', **kwargs:
      ''Any'') -> ''SpectralDistribution'''
  - function-name: colour.recovery.jakob2019.sd_Jakob2019
    signature: '(coefficients: ''ArrayLike'', shape: ''SpectralShape'' = SpectralShape(360,
      780, 5)) -> ''SpectralDistribution'''
  - function-name: colour.recovery.jakob2019.error_function
    signature: '(coefficients: ''ArrayLike'', target: ''ArrayLike'', cmfs: ''MultiSpectralDistributions'',
      illuminant: ''SpectralDistribution'', max_error: ''float | None'' = None, additional_data:
      ''bool'' = False) -> ''Tuple[float, NDArrayFloat] | Tuple[float, NDArrayFloat,
      NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.recovery.jakob2019.dimensionalise_coefficients
    signature: '(coefficients: ''ArrayLike'', shape: ''SpectralShape'') -> ''NDArrayFloat'''
  - function-name: colour.recovery.jakob2019.lightness_scale
    signature: '(steps: ''int'') -> ''NDArrayFloat'''
  - function-name: colour.recovery.jakob2019.find_coefficients_Jakob2019
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, coefficients_0: ''ArrayLike''
      = array([ 0.,  0.,  0.]), max_error: ''float'' = 0.023, dimensionalise: ''bool''
      = True) -> ''Tuple[NDArrayFloat, float]'''
  - function-name: colour.recovery.jakob2019.XYZ_to_sd_Jakob2019
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, optimisation_kwargs:
      ''dict | None'' = None, additional_data: ''bool'' = False) -> ''Tuple[SpectralDistribution,
      float] | SpectralDistribution'''
  - function-name: colour.recovery.jiang2013.PCA_Jiang2013
    signature: '(msds_camera_sensitivities: ''Mapping[str, MultiSpectralDistributions]'',
      eigen_w_v_count: ''int | None'' = None, additional_data: ''bool'' = False) ->
      ''Tuple[Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat], Tuple[NDArrayFloat,
      NDArrayFloat, NDArrayFloat]] | Tuple[NDArrayFloat, NDArrayFloat, NDArrayFloat]'''
  - function-name: colour.recovery.jiang2013.RGB_to_sd_camera_sensitivity_Jiang2013
    signature: '(RGB: ''ArrayLike'', illuminant: ''SpectralDistribution'', reflectances:
      ''MultiSpectralDistributions'', eigen_w: ''ArrayLike'', shape: ''SpectralShape
      | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.recovery.jiang2013.RGB_to_msds_camera_sensitivities_Jiang2013
    signature: |-
      (RGB: 'ArrayLike', illuminant: 'SpectralDistribution', reflectances: 'MultiSpectralDistributions', basis_functions=array([[[  7.05658023e-03,   4.26051045e-03,   1.20056186e-02],
              [  1.13814968e-02,   6.32121769e-03,   4.50279691e-02],
              [  2.77797866e-02,   2.49750816e-02,   1.88574571e-01],
              [  2.79298929e-02,   3.61916105e-02,   2.74088722e-01],
              [  2.47595296e-02,   4.90259975e-02,   3.40401494e-01],
              [  2.00669399e-02,   6.06865579e-02,   3.82755893e-01],
              [  1.84992028e-02,   8.35966708e-02,   4.03985830e-01],
              [  2.14654766e-02,   1.30176921e-01,   3.96398754e-01],
              [  2.43586090e-02,   1.70753903e-01,   3.58003599e-01],
              [  2.26591473e-02,   1.80723149e-01,   2.98626359e-01],
              [  2.64964331e-02,   2.45498794e-01,   2.20468380e-01],
              [  3.63731292e-02,   3.05482585e-01,   1.52297894e-01],
              [  6.05228196e-02,   3.60076574e-01,   9.16913530e-02],
              [  8.11160092e-02,   3.90636752e-01,   5.97254543e-02],
              [  6.33529504e-02,   3.68623418e-01,   4.17968611e-02],
              [  4.69884086e-02,   3.42597906e-01,   2.88899440e-02],
              [  5.47264032e-02,   2.97254271e-01,   1.76811919e-02],
              [  1.10568321e-01,   2.49018364e-01,   1.23648769e-02],
              [  3.16047750e-01,   1.92214636e-01,   9.23715918e-03],
              [  4.63732048e-01,   1.36041628e-01,   7.14001730e-03],
              [  4.48956553e-01,   8.56357390e-02,   5.22250927e-03],
              [  3.92741251e-01,   4.72477943e-02,   4.13481586e-03],
              [  3.39257587e-01,   2.92610314e-02,   3.67846684e-03],
              [  2.75367075e-01,   1.97114890e-02,   3.44253279e-03],
              [  2.25901097e-01,   1.50202034e-02,   3.75175932e-03],
              [  1.70001447e-01,   1.07651281e-02,   4.32662725e-03],
              [  1.24233615e-01,   8.13651969e-03,   3.94020397e-03],
              [  6.15431646e-02,   4.45019662e-03,   2.36790418e-03],
              [  2.68394758e-02,   2.50556947e-03,   1.51597351e-03],
              [  8.72196807e-03,   1.42557387e-03,   1.15350991e-03],
              [  4.45849474e-03,   1.11739142e-03,   1.08295885e-03]],

             [[  2.11607271e-02,   3.97514624e-03,   3.36355321e-02],
              [  6.58065509e-02,   1.87379214e-02,  -1.68719239e-01],
              [  5.23257612e-02,   1.40056359e-01,  -3.60944098e-01],
              [  1.21702846e-02,   1.48251775e-01,   1.36435643e-03],
              [ -1.66522869e-03,   1.57434861e-01,   1.89145790e-01],
              [ -3.54518165e-03,   1.81238112e-01,   1.98100365e-01],
              [  1.26488078e-03,   2.01963723e-01,   3.09845263e-01],
              [  6.76357744e-03,   1.82340830e-01,   1.69010494e-02],
              [  1.08160084e-02,   1.95275361e-01,  -4.42127876e-02],
              [  1.77546803e-02,   1.99101961e-01,  -4.88323867e-02],
              [  3.94834974e-02,   7.88388513e-02,  -2.04413285e-01],
              [  7.91873974e-02,  -1.35136309e-02,  -2.50798473e-01],
              [  1.43595474e-01,  -2.00750395e-01,  -3.25529484e-01],
              [  2.54118577e-01,  -2.60199735e-01,  -3.58804848e-01],
              [  3.30058211e-01,  -3.00226874e-01,  -3.50927939e-01],
              [  3.00249539e-01,  -1.66333262e-01,  -2.92969195e-01],
              [  3.50757260e-01,  -2.47372751e-02,  -2.19474931e-01],
              [  5.37614304e-01,   1.45752304e-01,  -1.68764486e-01],
              [  2.52782877e-01,   3.03034064e-01,  -1.25105120e-01],
              [  3.64320607e-02,   3.36658828e-01,  -9.80716422e-02],
              [ -2.22615171e-02,   3.63722414e-01,  -6.81971686e-02],
              [ -5.73250062e-02,   2.72952249e-01,  -5.39662273e-02],
              [ -1.01881734e-01,   1.86453596e-01,  -4.67808083e-02],
              [ -2.25573456e-01,   1.47067621e-01,  -3.44974236e-02],
              [ -2.18241801e-01,   1.14693484e-01,  -3.44323026e-02],
              [ -2.48201853e-01,   8.92920044e-02,  -3.27452207e-02],
              [ -2.17673160e-01,   6.96986363e-02,  -2.62415462e-02],
              [ -2.11490225e-03,   1.35093302e-02,  -1.47510968e-02],
              [  2.36049596e-02,   5.01753615e-04,  -8.08119412e-03],
              [  9.85781871e-03,  -1.52472957e-03,  -1.27583471e-03],
              [  1.10290646e-02,  -1.59478598e-03,   1.35733044e-03]],

             [[ -4.30998898e-03,  -1.82230865e-02,  -5.24211509e-02],
              [ -1.17780326e-02,   6.71450785e-03,  -1.08185777e-01],
              [  1.17721993e-01,  -1.07513802e-02,  -7.29654257e-01],
              [  1.30354079e-01,  -2.38391224e-02,  -4.33897709e-01],
              [  1.13375430e-01,  -3.15714367e-02,  -3.33222237e-02],
              [  9.10761104e-02,   1.10569659e-02,   5.93743415e-02],
              [  7.30816499e-02,  -5.21152354e-03,   1.46373551e-02],
              [  8.01199207e-02,  -6.53642325e-02,   2.86332344e-01],
              [  9.86961573e-02,  -3.28268712e-01,   1.36735978e-01],
              [  8.77684132e-02,  -3.63574164e-01,   9.67582257e-02],
              [  8.34813361e-02,  -4.77112182e-01,   7.37073703e-02],
              [  8.54137498e-02,  -3.58932479e-01,   3.50320919e-02],
              [  1.05670766e-01,  -6.93038843e-02,   7.31417735e-02],
              [  9.83061406e-02,   3.65873451e-02,   1.04116166e-01],
              [ -1.19599680e-02,   2.87731522e-01,   1.68140808e-01],
              [ -8.50583052e-02,   2.30757854e-01,   1.69938727e-01],
              [ -1.72075810e-01,   2.01765320e-01,   1.59201304e-01],
              [ -3.86518874e-01,   1.60302347e-01,   1.36703323e-01],
              [ -2.13854982e-01,   1.46805573e-01,   1.02229885e-01],
              [  4.13708718e-01,   1.63902086e-01,   8.60029303e-02],
              [  2.86282676e-01,   1.73177429e-01,   5.69248903e-02],
              [  8.20882578e-02,   1.86456483e-01,   4.62035288e-02],
              [ -9.94187412e-02,   1.66160446e-01,   3.92566870e-02],
              [ -2.15346951e-01,   1.38495677e-01,   2.51190869e-02],
              [ -3.31711064e-01,   1.21089092e-01,   2.01845363e-02],
              [ -3.71430024e-01,   9.69227859e-02,   1.06636472e-02],
              [ -2.94296990e-01,   6.64771564e-02,   2.03421395e-03],
              [  5.85571209e-03,   7.12480444e-03,   5.31723103e-03],
              [  2.51401055e-02,  -4.90804389e-04,   2.94568465e-03],
              [  7.34123264e-04,  -2.40243345e-03,  -1.71277232e-04],
              [ -6.73403618e-03,  -4.86817463e-03,  -1.89913586e-04]],

             [[ -1.19324508e-02,  -1.86457839e-02,  -3.44308523e-01],
              [  5.84755746e-02,  -2.98254133e-02,  -7.72059187e-01],
              [  1.63704463e-01,   1.64226010e-01,  -1.17757698e-01],
              [  1.11181738e-01,   3.08204544e-01,   3.30840849e-01],
              [  7.99492367e-02,   3.37925407e-01,   1.31371615e-01],
              [  6.64239179e-02,   3.68126273e-01,  -8.08610340e-02],
              [  5.42482382e-02,   4.35091065e-01,  -1.28528914e-01],
              [  7.53571937e-02,   3.93422166e-01,  -1.66897123e-01],
              [  1.00163477e-01,   1.03240466e-01,  -1.65406564e-02],
              [  1.03719045e-01,  -8.84653110e-02,   4.90590224e-02],
              [  1.24735946e-01,  -2.67629473e-01,   1.13812596e-01],
              [  1.73972214e-01,  -1.14694333e-01,   1.32161149e-01],
              [  2.71270408e-01,  -3.33007666e-02,   1.66311767e-01],
              [  3.72499233e-01,   9.02338283e-02,   1.20499902e-01],
              [  3.60554816e-01,   1.38784492e-01,   4.80218565e-02],
              [  2.67927534e-01,   2.41232857e-02,  -1.48784109e-02],
              [  1.38881268e-01,  -2.45955816e-02,  -5.10096217e-02],
              [ -2.44711832e-01,  -1.59925001e-01,  -5.85282060e-02],
              [ -4.39806149e-01,  -1.39303988e-01,  -4.89178301e-02],
              [ -1.14290968e-01,  -1.60932332e-01,  -4.23725830e-02],
              [ -5.72589229e-02,  -2.13667789e-01,  -3.45263813e-02],
              [ -2.15919229e-02,  -1.06509578e-01,  -3.40349811e-02],
              [  2.23340732e-02,  -9.08275863e-02,  -2.89247816e-02],
              [  9.68602739e-02,  -7.17512404e-02,  -2.14958602e-02],
              [  1.67160263e-01,  -6.38021564e-02,  -2.26664299e-02],
              [  2.89123135e-01,  -5.00044942e-02,  -2.80159559e-02],
              [  1.75739116e-01,  -4.37040979e-02,  -2.13648110e-02],
              [ -9.12802458e-02,   3.58541615e-03,  -9.25634900e-03],
              [ -7.70262616e-02,   2.59530512e-03,  -1.12436158e-02],
              [ -2.60063612e-02,  -8.97573843e-03,  -1.23619005e-02],
              [ -2.14097933e-02,  -1.35781591e-02,  -9.47085267e-03]],

             [[  4.69062365e-02,   1.46058264e-02,   2.38963948e-03],
              [ -4.92119685e-02,   4.45045153e-02,  -5.24681309e-02],
              [ -3.65802562e-01,  -1.27073408e-01,   5.25900640e-03],
              [ -2.60854027e-01,  -1.73301391e-01,   1.67759014e-01],
              [ -2.28839265e-01,  -1.10445689e-01,   3.59374198e-01],
              [ -2.05366762e-01,  -8.29045423e-02,  -2.64084269e-02],
              [ -2.07900346e-01,   1.58095747e-01,   3.20353250e-01],
              [ -2.42534911e-01,   2.25635891e-01,  -3.92045218e-02],
              [ -2.60814036e-01,   3.89624957e-02,  -1.17189448e-01],
              [ -2.20102720e-01,  -1.95336276e-01,  -5.89249261e-01],
              [ -1.97323949e-01,   1.43941100e-01,  -2.20385615e-01],
              [ -1.73789861e-01,  -2.77000933e-02,  -2.18642230e-01],
              [ -6.39833896e-02,  -2.41823321e-02,  -3.93270525e-02],
              [  1.51239662e-01,   5.40759848e-01,   1.28825456e-01],
              [  1.81201570e-01,  -1.48188585e-01,   1.97838446e-01],
              [  2.05204543e-01,  -9.16011287e-02,   2.38043899e-01],
              [  1.44409388e-01,  -3.08820126e-01,   2.32530259e-01],
              [ -1.93125114e-01,  -1.34063855e-01,   2.10271779e-01],
              [ -2.88886894e-01,  -9.02345458e-02,   1.60208772e-01],
              [ -4.40030929e-02,  -1.79961534e-01,   1.30892953e-01],
              [  2.23544485e-01,   3.98726553e-03,   8.74119198e-02],
              [  8.93592969e-02,   1.69347554e-01,   7.00972249e-02],
              [  8.70116026e-02,   2.63043771e-01,   5.60500938e-02],
              [  1.31357412e-01,   2.56484668e-01,   1.92928345e-02],
              [ -7.92699180e-02,   2.58857148e-01,   2.69514052e-03],
              [ -2.07058716e-01,   2.23692062e-01,  -4.87514425e-02],
              [ -3.26243976e-02,   1.82581738e-01,  -5.46486156e-02],
              [  1.17865487e-01,   5.12088425e-02,   1.40240872e-02],
              [  1.14751035e-01,   1.99905862e-02,   1.84244894e-02],
              [  5.78874158e-02,   2.32697730e-02,   2.16581407e-02],
              [  4.95503699e-02,   2.53662331e-02,   1.61881799e-02]],

             [[ -7.84113333e-02,  -2.52182324e-02,   3.67603194e-01],
              [ -2.28932415e-01,  -1.13101498e-01,   2.00936645e-01],
              [  1.21979657e-02,  -2.62426956e-01,  -3.74227028e-01],
              [  2.27896960e-01,  -1.25967427e-01,   6.05949573e-01],
              [  1.86032668e-01,  -6.12718635e-02,  -5.68717553e-03],
              [  1.23100741e-01,   4.16798278e-02,   5.59349243e-02],
              [  1.02362152e-01,   2.52577546e-01,  -3.79023225e-01],
              [  6.74835676e-02,   1.78621178e-01,  -8.08957449e-02],
              [  4.78618426e-02,  -2.31399800e-01,   1.89944986e-01],
              [ -5.25479367e-03,  -4.44321143e-01,   1.27791380e-01],
              [ -9.49412490e-02,   1.73805971e-02,  -1.10728963e-01],
              [ -1.40795946e-01,   1.83610630e-01,  -2.21368880e-01],
              [ -2.16925234e-01,   2.53559067e-01,   6.58359798e-03],
              [ -8.31939370e-02,   2.99437566e-02,   6.07388819e-02],
              [ -9.09952451e-02,  -2.78424436e-01,   8.64610555e-02],
              [ -2.92437845e-02,  -3.06350797e-01,   5.43430334e-02],
              [  1.56803513e-01,   1.25473875e-01,   3.40615952e-02],
              [  3.40152218e-01,   1.32609274e-01,   2.36016225e-02],
              [ -3.89480156e-01,   3.13761779e-01,   1.25913880e-02],
              [ -2.49752286e-01,   1.59495291e-01,   4.16379139e-03],
              [  3.25379579e-01,   9.28982986e-03,  -1.75488559e-02],
              [  2.05031638e-01,  -2.01463204e-01,  -2.39791577e-02],
              [ -3.05970339e-04,  -2.04094293e-01,  -2.53565197e-02],
              [  7.55053981e-02,  -1.27857959e-01,  -4.96041654e-02],
              [ -3.97188747e-02,  -1.06234251e-01,  -6.28972363e-02],
              [ -8.83691855e-02,  -7.48895678e-02,  -1.07591230e-01],
              [ -2.69457979e-02,  -2.70504315e-02,  -1.07320477e-01],
              [  5.27232144e-02,  -5.50948296e-02,  -3.36110102e-02],
              [ -2.69092500e-01,  -4.22952481e-02,  -2.30310793e-02],
              [ -3.11989365e-01,  -2.17399048e-02,  -2.29777947e-02],
              [ -1.99197028e-01,  -1.70083239e-02,  -3.08939354e-02]]]), shape: 'SpectralShape | None' = None) -> 'MultiSpectralDistributions'
  - function-name: colour.recovery.mallett2019.spectral_primary_decomposition_Mallett2019
    signature: '(colourspace: ''RGB_Colourspace'', cmfs: ''MultiSpectralDistributions
      | None'' = None, illuminant: ''SpectralDistribution | None'' = None, metric:
      ''Callable'' = <function norm at 0x7b9367bc6ff0>, metric_args: ''tuple'' = (),
      optimisation_kwargs: ''dict | None'' = None) -> ''MultiSpectralDistributions'''
  - function-name: colour.recovery.mallett2019.RGB_to_sd_Mallett2019
    signature: |-
      (RGB: 'ArrayLike', basis_functions: 'MultiSpectralDistributions' = MultiSpectralDistributions([[  3.80000000e+02,   3.27457414e-01,   3.31861713e-01,
                                     3.40680792e-01],
                                  [  3.85000000e+02,   3.23750578e-01,   3.29688188e-01,
                                     3.46561187e-01],
                                  [  3.90000000e+02,   3.13439461e-01,   3.27860022e-01,
                                     3.58700493e-01],
                                  [  3.95000000e+02,   2.88879383e-01,   3.19173580e-01,
                                     3.91947027e-01],
                                  [  4.00000000e+02,   2.39205681e-01,   2.94322584e-01,
                                     4.66471731e-01],
                                  [  4.05000000e+02,   1.89702037e-01,   2.58697065e-01,
                                     5.51600896e-01],
                                  [  4.10000000e+02,   1.21746068e-01,   1.88894319e-01,
                                     6.89359611e-01],
                                  [  4.15000000e+02,   7.45782707e-02,   1.25388382e-01,
                                     8.00033347e-01],
                                  [  4.20000000e+02,   4.44331586e-02,   7.86870603e-02,
                                     8.76879781e-01],
                                  [  4.25000000e+02,   2.89286321e-02,   5.31432709e-02,
                                     9.17928097e-01],
                                  [  4.30000000e+02,   2.23166535e-02,   4.22881460e-02,
                                     9.35395201e-01],
                                  [  4.35000000e+02,   1.69113073e-02,   3.33183455e-02,
                                     9.49770347e-01],
                                  [  4.40000000e+02,   1.41811071e-02,   2.97559482e-02,
                                     9.56062945e-01],
                                  [  4.45000000e+02,   1.30531427e-02,   3.03312505e-02,
                                     9.56615607e-01],
                                  [  4.50000000e+02,   1.19861636e-02,   3.09885719e-02,
                                     9.57025265e-01],
                                  [  4.55000000e+02,   1.12887147e-02,   3.16863552e-02,
                                     9.57024931e-01],
                                  [  4.60000000e+02,   1.09060665e-02,   3.46699615e-02,
                                     9.54423973e-01],
                                  [  4.65000000e+02,   1.04007135e-02,   3.45519574e-02,
                                     9.55047329e-01],
                                  [  4.70000000e+02,   1.06373603e-02,   4.06848062e-02,
                                     9.48677833e-01],
                                  [  4.75000000e+02,   1.09076625e-02,   5.44600374e-02,
                                     9.34632300e-01],
                                  [  4.80000000e+02,   1.10327124e-02,   8.09052874e-02,
                                     9.08062000e-01],
                                  [  4.85000000e+02,   1.13106566e-02,   1.46348303e-01,
                                     8.42341039e-01],
                                  [  4.90000000e+02,   1.11546421e-02,   3.79679643e-01,
                                     6.09165715e-01],
                                  [  4.95000000e+02,   1.01487704e-02,   7.66744269e-01,
                                     2.23106961e-01],
                                  [  5.00000000e+02,   8.91858212e-03,   8.76214748e-01,
                                     1.14866670e-01],
                                  [  5.05000000e+02,   7.68557634e-03,   9.18491656e-01,
                                     7.38227679e-02],
                                  [  5.10000000e+02,   6.70570828e-03,   9.40655563e-01,
                                     5.26387288e-02],
                                  [  5.15000000e+02,   5.99580599e-03,   9.53731885e-01,
                                     4.02723090e-02],
                                  [  5.20000000e+02,   5.53725664e-03,   9.61643280e-01,
                                     3.28194627e-02],
                                  [  5.25000000e+02,   5.19378424e-03,   9.67200020e-01,
                                     2.76061959e-02],
                                  [  5.30000000e+02,   5.02536227e-03,   9.70989746e-01,
                                     2.39848911e-02],
                                  [  5.35000000e+02,   5.13636277e-03,   9.72852304e-01,
                                     2.20113334e-02],
                                  [  5.40000000e+02,   5.43320026e-03,   9.73116594e-01,
                                     2.14502053e-02],
                                  [  5.45000000e+02,   5.81998590e-03,   9.73351069e-01,
                                     2.08289445e-02],
                                  [  5.50000000e+02,   6.40057277e-03,   9.73351116e-01,
                                     2.02483114e-02],
                                  [  5.55000000e+02,   7.44952868e-03,   9.72261080e-01,
                                     2.02893915e-02],
                                  [  5.60000000e+02,   8.58363582e-03,   9.73351022e-01,
                                     1.80653423e-02],
                                  [  5.65000000e+02,   1.03957625e-02,   9.73148495e-01,
                                     1.64557422e-02],
                                  [  5.70000000e+02,   1.35654335e-02,   9.71061306e-01,
                                     1.53732601e-02],
                                  [  5.75000000e+02,   1.93845158e-02,   9.66371306e-01,
                                     1.42441785e-02],
                                  [  5.80000000e+02,   3.20840712e-02,   9.54941968e-01,
                                     1.29739616e-02],
                                  [  5.85000000e+02,   7.43560378e-02,   9.13578990e-01,
                                     1.20649741e-02],
                                  [  5.90000000e+02,   6.24393724e-01,   3.64348804e-01,
                                     1.12574782e-02],
                                  [  5.95000000e+02,   9.18310033e-01,   7.15072425e-02,
                                     1.01827247e-02],
                                  [  6.00000000e+02,   9.49253030e-01,   4.12304345e-02,
                                     9.51653539e-03],
                                  [  6.05000000e+02,   9.58187833e-01,   3.24238742e-02,
                                     9.38829273e-03],
                                  [  6.10000000e+02,   9.58187751e-01,   3.19246298e-02,
                                     9.88761909e-03],
                                  [  6.15000000e+02,   9.58187625e-01,   3.12760332e-02,
                                     1.05363420e-02],
                                  [  6.20000000e+02,   9.55679061e-01,   3.26303704e-02,
                                     1.16905688e-02],
                                  [  6.25000000e+02,   9.58006155e-01,   2.95308721e-02,
                                     1.24629729e-02],
                                  [  6.30000000e+02,   9.54101573e-01,   3.15617612e-02,
                                     1.43366652e-02],
                                  [  6.35000000e+02,   9.47607606e-01,   3.56742183e-02,
                                     1.67181753e-02],
                                  [  6.40000000e+02,   9.38681328e-01,   4.14030054e-02,
                                     1.99156661e-02],
                                  [  6.45000000e+02,   9.24466683e-01,   5.06042604e-02,
                                     2.49290562e-02],
                                  [  6.50000000e+02,   9.04606025e-01,   6.34343004e-02,
                                     3.19596736e-02],
                                  [  6.55000000e+02,   8.80412199e-01,   7.89182453e-02,
                                     4.06695541e-02],
                                  [  6.60000000e+02,   8.47787873e-01,   9.95427427e-02,
                                     5.26693824e-02],
                                  [  6.65000000e+02,   8.05779127e-01,   1.25595760e-01,
                                     6.86251105e-02],
                                  [  6.70000000e+02,   7.52531854e-01,   1.57590910e-01,
                                     8.98772323e-02],
                                  [  6.75000000e+02,   6.86439397e-01,   1.95398239e-01,
                                     1.18162359e-01],
                                  [  6.80000000e+02,   6.18694571e-01,   2.31474475e-01,
                                     1.49830947e-01],
                                  [  6.85000000e+02,   5.40264444e-01,   2.68852136e-01,
                                     1.90883409e-01],
                                  [  6.90000000e+02,   4.72964416e-01,   2.96029164e-01,
                                     2.31006403e-01],
                                  [  6.95000000e+02,   4.32701597e-01,   3.09754994e-01,
                                     2.57543385e-01],
                                  [  7.00000000e+02,   4.05358046e-01,   3.17815883e-01,
                                     2.76826039e-01],
                                  [  7.05000000e+02,   3.85491835e-01,   3.22990347e-01,
                                     2.91517773e-01],
                                  [  7.10000000e+02,   3.70983585e-01,   3.26353848e-01,
                                     3.02662506e-01],
                                  [  7.15000000e+02,   3.57608702e-01,   3.29143902e-01,
                                     3.13247301e-01],
                                  [  7.20000000e+02,   3.48712800e-01,   3.30808727e-01,
                                     3.20478325e-01],
                                  [  7.25000000e+02,   3.44880119e-01,   3.31482690e-01,
                                     3.23636995e-01],
                                  [  7.30000000e+02,   3.41917877e-01,   3.31984550e-01,
                                     3.26097309e-01],
                                  [  7.35000000e+02,   3.39531093e-01,   3.32341173e-01,
                                     3.28127369e-01],
                                  [  7.40000000e+02,   3.37169504e-01,   3.32912009e-01,
                                     3.29917976e-01],
                                  [  7.45000000e+02,   3.36172019e-01,   3.32919280e-01,
                                     3.30907901e-01],
                                  [  7.50000000e+02,   3.35167443e-01,   3.33027673e-01,
                                     3.31803633e-01],
                                  [  7.55000000e+02,   3.34421625e-01,   3.33179705e-01,
                                     3.32396627e-01],
                                  [  7.60000000e+02,   3.34008760e-01,   3.33247031e-01,
                                     3.32740781e-01],
                                  [  7.65000000e+02,   3.33915793e-01,   3.33259349e-01,
                                     3.32820857e-01],
                                  [  7.70000000e+02,   3.33818455e-01,   3.33275050e-01,
                                     3.32901731e-01],
                                  [  7.75000000e+02,   3.33672775e-01,   3.33294328e-01,
                                     3.33025967e-01],
                                  [  7.80000000e+02,   3.33569513e-01,   3.33309425e-01,
                                     3.33111083e-01]],
                                 ['red', 'green', 'blue'],
                                 SpragueInterpolator,
                                 {},
                                 Extrapolator,
                                 {'method': 'Constant', 'left': None, 'right': None})) -> 'SpectralDistribution'
  - function-name: colour.recovery.meng2015.XYZ_to_sd_Meng2015
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, optimisation_kwargs:
      ''dict | None'' = None) -> ''SpectralDistribution'''
  - function-name: colour.recovery.otsu2018.XYZ_to_sd_Otsu2018
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, dataset: ''Dataset_Otsu2018''
      = <colour.recovery.otsu2018.Dataset_Otsu2018 object at 0x7b9348d2bcb0>, clip:
      ''bool'' = True) -> ''SpectralDistribution'''
  - function-name: colour.recovery.smits1999.XYZ_to_RGB_Smits1999
    signature: '(XYZ: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.recovery.smits1999.RGB_to_sd_Smits1999
    signature: '(RGB: ''ArrayLike'') -> ''SpectralDistribution'''
  - function-name: colour.temperature.xy_to_CCT_CIE_D
    signature: '(xy: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_xy_CIE_D
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.xy_to_CCT_Hernandez1999
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_xy_Hernandez1999
    signature: '(CCT: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.temperature.xy_to_CCT_Kang2002
    signature: '(xy: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_xy_Kang2002
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.uv_to_CCT_Krystek1985
    signature: '(uv: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_uv_Krystek1985
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.xy_to_CCT_McCamy1992
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_xy_McCamy1992
    signature: '(CCT: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.temperature.uv_to_CCT_Planck1900
    signature: '(uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, optimisation_kwargs: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_uv_Planck1900
    signature: '(CCT: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.uv_to_CCT_Ohno2013
    signature: '(uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, start: ''float | None'' = None, end: ''float | None'' = None, spacing:
      ''float | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_uv_Ohno2013
    signature: '(CCT_D_uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_XYZ_Ohno2013
    signature: '(CCT_D_uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None)'
  - function-name: colour.temperature.XYZ_to_CCT_Ohno2013
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, start: ''float | None'' = None, end: ''float | None'' = None, spacing:
      ''float | None'' = None)'
  - function-name: colour.temperature.CCT_to_mired
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.mired_to_CCT
    signature: '(mired: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.uv_to_CCT_Robertson1968
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_uv_Robertson1968
    signature: '(CCT_D_uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.uv_to_CCT
    signature: '(uv: ''ArrayLike'', method: "Literal[''Krystek 1985'', ''Ohno 2013'',
      ''Planck 1900'', ''Robertson 1968''] | str" = ''Ohno 2013'', **kwargs: ''Any'')
      -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_uv
    signature: '(CCT_D_uv: ''ArrayLike'', method: "Literal[''Krystek 1985'', ''Ohno
      2013'', ''Planck 1900'', ''Robertson 1968''] | str" = ''Ohno 2013'', **kwargs:
      ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.xy_to_CCT
    signature: '(xy: ''ArrayLike'', method: "Literal[''CIE Illuminant D Series'',
      ''Kang 2002'', ''Hernandez 1999'', ''McCamy 1992''] | str" = ''CIE Illuminant
      D Series'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.CCT_to_xy
    signature: '(CCT: ''ArrayLike'', method: "Literal[''CIE Illuminant D Series'',
      ''Kang 2002'', ''Hernandez 1999'', ''McCamy 1992''] | str" = ''CIE Illuminant
      D Series'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.cie_d.xy_to_CCT_CIE_D
    signature: '(xy: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.cie_d.CCT_to_xy_CIE_D
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.hernandez1999.xy_to_CCT_Hernandez1999
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.hernandez1999.CCT_to_xy_Hernandez1999
    signature: '(CCT: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.temperature.kang2002.xy_to_CCT_Kang2002
    signature: '(xy: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.kang2002.CCT_to_xy_Kang2002
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.krystek1985.uv_to_CCT_Krystek1985
    signature: '(uv: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None) ->
      ''NDArrayFloat'''
  - function-name: colour.temperature.krystek1985.CCT_to_uv_Krystek1985
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.mccamy1992.xy_to_CCT_McCamy1992
    signature: '(xy: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.mccamy1992.CCT_to_xy_McCamy1992
    signature: '(CCT: ''ArrayLike'', optimisation_kwargs: ''dict | None'' = None)
      -> ''NDArrayFloat'''
  - function-name: colour.temperature.ohno2013.planckian_table
    signature: '(cmfs: ''MultiSpectralDistributions'', start: ''float'', end: ''float'',
      spacing: ''float'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.ohno2013.uv_to_CCT_Ohno2013
    signature: '(uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, start: ''float | None'' = None, end: ''float | None'' = None, spacing:
      ''float | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.ohno2013.CCT_to_uv_Ohno2013
    signature: '(CCT_D_uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.ohno2013.XYZ_to_CCT_Ohno2013
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, start: ''float | None'' = None, end: ''float | None'' = None, spacing:
      ''float | None'' = None)'
  - function-name: colour.temperature.ohno2013.CCT_to_XYZ_Ohno2013
    signature: '(CCT_D_uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None''
      = None)'
  - function-name: colour.temperature.planck1900.uv_to_CCT_Planck1900
    signature: '(uv: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, optimisation_kwargs: ''dict | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.planck1900.CCT_to_uv_Planck1900
    signature: '(CCT: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None) -> ''NDArrayFloat'''
  - function-name: colour.temperature.robertson1968.mired_to_CCT
    signature: '(mired: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.robertson1968.CCT_to_mired
    signature: '(CCT: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.robertson1968.uv_to_CCT_Robertson1968
    signature: '(uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.temperature.robertson1968.CCT_to_uv_Robertson1968
    signature: '(CCT_D_uv: ''ArrayLike'') -> ''NDArrayFloat'''
  - function-name: colour.utilities.message_box
    signature: '(message: ''str'', width: ''int'' = 79, padding: ''int'' = 3, print_callable:
      ''Callable'' = <built-in function print>)'
  - function-name: colour.utilities.show_warning
    signature: '(message: ''Warning | str'', category: ''Type[Warning]'', filename:
      ''str'', lineno: ''int'', file: ''TextIO | None'' = None, line: ''str | None''
      = None) -> ''None'''
  - function-name: colour.utilities.warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.runtime_warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.usage_warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.filter_warnings
    signature: '(colour_runtime_warnings: ''bool | LiteralWarning | None'' = None,
      colour_usage_warnings: ''bool | LiteralWarning | None'' = None, colour_warnings:
      ''bool | LiteralWarning | None'' = None, python_warnings: ''bool | LiteralWarning
      | None'' = None)'
  - function-name: colour.utilities.as_bool
    signature: '(a: ''str'') -> ''bool'''
  - function-name: colour.utilities.suppress_warnings
    signature: '(colour_runtime_warnings: ''bool | LiteralWarning | None'' = None,
      colour_usage_warnings: ''bool | LiteralWarning | None'' = None, colour_warnings:
      ''bool | LiteralWarning | None'' = None, python_warnings: ''bool | LiteralWarning
      | None'' = None) -> ''Generator'''
  - function-name: colour.utilities.numpy_print_options
    signature: '(*args: ''Any'', **kwargs: ''Any'') -> ''Generator'''
  - function-name: colour.utilities.describe_environment
    signature: '(runtime_packages: ''bool'' = True, development_packages: ''bool''
      = False, extras_packages: ''bool'' = False, print_environment: ''bool'' = True,
      **kwargs: ''Any'') -> ''defaultdict'''
  - function-name: colour.utilities.multiline_str
    signature: '(object_: ''Any'', attributes: ''List[dict]'', header_underline: ''str''
      = ''='', section_underline: ''str'' = ''-'', separator: ''str'' = '' : '') ->
      ''str'''
  - function-name: colour.utilities.multiline_repr
    signature: '(object_: ''Any'', attributes: ''List[dict]'', reduce_array_representation:
      ''bool'' = True) -> ''str'''
  - function-name: colour.utilities.is_ctlrender_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_matplotlib_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_networkx_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_opencolorio_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_openimageio_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_pandas_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_pydot_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_tqdm_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_trimesh_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.is_xxhash_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.required
    signature: '(*requirements: "Literal[''ctlrender'', ''Matplotlib'', ''NetworkX'',
      ''OpenColorIO'', ''OpenImageIO'', ''Pandas'', ''Pydot'', ''tqdm'', ''trimesh'',
      ''xxhash'']") -> ''Callable'''
  - function-name: colour.utilities.is_caching_enabled
    signature: () -> 'bool'
  - function-name: colour.utilities.set_caching_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.utilities.handle_numpy_errors
    signature: '(**kwargs: ''Any'') -> ''Callable'''
  - function-name: colour.utilities.ignore_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.raise_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.print_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.warn_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.ignore_python_warnings
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.attest
    signature: '(condition: ''bool | DTypeBoolean'', message: ''str'' = '''')'
  - function-name: colour.utilities.batch
    signature: '(sequence: ''Sequence'', k: ''int | Literal[3]'' = 3) -> ''Generator'''
  - function-name: colour.utilities.multiprocessing_pool
    signature: '(*args: ''Any'', **kwargs: ''Any'') -> ''Generator'''
  - function-name: colour.utilities.is_iterable
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.is_numeric
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.is_integer
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.is_sibling
    signature: '(element: ''Any'', mapping: ''Mapping'') -> ''bool'''
  - function-name: colour.utilities.filter_kwargs
    signature: '(function: ''Callable'', **kwargs: ''Any'') -> ''dict'''
  - function-name: colour.utilities.filter_mapping
    signature: '(mapping: ''Mapping'', names: ''str | Sequence[str]'') -> ''dict'''
  - function-name: colour.utilities.first_item
    signature: '(a: ''Iterable'') -> ''Any'''
  - function-name: colour.utilities.copy_definition
    signature: '(definition: ''Callable'', name: ''str | None'' = None) -> ''Callable'''
  - function-name: colour.utilities.optional
    signature: '(value: ''T | None'', default: ''T'') -> ''T'''
  - function-name: colour.utilities.slugify
    signature: '(object_: ''Any'', allow_unicode: ''bool'' = False) -> ''str'''
  - function-name: colour.utilities.int_digest
    signature: (obj, /)
  - function-name: colour.utilities.as_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DType] | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.as_int
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''NDArrayInt'''
  - function-name: colour.utilities.as_float
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.as_int_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''NDArrayInt'''
  - function-name: colour.utilities.as_float_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.as_int_scalar
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''int'''
  - function-name: colour.utilities.as_float_scalar
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''float'''
  - function-name: colour.utilities.set_default_int_dtype
    signature: '(dtype: ''Type[DTypeInt]'' = <class ''numpy.int64''>) -> ''None'''
  - function-name: colour.utilities.set_default_float_dtype
    signature: '(dtype: ''Type[DTypeFloat]'' = <class ''numpy.float64''>) -> ''None'''
  - function-name: colour.utilities.get_domain_range_scale
    signature: () -> "Literal['ignore', 'reference', '1', '100'] | str"
  - function-name: colour.utilities.set_domain_range_scale
    signature: '(scale: "Literal[''ignore'', ''reference'', ''Ignore'', ''Reference'',
      ''1'', ''100''] | str" = ''reference'')'
  - function-name: colour.utilities.to_domain_1
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.to_domain_10
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 10, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.to_domain_100
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.to_domain_degrees
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 360, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.to_domain_int
    signature: '(a: ''ArrayLike'', bit_depth: ''ArrayLike'' = 8, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.from_range_1
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.from_range_10
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 10, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.from_range_100
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.from_range_degrees
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 360, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.from_range_int
    signature: '(a: ''ArrayLike'', bit_depth: ''ArrayLike'' = 8, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.is_ndarray_copy_enabled
    signature: () -> 'bool'
  - function-name: colour.utilities.set_ndarray_copy_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.utilities.ndarray_copy
    signature: '(a: ''NDArray'') -> ''NDArray'''
  - function-name: colour.utilities.closest_indexes
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.closest
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.interval
    signature: '(distribution: ''ArrayLike'', unique: ''bool'' = True) -> ''NDArray'''
  - function-name: colour.utilities.is_uniform
    signature: '(distribution: ''ArrayLike'') -> ''bool'''
  - function-name: colour.utilities.in_array
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', tolerance: ''Real'' = 2.2204460492503131e-16)
      -> ''NDArray'''
  - function-name: colour.utilities.tstack
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeBoolean] | Type[DTypeReal] |
      None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.tsplit
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeBoolean] | Type[DTypeReal] |
      None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.row_as_diagonal
    signature: '(a: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.orient
    signature: '(a: ''ArrayLike'', orientation: "Literal[''Ignore'', ''Flip'', ''Flop'',
      ''90 CW'', ''90 CCW'', ''180''] | str" = ''Ignore'') -> ''NDArray'''
  - function-name: colour.utilities.centroid
    signature: '(a: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.fill_nan
    signature: '(a: ''ArrayLike'', method: "Literal[''Interpolation'', ''Constant'']
      | str" = ''Interpolation'', default: ''Real'' = 0) -> ''NDArray'''
  - function-name: colour.utilities.has_only_nan
    signature: '(a: ''ArrayLike'') -> ''bool'''
  - function-name: colour.utilities.ndarray_write
    signature: '(a: ''ArrayLike'') -> ''Generator'''
  - function-name: colour.utilities.zeros
    signature: '(shape: ''int | Tuple[int, ...]'', dtype: ''Type[DTypeReal] | None''
      = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.ones
    signature: '(shape: ''int | Tuple[int, ...]'', dtype: ''Type[DTypeReal] | None''
      = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.full
    signature: '(shape: ''int | Tuple[int, ...]'', fill_value: ''Real'', dtype: ''Type[DTypeReal]
      | None'' = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.index_along_last_axis
    signature: '(a: ''ArrayLike'', indexes: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.format_array_as_row
    signature: '(a: ''ArrayLike'', decimals: ''int'' = 7, separator: ''str'' = ''
      '') -> ''str'''
  - function-name: colour.utilities.metric_mse
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', axis: ''int | Tuple[int] | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.metric_psnr
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', max_a: ''Real'' = 1, axis: ''int
      | Tuple[int] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.array.as_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DType] | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.as_int
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''NDArrayInt'''
  - function-name: colour.utilities.array.as_float
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.array.as_int_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''NDArrayInt'''
  - function-name: colour.utilities.array.as_float_array
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.array.as_int_scalar
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeInt] | None'' = None) -> ''int'''
  - function-name: colour.utilities.array.as_float_scalar
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeFloat] | None'' = None) -> ''float'''
  - function-name: colour.utilities.array.set_default_int_dtype
    signature: '(dtype: ''Type[DTypeInt]'' = <class ''numpy.int64''>) -> ''None'''
  - function-name: colour.utilities.array.set_default_float_dtype
    signature: '(dtype: ''Type[DTypeFloat]'' = <class ''numpy.float64''>) -> ''None'''
  - function-name: colour.utilities.array.get_domain_range_scale
    signature: () -> "Literal['ignore', 'reference', '1', '100'] | str"
  - function-name: colour.utilities.array.set_domain_range_scale
    signature: '(scale: "Literal[''ignore'', ''reference'', ''Ignore'', ''Reference'',
      ''1'', ''100''] | str" = ''reference'')'
  - function-name: colour.utilities.array.to_domain_1
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.to_domain_10
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 10, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.to_domain_100
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.to_domain_degrees
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 360, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.to_domain_int
    signature: '(a: ''ArrayLike'', bit_depth: ''ArrayLike'' = 8, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.from_range_1
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.from_range_10
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 10, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.from_range_100
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 100, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.from_range_degrees
    signature: '(a: ''ArrayLike'', scale_factor: ''ArrayLike'' = 360, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.from_range_int
    signature: '(a: ''ArrayLike'', bit_depth: ''ArrayLike'' = 8, dtype: ''Type[DTypeFloat]
      | None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.is_ndarray_copy_enabled
    signature: () -> 'bool'
  - function-name: colour.utilities.array.set_ndarray_copy_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.utilities.array.ndarray_copy
    signature: '(a: ''NDArray'') -> ''NDArray'''
  - function-name: colour.utilities.array.closest_indexes
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.array.closest
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.array.interval
    signature: '(distribution: ''ArrayLike'', unique: ''bool'' = True) -> ''NDArray'''
  - function-name: colour.utilities.array.is_uniform
    signature: '(distribution: ''ArrayLike'') -> ''bool'''
  - function-name: colour.utilities.array.in_array
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', tolerance: ''Real'' = 2.2204460492503131e-16)
      -> ''NDArray'''
  - function-name: colour.utilities.array.tstack
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeBoolean] | Type[DTypeReal] |
      None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.tsplit
    signature: '(a: ''ArrayLike'', dtype: ''Type[DTypeBoolean] | Type[DTypeReal] |
      None'' = None) -> ''NDArray'''
  - function-name: colour.utilities.array.row_as_diagonal
    signature: '(a: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.array.orient
    signature: '(a: ''ArrayLike'', orientation: "Literal[''Ignore'', ''Flip'', ''Flop'',
      ''90 CW'', ''90 CCW'', ''180''] | str" = ''Ignore'') -> ''NDArray'''
  - function-name: colour.utilities.array.centroid
    signature: '(a: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.array.fill_nan
    signature: '(a: ''ArrayLike'', method: "Literal[''Interpolation'', ''Constant'']
      | str" = ''Interpolation'', default: ''Real'' = 0) -> ''NDArray'''
  - function-name: colour.utilities.array.has_only_nan
    signature: '(a: ''ArrayLike'') -> ''bool'''
  - function-name: colour.utilities.array.ndarray_write
    signature: '(a: ''ArrayLike'') -> ''Generator'''
  - function-name: colour.utilities.array.zeros
    signature: '(shape: ''int | Tuple[int, ...]'', dtype: ''Type[DTypeReal] | None''
      = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.array.ones
    signature: '(shape: ''int | Tuple[int, ...]'', dtype: ''Type[DTypeReal] | None''
      = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.array.full
    signature: '(shape: ''int | Tuple[int, ...]'', fill_value: ''Real'', dtype: ''Type[DTypeReal]
      | None'' = None, order: "Literal[''C'', ''F'']" = ''C'') -> ''NDArray'''
  - function-name: colour.utilities.array.index_along_last_axis
    signature: '(a: ''ArrayLike'', indexes: ''ArrayLike'') -> ''NDArray'''
  - function-name: colour.utilities.array.format_array_as_row
    signature: '(a: ''ArrayLike'', decimals: ''int'' = 7, separator: ''str'' = ''
      '') -> ''str'''
  - function-name: colour.utilities.common.is_caching_enabled
    signature: () -> 'bool'
  - function-name: colour.utilities.common.set_caching_enable
    signature: '(enable: ''bool'')'
  - function-name: colour.utilities.common.handle_numpy_errors
    signature: '(**kwargs: ''Any'') -> ''Callable'''
  - function-name: colour.utilities.common.ignore_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.common.raise_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.common.print_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.common.warn_numpy_errors
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.common.ignore_python_warnings
    signature: '(function: ''Callable'') -> ''Callable'''
  - function-name: colour.utilities.common.attest
    signature: '(condition: ''bool | DTypeBoolean'', message: ''str'' = '''')'
  - function-name: colour.utilities.common.batch
    signature: '(sequence: ''Sequence'', k: ''int | Literal[3]'' = 3) -> ''Generator'''
  - function-name: colour.utilities.common.multiprocessing_pool
    signature: '(*args: ''Any'', **kwargs: ''Any'') -> ''Generator'''
  - function-name: colour.utilities.common.is_iterable
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.common.is_numeric
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.common.is_integer
    signature: '(a: ''Any'') -> ''bool'''
  - function-name: colour.utilities.common.is_sibling
    signature: '(element: ''Any'', mapping: ''Mapping'') -> ''bool'''
  - function-name: colour.utilities.common.filter_kwargs
    signature: '(function: ''Callable'', **kwargs: ''Any'') -> ''dict'''
  - function-name: colour.utilities.common.filter_mapping
    signature: '(mapping: ''Mapping'', names: ''str | Sequence[str]'') -> ''dict'''
  - function-name: colour.utilities.common.first_item
    signature: '(a: ''Iterable'') -> ''Any'''
  - function-name: colour.utilities.common.copy_definition
    signature: '(definition: ''Callable'', name: ''str | None'' = None) -> ''Callable'''
  - function-name: colour.utilities.common.optional
    signature: '(value: ''T | None'', default: ''T'') -> ''T'''
  - function-name: colour.utilities.common.slugify
    signature: '(object_: ''Any'', allow_unicode: ''bool'' = False) -> ''str'''
  - function-name: colour.utilities.common.int_digest
    signature: (obj, /)
  - function-name: colour.utilities.deprecation.get_attribute
    signature: '(attribute: ''str'') -> ''Any'''
  - function-name: colour.utilities.deprecation.build_API_changes
    signature: '(changes: ''dict'') -> ''dict'''
  - function-name: colour.utilities.deprecation.handle_arguments_deprecation
    signature: '(changes: ''dict'', **kwargs: ''Any'') -> ''dict'''
  - function-name: colour.utilities.documentation.is_documentation_building
    signature: () -> 'bool'
  - function-name: colour.utilities.metrics.metric_mse
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', axis: ''int | Tuple[int] | None''
      = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.metrics.metric_psnr
    signature: '(a: ''ArrayLike'', b: ''ArrayLike'', max_a: ''Real'' = 1, axis: ''int
      | Tuple[int] | None'' = None) -> ''NDArrayFloat'''
  - function-name: colour.utilities.requirements.is_ctlrender_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_matplotlib_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_networkx_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_opencolorio_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_openimageio_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_pandas_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_pydot_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_tqdm_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_trimesh_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.is_xxhash_installed
    signature: '(raise_exception: ''bool'' = False) -> ''bool'''
  - function-name: colour.utilities.requirements.required
    signature: '(*requirements: "Literal[''ctlrender'', ''Matplotlib'', ''NetworkX'',
      ''OpenColorIO'', ''OpenImageIO'', ''Pandas'', ''Pydot'', ''tqdm'', ''trimesh'',
      ''xxhash'']") -> ''Callable'''
  - function-name: colour.utilities.verbose.message_box
    signature: '(message: ''str'', width: ''int'' = 79, padding: ''int'' = 3, print_callable:
      ''Callable'' = <built-in function print>)'
  - function-name: colour.utilities.verbose.show_warning
    signature: '(message: ''Warning | str'', category: ''Type[Warning]'', filename:
      ''str'', lineno: ''int'', file: ''TextIO | None'' = None, line: ''str | None''
      = None) -> ''None'''
  - function-name: colour.utilities.verbose.warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.verbose.runtime_warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.verbose.usage_warning
    signature: '(*args: ''Any'', **kwargs: ''Any'')'
  - function-name: colour.utilities.verbose.filter_warnings
    signature: '(colour_runtime_warnings: ''bool | LiteralWarning | None'' = None,
      colour_usage_warnings: ''bool | LiteralWarning | None'' = None, colour_warnings:
      ''bool | LiteralWarning | None'' = None, python_warnings: ''bool | LiteralWarning
      | None'' = None)'
  - function-name: colour.utilities.verbose.as_bool
    signature: '(a: ''str'') -> ''bool'''
  - function-name: colour.utilities.verbose.suppress_warnings
    signature: '(colour_runtime_warnings: ''bool | LiteralWarning | None'' = None,
      colour_usage_warnings: ''bool | LiteralWarning | None'' = None, colour_warnings:
      ''bool | LiteralWarning | None'' = None, python_warnings: ''bool | LiteralWarning
      | None'' = None) -> ''Generator'''
  - function-name: colour.utilities.verbose.numpy_print_options
    signature: '(*args: ''Any'', **kwargs: ''Any'') -> ''Generator'''
  - function-name: colour.utilities.verbose.describe_environment
    signature: '(runtime_packages: ''bool'' = True, development_packages: ''bool''
      = False, extras_packages: ''bool'' = False, print_environment: ''bool'' = True,
      **kwargs: ''Any'') -> ''defaultdict'''
  - function-name: colour.utilities.verbose.multiline_str
    signature: '(object_: ''Any'', attributes: ''List[dict]'', header_underline: ''str''
      = ''='', section_underline: ''str'' = ''-'', separator: ''str'' = '' : '') ->
      ''str'''
  - function-name: colour.utilities.verbose.multiline_repr
    signature: '(object_: ''Any'', attributes: ''List[dict]'', reduce_array_representation:
      ''bool'' = True) -> ''str'''
  - function-name: colour.volume.is_within_macadam_limits
    signature: '(xyY: ''ArrayLike'', illuminant: "Literal[''A'', ''C'', ''D65''] |
      str" = ''D65'', tolerance: ''float'' = 2.2204460492503131e-14) -> ''NDArrayFloat'''
  - function-name: colour.volume.is_within_mesh_volume
    signature: '(points: ''ArrayLike'', mesh: ''ArrayLike'', tolerance: ''float''
      = 2.2204460492503131e-14) -> ''NDArrayFloat'''
  - function-name: colour.volume.is_within_pointer_gamut
    signature: '(XYZ: ''ArrayLike'', tolerance: ''float'' = 2.2204460492503131e-14)
      -> ''NDArrayFloat'''
  - function-name: colour.volume.generate_pulse_waves
    signature: '(bins: ''int'', pulse_order: "Literal[''Bins'', ''Pulse Wave Width'']
      | str" = ''Bins'', filter_jagged_pulses: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.volume.XYZ_outer_surface
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, point_order: "Literal[''Bins'', ''Pulse Wave Width''] | str"
      = ''Bins'', filter_jagged_points: ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.volume.solid_RoschMacAdam
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, point_order: "Literal[''Bins'', ''Pulse Wave Width''] | str"
      = ''Bins'', filter_jagged_points: ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.volume.is_within_visible_spectrum
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, tolerance: ''float''
      = 2.2204460492503131e-14, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.volume.RGB_colourspace_limits
    signature: '(colourspace: ''RGB_Colourspace'') -> ''NDArrayFloat'''
  - function-name: colour.volume.RGB_colourspace_volume_MonteCarlo
    signature: |-
      (colourspace: 'RGB_Colourspace', samples: 'int' = 1000000, limits: 'ArrayLike' = array([[   0,  100],
             [-150,  150],
             [-150,  150]]), illuminant_Lab: 'ArrayLike' = array([ 0.3127,  0.329 ]), chromatic_adaptation_transform: 'LiteralChromaticAdaptationTransform | str | None' = 'CAT02', random_generator: 'Callable' = <function random_triplet_generator at 0x7b93671fc860>, random_state: 'np.random.RandomState | None' = None) -> 'float'
  - function-name: colour.volume.RGB_colourspace_volume_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', coverage_sampler: ''Callable'',
      samples: ''int'' = 1000000, random_generator: ''Callable'' = <function random_triplet_generator
      at 0x7b93671fc860>, random_state: ''np.random.RandomState | None'' = None) ->
      ''float'''
  - function-name: colour.volume.RGB_colourspace_pointer_gamut_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', samples: ''int'' = 1000000, random_generator:
      ''Callable'' = <function random_triplet_generator at 0x7b93671fc860>, random_state:
      ''np.random.RandomState | None'' = None) -> ''float'''
  - function-name: colour.volume.RGB_colourspace_visible_spectrum_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', samples: ''int'' = 1000000, random_generator:
      ''Callable'' = <function random_triplet_generator at 0x7b93671fc860>, random_state:
      ''np.random.RandomState | None'' = None) -> ''float'''
  - function-name: colour.volume.macadam_limits.is_within_macadam_limits
    signature: '(xyY: ''ArrayLike'', illuminant: "Literal[''A'', ''C'', ''D65''] |
      str" = ''D65'', tolerance: ''float'' = 2.2204460492503131e-14) -> ''NDArrayFloat'''
  - function-name: colour.volume.mesh.is_within_mesh_volume
    signature: '(points: ''ArrayLike'', mesh: ''ArrayLike'', tolerance: ''float''
      = 2.2204460492503131e-14) -> ''NDArrayFloat'''
  - function-name: colour.volume.pointer_gamut.is_within_pointer_gamut
    signature: '(XYZ: ''ArrayLike'', tolerance: ''float'' = 2.2204460492503131e-14)
      -> ''NDArrayFloat'''
  - function-name: colour.volume.rgb.sample_RGB_colourspace_volume_MonteCarlo
    signature: |-
      (colourspace: 'RGB_Colourspace', samples: 'int' = 1000000, limits: 'ArrayLike' = array([[   0,  100],
             [-150,  150],
             [-150,  150]]), illuminant_Lab: 'ArrayLike' = array([ 0.3127,  0.329 ]), chromatic_adaptation_transform: 'LiteralChromaticAdaptationTransform | str | None' = 'CAT02', random_generator: 'Callable' = <function random_triplet_generator at 0x7b93671fc860>, random_state: 'np.random.RandomState | None' = None) -> 'int'
  - function-name: colour.volume.rgb.RGB_colourspace_limits
    signature: '(colourspace: ''RGB_Colourspace'') -> ''NDArrayFloat'''
  - function-name: colour.volume.rgb.RGB_colourspace_volume_MonteCarlo
    signature: |-
      (colourspace: 'RGB_Colourspace', samples: 'int' = 1000000, limits: 'ArrayLike' = array([[   0,  100],
             [-150,  150],
             [-150,  150]]), illuminant_Lab: 'ArrayLike' = array([ 0.3127,  0.329 ]), chromatic_adaptation_transform: 'LiteralChromaticAdaptationTransform | str | None' = 'CAT02', random_generator: 'Callable' = <function random_triplet_generator at 0x7b93671fc860>, random_state: 'np.random.RandomState | None' = None) -> 'float'
  - function-name: colour.volume.rgb.RGB_colourspace_volume_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', coverage_sampler: ''Callable'',
      samples: ''int'' = 1000000, random_generator: ''Callable'' = <function random_triplet_generator
      at 0x7b93671fc860>, random_state: ''np.random.RandomState | None'' = None) ->
      ''float'''
  - function-name: colour.volume.rgb.RGB_colourspace_pointer_gamut_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', samples: ''int'' = 1000000, random_generator:
      ''Callable'' = <function random_triplet_generator at 0x7b93671fc860>, random_state:
      ''np.random.RandomState | None'' = None) -> ''float'''
  - function-name: colour.volume.rgb.RGB_colourspace_visible_spectrum_coverage_MonteCarlo
    signature: '(colourspace: ''RGB_Colourspace'', samples: ''int'' = 1000000, random_generator:
      ''Callable'' = <function random_triplet_generator at 0x7b93671fc860>, random_state:
      ''np.random.RandomState | None'' = None) -> ''float'''
  - function-name: colour.volume.spectrum.generate_pulse_waves
    signature: '(bins: ''int'', pulse_order: "Literal[''Bins'', ''Pulse Wave Width'']
      | str" = ''Bins'', filter_jagged_pulses: ''bool'' = False) -> ''NDArrayFloat'''
  - function-name: colour.volume.spectrum.XYZ_outer_surface
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, point_order: "Literal[''Bins'', ''Pulse Wave Width''] | str"
      = ''Bins'', filter_jagged_points: ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.volume.spectrum.solid_RoschMacAdam
    signature: '(cmfs: ''MultiSpectralDistributions | None'' = None, illuminant: ''SpectralDistribution
      | None'' = None, point_order: "Literal[''Bins'', ''Pulse Wave Width''] | str"
      = ''Bins'', filter_jagged_points: ''bool'' = False, **kwargs: ''Any'') -> ''NDArrayFloat'''
  - function-name: colour.volume.spectrum.is_within_visible_spectrum
    signature: '(XYZ: ''ArrayLike'', cmfs: ''MultiSpectralDistributions | None'' =
      None, illuminant: ''SpectralDistribution | None'' = None, tolerance: ''float''
      = 2.2204460492503131e-14, **kwargs: ''Any'') -> ''NDArrayFloat'''
  modules: []
  variables:
  - type-name: dict
    variable-name: colour.appearance.CAM_KWARGS_CIECAM02_sRGB
  - type-name: dict
    variable-name: colour.appearance.ciecam02.CAM_KWARGS_CIECAM02_sRGB
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.ArrayLike
  - type-name: GenericAlias
    variable-name: colour.hints.NDArray
  - type-name: _CallableType
    variable-name: colour.hints.Callable
  - type-name: _SpecialForm
    variable-name: colour.hints.ClassVar
  - type-name: _SpecialGenericAlias
    variable-name: colour.hints.Dict
  - type-name: _SpecialGenericAlias
    variable-name: colour.hints.List
  - type-name: _TypedCacheSpecialForm
    variable-name: colour.hints.Literal
  - type-name: _SpecialForm
    variable-name: colour.hints.Optional
  - type-name: _SpecialGenericAlias
    variable-name: colour.hints.Set
  - type-name: _TupleType
    variable-name: colour.hints.Tuple
  - type-name: _SpecialGenericAlias
    variable-name: colour.hints.Type
  - type-name: _SpecialForm
    variable-name: colour.hints.Union
  - type-name: _SpecialForm
    variable-name: colour.hints.Self
  - type-name: NewType
    variable-name: colour.hints.RegexFlag
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.DTypeInt
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.DTypeFloat
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.DTypeReal
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.DTypeComplex
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.DType
  - type-name: _UnionGenericAlias
    variable-name: colour.hints.Real
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayInt
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayFloat
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayReal
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayComplex
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayBoolean
  - type-name: GenericAlias
    variable-name: colour.hints.NDArrayStr
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralWarning
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralChromaticAdaptationTransform
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralColourspaceModel
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralRGBColourspace
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralLogEncoding
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralLogDecoding
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralOETF
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralOETFInverse
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralEOTF
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralEOTFInverse
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralCCTFEncoding
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralCCTFDecoding
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralOOTF
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralOOTFInverse
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralLUTReadMethod
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralLUTWriteMethod
  - type-name: _LiteralGenericAlias
    variable-name: colour.hints.LiteralFontScaling
  - type-name: _GenericAlias
    variable-name: colour.io.ComponentsFichet2021
  - type-name: _GenericAlias
    variable-name: colour.io.fichet2021.ComponentsFichet2021
  - type-name: partial
    variable-name: colour.models.JMh_CAM16_to_CAM16LCD
  - type-name: partial
    variable-name: colour.models.CAM16LCD_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.JMh_CAM16_to_CAM16SCD
  - type-name: partial
    variable-name: colour.models.CAM16SCD_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.JMh_CAM16_to_CAM16UCS
  - type-name: partial
    variable-name: colour.models.CAM16UCS_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.XYZ_to_CAM16LCD
  - type-name: partial
    variable-name: colour.models.CAM16LCD_to_XYZ
  - type-name: partial
    variable-name: colour.models.XYZ_to_CAM16SCD
  - type-name: partial
    variable-name: colour.models.CAM16SCD_to_XYZ
  - type-name: partial
    variable-name: colour.models.XYZ_to_CAM16UCS
  - type-name: partial
    variable-name: colour.models.CAM16UCS_to_XYZ
  - type-name: RGB_Colourspace
    variable-name: colour.models.RGB_COLOURSPACE_sRGB
  - type-name: partial
    variable-name: colour.models.cam16_ucs.JMh_CAM16_to_CAM16LCD
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16LCD_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.cam16_ucs.JMh_CAM16_to_CAM16SCD
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16SCD_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.cam16_ucs.JMh_CAM16_to_CAM16UCS
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16UCS_to_JMh_CAM16
  - type-name: partial
    variable-name: colour.models.cam16_ucs.XYZ_to_CAM16LCD
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16LCD_to_XYZ
  - type-name: partial
    variable-name: colour.models.cam16_ucs.XYZ_to_CAM16SCD
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16SCD_to_XYZ
  - type-name: partial
    variable-name: colour.models.cam16_ucs.XYZ_to_CAM16UCS
  - type-name: partial
    variable-name: colour.models.cam16_ucs.CAM16UCS_to_XYZ
  - type-name: RGB_Colourspace
    variable-name: colour.models.rgb.RGB_COLOURSPACE_sRGB
  - type-name: RGB_Colourspace
    variable-name: colour.models.rgb.datasets.RGB_COLOURSPACE_sRGB
  - type-name: ndarray
    variable-name: colour.models.rgb.datasets.srgb.PRIMARIES_sRGB
  - type-name: str
    value: '''D65'''
    variable-name: colour.models.rgb.datasets.srgb.WHITEPOINT_NAME_sRGB
  - type-name: ndarray
    variable-name: colour.models.rgb.datasets.srgb.CCS_WHITEPOINT_sRGB
  - type-name: ndarray
    variable-name: colour.models.rgb.datasets.srgb.MATRIX_sRGB_TO_XYZ
  - type-name: ndarray
    variable-name: colour.models.rgb.datasets.srgb.MATRIX_XYZ_TO_sRGB
  - type-name: RGB_Colourspace
    variable-name: colour.models.rgb.datasets.srgb.RGB_COLOURSPACE_sRGB
  - type-name: _UnionGenericAlias
    variable-name: colour.quality.tm3018.ArrayLike
  - type-name: GenericAlias
    variable-name: colour.quality.tm3018.NDArrayFloat
  - type-name: GenericAlias
    variable-name: colour.quality.tm3018.NDArrayInt
  - type-name: _TupleType
    variable-name: colour.quality.tm3018.Tuple
  - type-name: _Feature
    variable-name: colour.quality.tm3018.annotations
  - type-name: SpectralShape
    variable-name: colour.recovery.SPECTRAL_SHAPE_sRGB_MALLETT2019
  - type-name: MultiSpectralDistributions
    variable-name: colour.recovery.MSDS_BASIS_FUNCTIONS_sRGB_MALLETT2019
  - type-name: SpectralShape
    variable-name: colour.recovery.datasets.SPECTRAL_SHAPE_sRGB_MALLETT2019
  - type-name: MultiSpectralDistributions
    variable-name: colour.recovery.datasets.MSDS_BASIS_FUNCTIONS_sRGB_MALLETT2019
  - type-name: SpectralShape
    variable-name: colour.recovery.datasets.mallett2019.SPECTRAL_SHAPE_sRGB_MALLETT2019
  - type-name: ndarray
    variable-name: colour.recovery.datasets.mallett2019.DATA_BASIS_FUNCTIONS_sRGB_MALLETT2019
  - type-name: MultiSpectralDistributions
    variable-name: colour.recovery.datasets.mallett2019.MSDS_BASIS_FUNCTIONS_sRGB_MALLETT2019
  - type-name: _lru_cache_wrapper
    variable-name: colour.utilities.validate_method
  - type-name: _lru_cache_wrapper
    variable-name: colour.utilities.common.validate_method

